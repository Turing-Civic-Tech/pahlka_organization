#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-290,578,578,604,-101,-101,269,-290,-290,-290,659,750,-290,-290,-290',
'269,-290,701,240,659,-105,-85,216,217,219,659,-290,-290,-290,-100,-99',
'-102,-71,578,578,-104,-290,-290,997,-290,-290,-290,-290,-290,658,578',
'-103,784,741,818,237,584,742,658,239,238,-107,-106,659,658,220,216,217',
'730,606,605,602,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-102,730,-290,-290,-290,-597,787,-290,730,-104,-290,658',
'268,-290,-290,269,-290,109,-290,-102,-290,268,-290,-290,-290,-290,-290',
'-290,-290,-92,-290,220,-290,-93,113,113,749,-101,931,112,112,700,-101',
'-596,-96,-290,-290,-290,-290,-600,-290,-517,-290,-91,-90,113,-600,-600',
'-600,-105,112,-600,-600,-600,-102,-600,113,113,-104,-102,220,112,112',
'-104,-600,-600,-600,-600,113,-103,-98,-97,113,112,-103,-600,-600,112',
'-600,-600,-600,-600,-600,216,217,-608,-95,207,-103,208,-93,113,268,269',
'-99,-93,112,623,113,209,113,215,-428,112,-95,112,-600,-600,-600,-600',
'-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,220,620,-600,-600',
'-600,-93,786,-600,-93,537,-600,259,539,-600,-600,316,-600,604,-600,-93',
'-600,83,-600,-600,-600,-600,-600,-600,-600,84,-600,-600,-600,-95,-596',
'-428,317,604,-419,604,622,524,-428,-600,-593,-600,-600,-600,-600,-600',
'-600,-428,-600,220,216,217,-600,-600,-600,-103,268,-518,-600,-600,619',
'-600,564,113,-95,-428,405,-95,112,-94,-600,407,406,566,606,605,604,220',
'-95,609,604,-600,-600,760,-600,-600,-600,-600,-600,354,-106,378,-600',
'-503,606,605,606,605,607,-600,-503,604,381,762,-596,-593,574,573,-600',
'-503,-100,384,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600',
'-600,-600,-600,-600,-593,-600,-600,-600,387,643,403,-600,-594,-600,606',
'605,-600,567,606,605,612,-600,785,-600,408,-600,-600,-600,-600,-600',
'-600,-600,637,-600,-600,-600,451,-508,-511,606,605,617,453,452,-508',
'-511,454,-290,-600,-600,604,-94,879,-600,-290,-290,-290,801,216,217',
'-290,-290,-103,-290,-600,-506,213,537,566,219,539,-600,-506,212,-95',
'-104,-596,-594,847,818,-600,-506,210,-290,-290,-104,-290,-290,-290,-290',
'-290,719,485,557,556,555,-107,558,-600,-594,537,574,573,539,719,-101',
'557,556,555,271,558,606,605,624,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,-290,495,-516,-290,-290,-290,-503,642,567,-516',
'-506,-290,498,-503,-290,113,500,-506,-516,-290,112,-290,636,-290,-290',
'-290,-290,-290,-290,-290,240,-290,-290,-290,-70,113,214,524,-517,-290',
'112,770,843,220,-597,-503,-290,-290,-290,-96,-518,-290,-503,-503,-503',
'977,-513,-503,-503,-503,-105,-503,237,-513,-93,537,239,238,536,-503',
'-512,-503,-503,-503,509,-102,510,-512,-98,-97,-90,-503,-503,-92,-503',
'-503,-503,-503,-503,-107,-106,-99,-91,517,-101,274,719,-509,557,556',
'555,-510,558,-100,-509,870,871,220,-510,872,107,108,-503,-503,-503,-503',
'-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,216,217,-503,-503',
'-503,213,-503,-503,715,271,-503,521,516,-503,-503,525,-503,718,-503',
'526,-503,514,-503,-503,-503,-503,-503,-503,-503,240,-503,534,-503,540',
'719,-515,557,556,555,113,558,584,-515,397,112,-503,-503,-503,-503,-506',
'-503,-515,-503,262,216,217,-506,-506,-506,-503,263,-506,-506,-506,719',
'-506,557,556,555,564,558,-281,715,-506,113,-506,-506,-506,-281,112,566',
'718,318,319,588,-506,-506,-281,-506,-506,-506,-506,-506,220,519,520',
'1001,719,-514,557,556,555,562,558,719,-514,557,556,555,589,558,847,818',
'574,573,611,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506',
'-506,-506,615,240,-506,-506,-506,715,-506,-506,262,618,-506,621,715',
'-506,-506,263,-506,567,-506,240,-506,923,-506,-506,-506,-506,-506,-506',
'-506,113,-506,628,-506,237,112,254,255,239,238,235,236,574,573,-265',
'630,-506,-506,-506,-506,220,-506,237,-506,634,635,239,238,235,236,-506',
'174,185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204',
'183,172,186,190,192,184,177,271,646,240,193,200,195,194,187,197,182',
'170,189,188,116,117,118,119,120,169,176,167,168,164,165,166,124,126',
'240,240,125,240,955,240,557,556,555,220,558,158,159,220,154,136,137',
'138,145,142,144,254,255,139,140,220,-85,240,160,161,146,147,719,676',
'557,556,555,237,558,243,220,239,238,235,236,151,150,530,135,157,153',
'152,148,149,143,141,133,156,134,237,687,162,-291,239,238,235,236,213',
'693,-291,715,694,697,719,958,557,556,555,-291,558,500,155,703,746,706',
'707,163,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199',
'203,204,183,172,186,190,192,184,177,715,709,711,193,200,195,194,187',
'197,182,170,189,188,116,117,118,119,120,169,176,167,168,164,165,166',
'124,126,713,722,125,723,955,240,557,556,555,724,558,158,159,726,154',
'136,137,138,145,142,144,254,255,139,140,584,733,763,160,161,146,147',
'719,764,557,556,555,237,558,243,765,239,238,235,236,151,150,-266,135',
'157,153,152,148,149,143,141,133,156,134,771,485,162,91,485,213,220,789',
'-291,259,498,715,449,92,719,-291,557,556,555,500,558,450,155,687,-291',
'220,271,163,174,185,175,198,171,191,181,180,201,202,196,179,178,173',
'199,203,204,183,172,186,190,192,184,177,715,271,687,193,200,195,194',
'187,197,182,170,189,188,116,117,118,119,120,169,176,167,168,164,165',
'166,124,126,123,240,125,240,818,220,-291,220,841,220,818,158,159,-291',
'154,136,137,138,145,142,144,851,-291,139,140,-290,-290,213,160,161,146',
'147,-290,-290,744,220,-267,-597,-597,878,881,-290,-290,746,706,151,150',
'884,135,157,153,152,148,149,143,141,133,156,134,213,-338,162,91,213',
'-515,887,528,-338,889,891,958,-515,92,220,893,450,-338,894,687,746,-515',
'155,902,-265,906,908,163,174,185,175,198,171,191,181,180,201,202,196',
'179,178,173,199,203,204,183,172,186,190,192,184,177,909,220,706,193',
'200,195,363,362,364,361,170,189,188,116,117,118,119,120,169,176,167',
'168,358,359,360,356,126,97,96,357,912,99,914,-516,916,918,918,220,158',
'159,-516,154,136,137,138,145,142,144,924,-516,139,140,213,-281,213,160',
'161,146,147,1008,-281,587,926,928,370,220,938,939,1006,-281,585,220',
'151,150,942,135,157,153,152,148,149,143,141,133,156,134,-268,952,162',
'959,960,962,963,979,981,982,986,706,991,993,995,997,997,1004,1009,1010',
'918,918,155,918,1015,979,-597,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,-596,693',
'979,193,200,195,194,187,197,182,170,189,188,1038,1039,1040,1041,997',
'169,176,167,168,164,165,166,124,126,997,997,125,220,918,979,3,,,,,158',
'159,,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,',
',,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,91',
',,,,,,,,,92,,,,,,,,,155,,,,,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,,,,193,200',
'195,194,187,197,182,170,189,188,,,,,,169,176,167,168,164,165,166,124',
'126,,,125,,,,,,,,,158,159,,154,136,137,138,145,142,144,,,139,140,,,',
'160,161,146,147,,,,,,,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,91,,,,,,,,,,92,,,,,,,,,155,,,,,163,174,185,175,198',
'171,191,181,180,201,202,196,179,178,173,199,203,204,183,172,186,190',
'192,184,177,,,,193,200,195,194,187,197,182,170,189,188,,,,,,169,176',
'167,168,164,165,166,124,126,394,393,125,,395,,,,,,,158,159,,154,136',
'137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,,,,,,,,,151,150',
',135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,,,8,72,73',
'74,12,60,,,155,66,67,,,163,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,647,11,48,10,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253',
',233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235',
'236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,-242,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,647,11,48,,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256',
'257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47',
'239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258',
',,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,631,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,43,,,294,,,61,62,,,63,,38,237',
',243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84',
'92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38',
'237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89',
',,,84,92,220,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48',
',13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61',
'62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83',
'85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,8,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
'11,48,10,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,',
',36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23',
'242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241',
'23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90',
'292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236',
'247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88',
'90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253',
',233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235',
'236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81',
'88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252',
'253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238',
'235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,',
',,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248',
'256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92',
',258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237',
',243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84',
'92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38',
'237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89',
',,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62',
',,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85',
'86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
'11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240',
'-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,36,,,61,62',
',,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11',
'48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,-620',
'-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,,,36,,,61,62,,,63',
',38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249',
'250,251,246,248,256,,252,253,,,,,,254,255,,43,,,36,,,61,62,,,63,,38',
'237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,-620,-620,-620',
'-620,246,248,,,-620,-620,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237',
',243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,-620,-620,-620,-620',
'246,248,,,-620,-620,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246',
'248,,,252,253,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,-620,-620,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,-620,-620,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,,,,,,,,,,,,,,,,254,255,,43,,',
'36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,,,241,23,242,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
'11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240',
',,,,,,,,,,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238',
'235,236,,,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,240,-620,-620,-620,-620,246,248,,,-620,-620',
',,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,240,,,,,,,,,,,,,,,,254,255,,43,,,294,,,61,62,,,63,',
'38,237,,243,47,239,238,235,236,,,241,23,242,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,,,,,,,,,,,,,,,,254',
'255,,43,,,294,,,61,62,,,63,,38,237,,243,47,239,238,235,236,,,241,23',
'242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,719,63,557,556,555,801,558',
'47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88',
'90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,719,63',
'557,556,555,801,558,47,,,,,,,,23,566,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,567,,,48,,,105,104,106',
'95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,240,-620,-620,-620,-620',
'246,248,,,-620,-620,,,,,,254,255,,225,,,231,,,61,62,,,63,,283,237,281',
'243,47,239,238,235,236,247,245,241,230,242,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,719,63,557,556,555,564,558,47,,,,,,,,230,566,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,719,63,557,556,555,564,558',
'47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88',
'90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,719,63',
'557,556,555,564,558,47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,567,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,719,63,557,556,555,801,558,47,,,,,,,,230,566,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,719,63,557,556,555,801,558',
'47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88',
'90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,567,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',719,63,557,556,555,801,558,47,,,,,,,,230,566,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,567,,',
'48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,',
',,,,,,,,,,,,225,,,231,,,61,62,,719,63,557,556,555,564,558,47,,,,,,,',
'230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74',
',60,,574,573,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,220,,,,,,65,,286,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,',
',230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,,,313,,,,,,,,,,,,,,,,,,,,896,,,231,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48',
',13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,',
',,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,',
',,,,303,,,299,,,61,62,,,63,,298,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303',
',,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,315',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,231,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,512,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,',
',,,,,,,,,,,,,,,,896,,,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303',
',,299,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,969,,,231,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,671,,,,47',
',,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,530,,61,62,,,63,,,,,,47,,',
',,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310',
'75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,283,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,',
'305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,590,59,97',
'96,591,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,592,,,231,,,61,62',
',,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,307,,,105,104,106,590,59,97,96,591,,99,107',
'108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,592,,,231,,,61,62,,,63,,,,,,,,',
',,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,113,,,,,112,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,',
',,,,,,348,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,10,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96',
'98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38',
',,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,397,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,671,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,397,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281',
',47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,',
',,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,413,,,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310',
'75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,671,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,413,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,220,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,768',
',,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,671,,281',
',47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,281',
',47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,',
',105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,',
',,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,',
',,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,',
',,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,413,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
'283,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,-601,91,83,85,86,87,89,-601,-601,-601,84,92,-601',
'-601,-601,,-601,,65,,,81,88,90,,-601,-601,-601,-601,,,,,,,,-601,-601',
',-601,-601,-601,-601,-601,,,,,,,,,,,,,,,,,,,,,,,,-601,-601,-601,-601',
'-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,,,-601,-601,-601,',
',-601,,,-601,,,-601,-601,,-601,,-601,,-601,,-601,-601,-601,-601,-601',
'-601,-601,,-601,-601,-601,,,,,,,,,,,,,-601,-601,-601,-601,-602,-601',
',-601,,,,-602,-602,-602,,,-602,-602,-602,560,-602,557,556,555,564,558',
',,,-602,-602,-602,-602,,,566,,,,,-602,-602,,-602,-602,-602,-602,-602',
',,,,,,,,,562,754,,,,,,,,571,570,574,573,,-602,-602,-602,-602,-602,-602',
'-602,-602,-602,-602,-602,-602,-602,-602,,,-602,-602,-602,,,-602,,,-602',
',,-602,-602,,-602,567,-602,,-602,,-602,-602,-602,-602,-602,-602,-602',
',-602,-602,-602,,,,,,,,,,,,,-602,-602,-602,-602,-282,-602,,-602,,,,-282',
'-282,-282,,,-282,-282,-282,560,-282,557,556,555,564,558,,,,,-282,-282',
'-282,,,566,,,,,-282,-282,,-282,-282,-282,-282,-282,,,,,,,,,,562,,,,',
',,,,571,570,574,573,,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,,,-282,-282,-282,,,-282,,,-282,,,-282,-282,,-282',
'567,-282,,-282,,-282,-282,-282,-282,-282,-282,-282,,-282,,-282,,,,,',
',,,,,,,-282,-282,-282,-282,-619,-282,,-282,,,,-619,-619,-619,,,-619',
'-619,-619,560,-619,557,556,555,564,558,,,,-619,-619,-619,,,,566,,,,',
'-619,-619,,-619,-619,-619,-619,-619,,,,,,,,,,562,,,,,,,,,571,570,574',
'573,,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619',
'-619,,,-619,-619,-619,,,-619,,271,-619,,,-619,-619,,-619,567,-619,,-619',
',-619,-619,-619,-619,-619,-619,-619,,-619,-619,-619,,,,,,,,,,,,-427',
'-619,-619,,-619,,-619,-427,-427,-427,,,-427,-427,-427,800,-427,557,556',
'555,801,558,,,,-427,-427,-427,,,,566,,,,,-427,-427,,-427,-427,-427,-427',
'-427,,,,,,,,,,562,,,,,,,,,571,570,574,573,,-427,-427,-427,-427,-427',
'-427,-427,-427,-427,-427,-427,-427,-427,-427,,,-427,-427,-427,,,-427',
',271,-427,,,-427,-427,,-427,567,-427,,-427,,-427,-427,-427,-427,-427',
'-427,-427,,-427,-427,-427,,,,,,,,,,,,-298,-427,-427,,-427,,-427,-298',
'-298,-298,,,-298,-298,-298,800,-298,557,556,555,801,558,,,,,-298,-298',
',,,566,,,,,-298,-298,,-298,-298,-298,-298,-298,,,,,,,,,,562,,,,,,,,',
'571,570,574,573,,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,,,-298,-298,-298,,,-298,,274,-298,,,-298,-298,,-298,567',
'-298,,-298,,-298,-298,-298,-298,-298,-298,-298,,-298,,-298,,,,,,,,,',
',,-619,-298,-298,,-298,,-298,-619,-619,-619,,,-619,-619,-619,,-619,800',
',557,556,555,801,558,,-619,-619,,,,,,,566,,,-619,-619,,-619,-619,-619',
'-619,-619,,,560,,557,556,555,564,558,,,562,,,,,,,566,,571,570,574,573',
',,,,,,,,,,-619,,,,,,562,-619,,,,,271,-619,220,571,570,574,573,,,,567',
',1003,433,,,1002,,,,,,-619,-619,,158,159,,154,136,137,138,145,142,144',
',-619,139,140,567,,-619,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,483,426,,,484',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,738,433,,,739,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',736,426,,,737,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,1033,433,,,1034,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,1031,426,,,1032,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,560,162,557,556,555,564,558',
',,,,483,426,,,484,566,,,,,155,,,158,159,163,154,136,137,138,145,142',
'144,,,139,140,562,,,160,161,146,147,,,571,570,574,573,,,,,,,,151,150',
',135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,567,855,433',
',,856,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,',
',,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143',
'141,133,156,134,,,162,,,,,,,,,,429,433,,,428,,,,,,155,,,158,159,163',
'154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,',
',,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,',
',,,,,422,426,,,423,,,,,,155,,,158,159,163,154,136,137,138,145,142,144',
',,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,651,433,,,652,,,,,,155,,',
'158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,649,426,,,650,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,649,426,,,650',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,651,433,,,652,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',683,433,,,684,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,680,426,,,681,,,,,,155,,',
'158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',560,162,557,556,555,564,558,560,,557,556,555,564,558,,,566,,,,,155',
',566,,560,163,557,556,555,564,558,,,,,,,562,,,566,,,,562,754,571,570',
'574,573,,,,571,570,574,573,,,,,,562,546,800,,557,556,555,801,558,571',
'570,574,573,,,,,,566,,567,,,,,,,567,,,,,,,,,,,,,562,,,,,567,,,,571,570',
'574,573,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,567' ]
        racc_action_table = arr = ::Array.new(25672, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'652,339,852,372,1046,853,64,652,652,652,489,596,652,652,652,308,652',
'545,458,490,739,675,446,446,22,663,652,652,652,346,345,1031,675,927',
'905,1032,652,652,1048,652,652,652,652,652,489,338,1033,649,592,984,458',
'984,592,490,458,458,349,588,481,663,22,757,757,854,372,372,372,652,652',
'652,652,652,652,652,652,652,652,652,652,652,652,736,581,652,652,652',
'739,652,652,580,737,652,481,64,652,652,662,652,3,652,649,652,308,652',
'652,652,652,652,652,652,853,652,446,652,680,339,852,596,1046,852,339',
'852,545,1046,1033,739,652,652,652,652,651,652,223,652,346,345,596,651',
'651,651,652,596,651,651,651,1031,651,927,905,1032,1031,757,927,905,1032',
'651,651,651,651,338,1033,349,588,854,338,1033,651,651,854,651,651,651',
'651,651,691,691,61,681,13,738,15,680,581,662,29,223,736,581,388,580',
'16,936,19,813,580,737,936,651,651,651,651,651,651,651,651,651,651,651',
'651,651,651,61,385,651,651,651,680,651,651,680,543,651,25,543,651,651',
'40,651,613,651,680,651,80,651,651,651,651,651,651,651,80,651,651,651',
'681,738,813,43,616,29,374,388,451,813,855,590,651,651,651,651,429,651',
'813,651,691,533,533,429,429,429,651,29,224,429,429,385,429,703,755,681',
'813,123,681,755,738,429,123,123,703,613,613,376,48,681,376,379,429,429',
'613,429,429,429,429,429,72,451,87,855,590,616,616,374,374,374,855,590',
'382,88,616,855,590,703,703,855,590,224,89,429,429,429,429,429,429,429',
'429,429,429,429,429,429,429,855,590,429,429,429,90,429,121,683,591,429',
'376,376,429,703,379,379,379,429,650,429,205,429,429,429,429,429,429',
'429,423,429,429,429,225,362,361,382,382,382,227,226,362,361,228,428',
'429,429,390,429,788,429,428,428,428,881,20,20,428,428,429,428,683,591',
'17,331,881,232,331,683,591,17,423,650,683,591,1017,1017,683,591,17,428',
'428,423,428,428,428,428,428,718,264,718,718,718,226,718,683,591,696',
'881,881,696,923,788,923,923,923,267,923,390,390,390,428,428,428,428',
'428,428,428,428,428,428,428,428,428,428,278,301,428,428,428,356,428',
'881,301,357,428,279,356,428,862,282,357,301,428,862,428,422,428,428',
'428,428,428,428,428,457,428,856,428,293,289,18,317,41,856,289,632,718',
'295,856,95,428,428,856,428,42,428,95,95,95,923,358,95,95,95,428,95,457',
'358,422,330,457,457,330,95,359,95,95,95,296,422,297,359,18,317,41,95',
'95,632,95,95,95,95,95,18,317,41,42,303,632,306,562,363,562,562,562,364',
'562,42,363,758,758,307,364,758,758,758,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,751,751,95,95,95,302,95,95,562,312,95,314,302,95,95,318',
'95,562,95,319,95,302,95,95,95,95,95,95,95,322,95,328,95,332,715,300',
'715,715,715,5,715,343,300,344,5,95,95,95,95,98,95,300,95,366,337,337',
'98,98,98,95,366,98,98,98,711,98,711,711,711,711,711,304,715,98,750,98',
'98,98,304,750,711,715,44,44,348,98,98,304,98,98,98,98,98,953,313,313',
'953,977,360,977,977,977,711,977,841,360,841,841,841,350,841,725,725',
'711,711,378,98,98,98,98,98,98,98,98,98,98,98,98,98,98,381,476,98,98',
'98,977,98,98,27,384,98,387,841,98,98,27,98,711,98,465,98,841,98,98,98',
'98,98,98,98,342,98,409,98,476,342,465,465,476,476,476,476,706,706,411',
'414,98,98,98,98,417,98,465,98,420,421,465,465,465,465,98,756,756,756',
'756,756,756,756,756,756,756,756,756,756,756,756,756,756,756,756,756',
'756,756,756,756,430,438,459,756,756,756,756,756,756,756,756,756,756',
'674,674,674,674,674,756,756,756,756,756,756,756,756,756,460,461,756',
'462,893,463,893,893,893,491,893,756,756,492,756,756,756,756,756,756',
'756,463,463,756,756,507,508,477,756,756,756,756,924,511,924,924,924',
'463,924,463,513,463,463,463,463,756,756,518,756,756,756,756,756,756',
'756,756,756,756,756,477,522,756,742,477,477,477,477,895,531,742,924',
'532,541,843,895,843,843,843,742,843,544,756,548,895,549,551,756,404',
'404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404',
'404,404,404,404,404,404,843,552,553,404,404,404,404,404,404,404,404',
'404,404,291,291,291,291,291,404,404,404,404,404,404,404,404,404,560',
'568,404,572,1001,464,1001,1001,1001,575,1001,404,404,577,404,404,404',
'404,404,404,404,464,464,404,404,582,583,620,404,404,404,404,1015,623',
'1015,1015,1015,464,1015,464,625,464,464,464,464,404,404,629,404,404',
'404,404,404,404,404,404,404,404,404,633,638,404,404,644,222,653,655',
'1009,661,668,1015,222,404,979,1009,979,979,979,670,979,222,404,677,1009',
'679,682,404,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,979,685,686,11,11,11,11,11,11,11,11,11,11,9,9,9,9,9,11',
'11,11,11,11,11,11,11,11,11,689,11,690,692,695,517,702,717,720,727,11',
'11,517,11,11,11,11,11,11,11,732,517,11,11,684,1034,594,11,11,11,11,684',
'1034,594,735,767,684,1034,772,790,684,1034,594,791,11,11,793,11,11,11',
'11,11,11,11,11,11,11,11,320,49,11,11,957,966,794,320,49,795,797,957',
'966,11,798,799,320,49,800,812,957,966,11,816,819,820,825,11,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,826,827',
'828,74,74,74,74,74,74,74,74,74,74,506,506,506,506,506,74,74,74,74,74',
'74,74,74,74,74,74,74,832,74,833,967,835,836,838,840,74,74,967,74,74',
'74,74,74,74,74,842,967,74,74,968,970,347,74,74,74,74,968,970,347,845',
'848,74,858,863,864,968,970,347,865,74,74,874,74,74,74,74,74,74,74,74',
'74,74,74,875,892,74,896,897,899,900,925,929,930,935,943,946,947,948',
'949,951,961,969,972,973,974,74,975,976,978,1002,74,627,627,627,627,627',
'627,627,627,627,627,627,627,627,627,627,627,627,627,627,627,627,627',
'627,627,1003,1005,1016,627,627,627,627,627,627,627,627,627,627,1021',
'1022,1023,1024,1025,627,627,627,627,627,627,627,627,627,1026,1027,627',
'1030,1035,1036,1,,,,,627,627,,627,627,627,627,627,627,627,,,627,627',
',,,627,627,627,627,,,,,,,,,,,,,,627,627,,627,627,627,627,627,627,627',
'627,627,627,627,,,627,627,,,,,,,,,,627,,,,,,,,,627,,,,,627,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12',
'12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,',
',,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,',
'12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,',
'12,,,,,12,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91',
'91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91',
'91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,',
',,,,,,,,,,2,2,2,2,2,2,,,91,2,2,,,91,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2',
'2,2,,,2,,,,,441,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,441,441,441',
'441,441,441,441,441,441,441,441,,441,441,,,441,441,,2,,,2,,,2,2,,,2',
',2,441,,441,2,441,441,441,441,441,441,441,2,441,,,,2,2,2,2,2,2,,,,2',
'2,,441,,441,,,2,,,2,2,2,859,859,859,859,859,859,,,,859,859,,,,859,,859',
'859,859,859,859,859,859,,,,,,859,859,859,859,859,859,859,,,859,,,,,654',
'859,859,,859,859,859,859,859,859,859,859,859,,859,859,859,,859,859,',
'859,859,859,654,654,654,654,654,654,654,654,654,654,654,,654,654,,,654',
'654,,859,,,859,,,859,859,,,859,,859,654,,654,859,654,654,654,654,654',
'654,654,859,654,,,,859,859,859,859,859,859,,,,859,859,,654,,,,,859,',
',859,859,859,299,299,299,299,299,299,,,,299,299,,,,299,,299,299,299',
'299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,416,299,299',
',299,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,299,299',
'299,416,416,416,416,416,416,416,416,416,416,416,,416,416,,,416,416,',
'299,,,299,,,299,299,,,299,,299,416,,416,299,416,416,416,416,416,416',
'416,299,416,,,,299,299,299,299,299,299,,,,299,299,,416,,,,,299,,,299',
'299,299,850,850,850,850,850,850,,,,850,850,,,,850,,850,850,850,850,850',
'850,850,,,,,,850,850,850,850,850,850,850,,,850,,,,,,850,850,,850,850',
'850,850,850,850,850,850,850,,850,850,850,,850,850,,850,850,850,480,480',
'480,480,480,480,480,480,480,480,480,,480,480,,,480,480,,850,,,850,,',
'850,850,,,850,,850,480,,480,850,480,480,480,480,480,480,480,850,480',
',,,850,850,850,850,850,850,,,,850,850,480,480,,,,,850,,,850,850,850',
'849,849,849,849,849,849,,,,849,849,,,,849,,849,849,849,849,849,849,849',
',,,,,849,849,849,849,849,849,849,,,849,,,,,,849,849,,849,849,849,849',
'849,849,849,849,849,,849,849,849,,849,849,,849,849,849,779,779,779,779',
'779,779,779,779,779,779,779,,779,779,,,779,779,,849,,,849,,,849,849',
',,849,,849,779,,779,849,779,779,779,779,779,779,779,849,779,,,,849,849',
'849,849,849,849,,,,849,849,,779,,,,,849,,,849,849,849,403,403,403,403',
'403,403,,,,403,403,,,,403,,403,403,403,403,403,403,403,,,,,,403,403',
'403,403,403,403,403,,,403,,,,,,403,403,403,403,403,403,403,403,403,403',
'403,403,,403,403,403,,403,403,,403,403,403,276,276,276,276,276,276,276',
'276,276,276,276,,276,276,,,276,276,,403,,,403,,,403,403,,,403,,403,276',
',276,403,276,276,276,276,276,276,276,403,276,,,,403,403,403,403,403',
'403,,,,403,403,,276,,,,,403,,,403,403,403,231,231,231,231,231,231,,',
',231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231',
'231,231,,,231,,,,,,231,231,,231,231,231,231,231,231,231,231,231,,231',
'231,231,,231,231,,231,231,231,24,24,24,24,24,24,24,24,24,24,24,,24,24',
',,24,24,,231,,,231,,,231,231,,,231,,231,24,,24,231,24,24,24,24,24,24',
'24,231,24,,,,231,231,231,231,231,231,,,,231,231,,24,,,,,231,,,231,231',
'231,700,700,700,700,700,700,,,,700,700,,,,700,,700,700,700,700,700,700',
'700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,700,700,,700,700,700',
'700,700,700,700,700,700,,700,700,700,,700,700,,700,700,700,436,436,436',
'436,436,436,436,436,436,436,436,,436,436,,,436,436,,700,,,700,,,700',
'700,,,700,,700,436,,436,700,436,436,436,436,436,436,436,700,436,,,,700',
'700,700,700,700,700,,,,700,700,,436,,,,,700,,,700,700,700,579,579,579',
'579,579,579,,,,579,579,,,,579,,579,579,579,579,579,579,579,,,,,,579',
'579,579,579,579,579,579,,,579,,,,,,579,579,,579,579,579,579,579,579',
'579,579,579,,579,579,579,,579,579,,579,579,579,783,783,783,783,783,783',
'783,783,783,783,783,,783,783,,,783,783,,579,,,579,,,579,579,,,579,,579',
'783,,783,579,783,783,783,783,783,783,783,579,783,,,,579,579,579,579',
'579,579,,,,579,579,,783,,,,,579,,,579,579,579,989,989,989,989,989,989',
',,,989,989,,,,989,,989,989,989,989,989,989,989,,,,,,989,989,989,989',
'989,989,989,,,989,,,,,,989,989,,989,989,989,989,989,989,989,989,989',
',989,989,989,,989,989,,989,989,989,769,769,769,769,769,769,769,769,769',
'769,769,,769,769,,,769,769,,989,,,989,,,989,989,,,989,,989,769,,769',
'989,769,769,769,769,769,769,769,989,769,,,,989,989,989,989,989,989,',
',,989,989,,769,,,,,989,,,989,989,989,752,752,752,752,752,752,,,,752',
'752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752',
'752,,,752,,,,,,752,752,,752,752,752,752,752,752,752,752,752,,752,752',
'752,,752,752,,752,752,752,774,774,774,774,774,774,774,774,774,774,774',
',774,774,,,774,774,,752,,,752,,,752,752,,,752,,752,774,,774,752,774',
'774,774,774,774,774,774,752,774,,,,752,752,752,752,752,752,,,,752,752',
',774,,,,,752,,,752,752,752,753,753,753,753,753,753,,,,753,753,,,,753',
',753,753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753,,,753',
',,,,,753,753,,753,753,753,753,753,753,753,753,753,,753,753,753,,753',
'753,,753,753,753,529,529,529,529,529,529,529,529,529,529,529,,529,529',
',,529,529,,753,,,753,,,753,753,,,753,,753,529,,529,753,529,529,529,529',
'529,529,529,753,529,,,,753,753,753,753,753,753,,,,753,753,,529,,,,,753',
',,753,753,753,988,988,988,988,988,988,,,,988,988,,,,988,,988,988,988',
'988,988,988,988,,,,,,988,988,988,988,988,988,988,,,988,,,,,,988,988',
',988,988,988,988,988,988,988,988,988,,988,988,988,,988,988,,988,988',
'988,781,781,781,781,781,781,781,781,781,781,781,,781,781,,,781,781,',
'988,,,988,,,988,988,,,988,,988,781,,781,988,781,781,781,781,781,781',
'781,988,781,,,,988,988,988,988,988,988,,,,988,988,,781,,,,,988,,,988',
'988,988,985,985,985,985,985,985,,,,985,985,,,,985,,985,985,985,985,985',
'985,985,,,,,,985,985,985,985,985,985,985,,,985,,,,,,985,985,,985,985',
'985,985,985,985,985,985,985,,985,985,985,,985,985,,985,985,985,880,880',
'880,880,880,880,880,880,880,880,880,,880,880,,,880,880,,985,,,985,,',
'985,985,,,985,,985,880,,880,985,880,880,880,880,880,880,880,985,880',
',,,985,985,985,985,985,985,,,,985,985,,880,,,,,985,,,985,985,985,576',
'576,576,576,576,576,,,,576,576,,,,576,,576,576,576,576,576,576,576,',
',,,,576,576,576,576,576,576,576,,,576,,,,,,576,576,,576,576,576,576',
'576,576,576,576,576,,576,576,576,,576,576,,576,576,576,776,776,776,776',
'776,776,776,776,776,776,776,,776,776,,,776,776,,576,,,576,,,576,576',
',,576,,576,776,,776,576,776,776,776,776,776,776,776,576,776,,,,576,576',
'576,576,576,576,,,,576,576,,776,,,,,576,,,576,576,576,980,980,980,980',
'980,980,,,,980,980,,,,980,,980,980,980,980,980,980,980,,,,,,980,980',
'980,980,980,980,980,,,980,,,,,,980,980,,980,980,980,980,980,980,980',
'980,980,,980,980,980,,980,980,,980,980,980,877,877,877,877,877,877,877',
'877,877,877,877,,877,877,,,877,877,,980,,,980,,,980,980,,,980,,980,877',
',877,980,877,877,877,877,877,877,877,980,877,,,,980,980,980,980,980',
'980,,,,980,980,,877,,,,,980,,,980,980,980,207,207,207,207,207,207,,',
',207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207,207,207,207',
'207,207,,,207,,,,,,207,207,,207,207,207,207,207,207,207,207,207,,207',
'207,207,,207,207,,207,207,207,688,688,688,688,688,688,688,688,688,688',
'688,,688,688,,,688,688,,207,,,207,,,207,207,,,207,,207,688,,688,207',
'688,688,688,688,688,688,688,207,688,,,,207,207,207,207,207,207,,,,207',
'207,,688,,,,,207,,,207,207,207,965,965,965,965,965,965,,,,965,965,,',
',965,,965,965,965,965,965,965,965,,,,,,965,965,965,965,965,965,965,',
',965,,,,,,965,965,,965,965,965,965,965,965,965,965,965,,965,965,965',
',965,965,,965,965,965,471,471,471,471,471,471,471,,,471,471,,,,,,471',
'471,,965,,,965,,,965,965,,,965,,965,471,,471,965,471,471,471,471,471',
'471,471,965,471,,,,965,965,965,965,965,965,,,,965,965,,,,,,,965,,,965',
'965,965,804,804,804,804,804,804,,,,804,804,,,,804,,804,804,804,804,804',
'804,804,,,,,,804,804,804,804,804,804,804,,,804,,,,,,804,804,,804,804',
'804,804,804,804,804,804,804,,804,804,804,,804,804,,804,804,804,474,474',
'474,474,474,474,474,,,474,474,,,,,,474,474,,804,,,804,,,804,804,,,804',
',804,474,,474,804,474,474,474,474,474,474,474,804,474,,,,804,804,804',
'804,804,804,,,,804,804,,,,,,,804,,,804,804,804,808,808,808,808,808,808',
',,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808,808,808,808',
'808,808,808,,,808,,,,,,808,808,,808,808,808,808,808,808,808,808,808',
',808,808,808,,808,808,,808,808,808,479,479,479,479,479,479,479,479,',
'479,479,,,,,,479,479,,808,,,808,,,808,808,,,808,,808,479,,479,808,479',
'479,479,479,479,479,479,808,479,,,,808,808,808,808,808,808,,,,808,808',
',,,,,,808,,,808,808,808,809,809,809,809,809,809,,,,809,809,,,,809,,809',
'809,809,809,809,809,809,,,,,,809,809,809,809,809,809,809,,,809,,,,,',
'809,809,,809,809,809,809,809,809,809,809,809,,809,809,809,,809,809,',
'809,809,809,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,809',
',,809,,,809,809,,,809,,809,473,,473,809,473,473,473,473,473,473,473',
'809,473,,,,809,809,809,809,809,809,,,,809,809,,,,,,,809,,,809,809,809',
'759,759,759,759,759,759,,,,759,759,,,,759,,759,759,759,759,759,759,759',
',,,,,759,759,759,759,759,759,759,,,759,,,,,,759,759,,759,759,759,759',
'759,759,759,759,759,,759,759,759,,759,759,,759,759,759,466,466,466,466',
'466,466,466,,,466,466,,,,,,466,466,,759,,,759,,,759,759,,,759,,759,466',
',466,759,466,466,466,466,466,466,466,759,466,,,,759,759,759,759,759',
'759,,,,759,759,,,,,,,759,,,759,759,759,325,325,325,325,325,325,,,,325',
'325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325,325',
'325,,,325,,,,,,325,325,,325,325,325,325,325,325,325,325,325,,325,325',
'325,,325,325,,325,325,325,478,478,478,478,478,478,478,,,478,478,,,,',
',478,478,,325,,,325,,,325,325,,,325,,325,478,,478,325,478,478,478,478',
'478,478,478,325,478,,,,325,325,325,325,325,325,,,,325,325,,,,,,,325',
',,325,325,325,932,932,932,932,932,932,,,,932,932,,,,932,,932,932,932',
'932,932,932,932,,,,,,932,932,932,932,932,932,932,,,932,,,,,,932,932',
',932,932,932,932,932,932,932,932,932,,932,932,932,,932,932,,932,932',
'932,455,455,455,455,455,455,455,455,455,455,455,,455,455,,,455,455,',
'932,,,932,,,932,932,,,932,,932,455,,455,932,455,455,455,455,455,455',
'455,932,455,,,,932,932,932,932,932,932,,,,932,932,,,,,,,932,,,932,932',
'932,818,818,818,818,818,818,,,,818,818,,,,818,,818,818,818,818,818,818',
'818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,818,818,,818,818,818',
'818,818,818,818,818,818,,818,818,818,,818,818,,818,818,818,456,456,456',
'456,456,456,456,456,456,456,456,,456,456,,,456,456,,818,,,818,,,818',
'818,,,818,,818,456,,456,818,456,456,456,456,456,456,456,818,456,,,,818',
'818,818,818,818,818,,,,818,818,,,,,,,818,,,818,818,818,701,701,701,701',
'701,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701',
'701,701,701,701,701,,,701,,,,,,701,701,,701,701,701,701,701,701,701',
'701,701,,701,701,701,,701,701,,701,701,701,467,,,,,,,,,,,,,,,,467,467',
',701,,,701,,,701,701,,,701,,701,467,,467,701,467,467,467,467,,,467,701',
'467,,,,701,701,701,701,701,701,,,,701,701,,,,,,,701,,,701,701,701,902',
'902,902,902,902,902,,,,902,902,,,,902,,902,902,902,902,902,902,902,',
',,,,902,902,902,902,902,902,902,,,902,,,,,,902,902,,902,902,902,902',
'902,902,902,902,902,,902,902,902,,902,902,,902,902,902,468,,,,,,,,,',
',,,,,,468,468,,902,,,902,,,902,902,,,902,,902,468,,468,902,468,468,468',
'468,,,468,902,468,,,,902,902,902,902,902,902,,,,902,902,,,,,,,902,,',
'902,902,902,898,898,898,898,898,898,,,,898,898,,,,898,,898,898,898,898',
'898,898,898,,,,,,898,898,898,898,898,898,898,,,898,,,,,,898,898,,898',
'898,898,898,898,898,898,898,898,,898,898,898,,898,898,,898,898,898,475',
'475,475,475,475,475,475,,,475,475,,,,,,475,475,,898,,,898,,,898,898',
',,898,,898,475,,475,898,475,475,475,475,475,475,475,898,475,,,,898,898',
'898,898,898,898,,,,898,898,,,,,,,898,,,898,898,898,36,36,36,36,36,36',
',,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36',
',,,,,36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,469',
',,,,,,,,,,,,,,,469,469,,36,,,36,,,36,36,,,36,,36,469,,469,36,469,469',
'469,469,,,469,36,469,,,,36,36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36',
'36,294,294,294,294,294,294,,,,294,294,,,,294,,294,294,294,294,294,294',
'294,,,,,,294,294,294,294,294,294,294,,,294,,,,,,294,294,,294,294,294',
'294,294,294,294,294,294,,294,294,294,,294,294,,294,294,294,470,,,,,',
',,,,,,,,,,470,470,,294,,,294,,,294,294,,,294,,294,470,,470,294,470,470',
'470,470,,,470,294,470,,,,294,294,294,294,294,294,,,,294,294,,,,,,,294',
',,294,294,294,281,281,281,,281,,,,281,281,,,,281,,281,281,281,281,281',
'281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281,281,281',
'281,281,281,281,281,,281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,',
',,,,,,281,,,281,,,281,281,,1041,281,1041,1041,1041,1041,1041,281,,,',
',,,,281,1041,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281,1041,,281',
'281,281,740,740,740,,740,,1041,1041,740,740,,,,740,,740,740,740,740',
'740,740,740,,,,,,740,740,740,740,740,740,740,,,740,,,,1041,,,740,,,740',
'740,740,740,740,740,740,740,,740,740,740,,740,740,,740,740,740,,,,,',
',,,,,,,,,,,,,,740,,,740,,,740,740,,889,740,889,889,889,889,889,740,',
',,,,,,740,889,,,,740,740,740,740,740,740,,,,740,740,,,,,,,740,889,,740',
'740,740,746,746,746,,746,,889,889,746,746,,,,746,,746,746,746,746,746',
'746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,889,,,746,,,746,746',
'746,746,746,746,746,746,746,746,746,746,,746,746,,746,746,746,472,472',
'472,472,472,472,472,,,472,472,,,,,,472,472,,746,,,746,,,746,746,,,746',
',746,472,746,472,746,472,472,472,472,472,472,472,746,472,,,,746,746',
'746,746,746,746,,,,746,746,,,,,,,746,,746,746,746,746,256,256,256,,256',
',,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256',
'256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256',
'256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,914',
'256,914,914,914,914,914,256,,,,,,,,256,914,,,,256,256,256,256,256,256',
',,,256,256,,,,,,,256,914,,256,256,256,768,768,768,,768,,914,914,768',
'768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768',
'768,,,768,,,,914,,,768,,,768,768,768,768,768,768,768,768,,768,768,768',
',768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,916,768',
'916,916,916,916,916,768,,,,,,,,768,916,,,,768,768,768,768,768,768,,',
',768,768,,,,,,,768,916,,768,768,768,770,770,770,,770,,916,916,770,770',
',,,770,,770,770,770,770,770,770,770,,,,,,770,770,770,770,770,770,770',
',,770,,,,916,,,770,,,770,770,770,770,770,770,770,770,,770,770,770,,770',
'770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770,,918,770,918',
'918,918,918,918,770,,,,,,,,770,918,,,,770,770,770,770,770,770,,,,770',
'770,,,,,,,770,918,,770,770,770,257,257,257,,257,,918,918,257,257,,,',
'257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,',
'257,,,,918,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257',
'257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,993,257,993',
'993,993,993,993,257,,,,,,,,257,993,,,,257,257,257,257,257,257,,,,257',
'257,,,,,,,257,993,,257,257,257,784,784,784,,784,,993,993,784,784,,,',
'784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784,784,,',
'784,,,,993,,,784,,,784,784,784,784,784,784,784,784,,784,784,784,,784',
'784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,995,784,995',
'995,995,995,995,784,,,,,,,,784,995,,,,784,784,784,784,784,784,,,,784',
'784,,,,,,,784,995,,784,784,784,785,785,785,,785,,995,995,785,785,,,',
'785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,',
'785,,,,995,,,785,,,785,785,785,785,785,785,785,785,,785,785,785,,785',
'785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,997,785,997',
'997,997,997,997,785,,,,,,,,785,997,,,,785,785,785,785,785,785,,,,785',
'785,,,,,,,785,997,,785,785,785,786,786,786,,786,,997,997,786,786,,,',
'786,,786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,',
'786,,,,997,,,786,,,786,786,786,786,786,786,786,786,,786,786,786,,786',
'786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,1010,786,1010',
'1010,1010,1010,1010,786,,,,,,,,786,1010,,,,786,786,786,786,786,786,',
',,786,786,,,,,,,786,1010,,786,786,786,787,787,787,,787,,1010,1010,787',
'787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787,787',
'787,,,787,,,,1010,,,787,,,787,787,787,787,787,787,787,787,,787,787,787',
',787,787,,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,',
',,,,787,,,,,,,,787,,,,,787,787,787,787,787,787,,,,787,787,,,,,,,787',
',,787,787,787,789,789,789,,789,,,,789,789,,,,789,,789,789,789,789,789',
'789,789,,,,,,789,789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789',
'789,789,789,789,789,,789,789,789,,789,789,,789,789,789,,,,,,,,,,,,,',
',,,,,,789,,,789,,,789,789,,,789,,,,,,789,,,,,,,,789,,,,,789,789,789',
'789,789,789,,,,789,789,,,,,,,789,,,789,789,789,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265',
'265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265',
'265,265,265,265,265,265,265,265,265,,265,265,,265,265,265,,,,,,,,,,',
',,,,,,,,,265,,,265,,,265,265,,,265,,265,,265,,265,,,,,,,,265,,,,,265',
'265,265,265,265,265,,,,265,265,,,,,,,265,,265,265,265,265,271,271,271',
',271,,,,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271',
'271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,271',
'271,271,271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271',
'271,,,271,,271,,271,,271,,,,,,,,271,,,,,271,271,271,271,271,271,,,,271',
'271,,,,,,,271,,271,271,271,271,274,274,274,,274,,,,274,274,,,,274,,274',
'274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,',
',274,,,274,274,274,274,274,274,274,274,274,274,274,274,,274,274,,274',
'274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274',
',,,,,,,274,,,,,274,274,274,274,274,274,,,,274,274,274,,,,,,274,,274',
'274,274,274,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32',
'32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32',
',32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32',
',,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,801,801',
'801,,801,,,,801,801,,,,801,,801,801,801,801,801,801,801,,,,,,801,801',
'801,801,801,801,801,,,801,,,,,,,801,,,801,801,801,801,801,801,801,801',
',801,801,801,,801,801,,,,801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801,801',
',,801,,,,,,,,,,,,,,,,,,,801,801,801,801,801,801,,,,801,801,,,,,,,801',
',,801,801,801,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,',
',33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33',
'33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,',
'33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33',
'34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34',
'34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34',
'34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34',
',,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,283,283,283,,283',
',,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283',
'283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,,283,283',
'283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283',
',,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283',
',,283,283,283,285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285',
'285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285',
'285,285,285,285,285,,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,',
',,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285',
'285,285,285,,,,285,285,,,,,,,285,,,285,285,285,286,286,286,,286,,,,286',
'286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286',
'286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,',
'286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,',
',,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,',
',286,286,286,292,292,292,292,292,,,,292,292,,,,292,,292,292,292,292',
'292,292,292,,,,,,292,292,292,292,292,292,292,,,292,,,,,,292,292,,292',
'292,292,292,292,292,292,292,292,,292,292,292,,292,292,,292,292,292,',
',,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292,,,,292,,,,,,,,292,',
',,,292,292,292,292,292,292,,,,292,292,,,,,,,292,,,292,292,292,37,37',
'37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37',
',,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,',
',,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,37,37,,,,,,,37,,,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38',
'38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38',
'38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,',
',38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38',
'38,298,298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,',
',,,,298,298,298,298,298,298,298,,,298,,,,,,,298,,,298,298,298,298,298',
'298,298,298,,298,298,298,,298,298,,,,298,,,,,,,,,,,,,,,,,,,,298,,,298',
',,298,298,,,298,,,,,,,,,,,,,,,,,,,298,298,298,298,298,298,,,,298,298',
',,,298,,,298,,,298,298,298,847,847,847,,847,,,,847,847,,,,847,,847,847',
'847,847,847,847,847,,,,,,847,847,847,847,847,847,847,,,847,,,,,,,847',
',,847,847,847,847,847,847,847,847,,847,847,847,,847,847,,847,847,847',
',,,,,,,,,,,,,,,,,,,847,,,847,,,847,847,,,847,,,,,,847,,,,,,,,847,,,',
',847,847,847,847,847,847,,,,847,847,,,,,,,847,,,847,847,847,860,860',
'860,,860,,,,860,860,,,,860,,860,860,860,860,860,860,860,,,,,,860,860',
'860,860,860,860,860,,,860,,,,,,,860,,,860,860,860,860,860,860,860,860',
',860,860,860,,860,860,,860,860,860,,,,,,,,,,,,,,,,,,,,860,,,860,,,860',
'860,,,860,,,,,,860,,,,,,,,860,,,,,860,860,860,860,860,860,,,,860,860',
',,,,,,860,,,860,860,860,878,878,878,,878,,,,878,878,,,,878,,878,878',
'878,878,878,878,878,,,,,,878,878,878,878,878,878,878,,,878,,,,,,,878',
',,878,878,878,878,878,878,878,878,878,878,878,878,,878,878,,878,878',
'878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878,,,878,,,,878,,878,,,,,,,',
'878,,,,,878,878,878,878,878,878,,,,878,878,,,,,,,878,,878,878,878,878',
'879,879,879,,879,,,,879,879,,,,879,,879,879,879,879,879,879,879,,,,',
',879,879,879,879,879,879,879,,,879,,,,,,,879,,,879,879,879,879,879,879',
'879,879,,879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879,,',
'879,,,879,879,,,879,,,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879',
',,,879,879,,,,,,,879,,,879,879,879,894,894,894,,894,,,,894,894,,,,894',
',894,894,894,894,894,894,894,,,,,,894,894,894,894,894,894,894,,,894',
',,,,,,894,,,894,894,894,894,894,894,894,894,,894,894,894,,894,894,,',
',894,,,,,,,,,,,,,,,,,,,,894,,,894,,,894,894,,,894,,,,,,,,,,,,,,,,,,',
'894,894,894,894,894,894,,,,894,894,,,,,,,894,,,894,894,894,45,45,45',
',45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,',
',45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,',
',,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45',
'45,45,45,,,,45,45,,,,,,,45,,,45,45,45,315,315,315,,315,,,,315,315,,',
',315,,315,315,315,315,315,315,315,,,,,,315,315,315,315,315,315,315,',
',315,,,,,,,315,,,315,315,315,315,315,315,315,315,,315,315,315,,315,315',
',,,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,,,,,,,,,,,,,,,',
',,315,315,315,315,315,315,,,,315,315,,,,,,,315,,,315,315,315,906,906',
'906,,906,,,,906,906,,,,906,,906,906,906,906,906,906,906,,,,,,906,906',
'906,906,906,906,906,,,906,,,,,,,906,,,906,906,906,906,906,906,906,906',
',906,906,906,,906,906,,,,906,,,,,,,,,,,,,,,,,,,,906,,,906,,,906,906',
',,906,,,,,,,,,,,,,,,,,,,906,906,906,906,906,906,,,,906,906,,,,,,,906',
',,906,906,906,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,',
',46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46',
'46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46',
',,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,47,47,47',
',47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,',
',47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,',
',,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47',
'47,47,47,,,,47,47,,,,,,,47,,,47,47,47,931,931,931,,931,,,,931,931,,',
',931,,931,931,931,931,931,931,931,,,,,,931,931,931,931,931,931,931,',
',931,,,,,,,931,,,931,931,931,931,931,931,931,931,,931,931,931,,931,931',
',931,931,931,,,,,,,,,,,,,,,,,,,,931,,,931,,,931,931,,,931,,931,,,,931',
',,,,,,,931,,,,,931,931,931,931,931,931,,,,931,931,,,,,,,931,,,931,931',
'931,324,324,324,,324,,,,324,324,,,,324,,324,324,324,324,324,324,324',
',,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324,324,324,324,324',
'324,324,324,,324,324,324,,324,324,,324,324,324,,,,,,,,,,,,,,,,,,,,324',
',,324,324,,324,324,,,324,,,,,,324,,,,,,,,324,,,,,324,324,324,324,324',
'324,,,,324,324,,,,,,,324,,,324,324,324,327,327,327,,327,,,,327,327,',
',,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327',
',,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327,327,,327',
'327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327,,,,,,327',
',,,,,,,327,,,,,327,327,327,327,327,327,,,,327,327,,,,,,,327,,,327,327',
'327,333,333,333,,333,,,,333,333,,,,333,,333,333,333,333,333,333,333',
',,,,,333,333,333,333,333,333,333,,,333,,,,,,,333,,,333,333,333,333,333',
'333,333,333,333,333,333,333,,333,333,,333,333,333,,,,,,,,,,,,,,,,,,',
',333,,,333,,,333,333,,,333,,,,,,333,,,,,,,,333,,,,,333,333,333,333,333',
'333,,,,333,333,,,,,,,333,,333,333,333,333,340,340,340,,340,,,,340,340',
',,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340,340,340',
',,340,,,,,,,340,,,340,340,340,340,340,340,340,340,,340,340,340,,340',
'340,,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340,,,,,,340',
',,,,,,,340,,,,,340,340,340,340,340,340,,,,340,340,,,,,,,340,,,340,340',
'340,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341,341',
',,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341,341,341',
'341,341,341,,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,,,,,,,,341',
',,341,,,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341,341,341,341',
',,,341,341,,,,,,,341,,,341,341,341,1006,1006,1006,,1006,,,,1006,1006',
',,,1006,,1006,1006,1006,1006,1006,1006,1006,,,,,,1006,1006,1006,1006',
'1006,1006,1006,,,1006,,,,,,,1006,,,1006,1006,1006,1006,1006,1006,1006',
'1006,1006,1006,1006,1006,,1006,1006,,1006,1006,1006,,,,,,,,,,,,,,,,',
',,,1006,,,1006,,,1006,1006,,,1006,,1006,,1006,,1006,,,,,,,,1006,,,,',
'1006,1006,1006,1006,1006,1006,,,,1006,1006,,,,,,,1006,,1006,1006,1006',
'1006,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62',
'62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,',
',,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,66,66,66,',
'66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,',
'66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,',
',,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66',
'66,66,66,,,,66,66,,,,,,,66,,,66,66,66,353,353,353,,353,,,,353,353,,',
',353,,353,353,353,353,353,353,353,,,,,,353,353,353,353,353,353,353,',
',353,,,,,,,353,,,353,353,353,353,353,353,353,353,,353,353,353,,353,353',
',,,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353,,,353,,,,,,,,,,,,,,,,',
',,353,353,353,353,353,353,,,,353,353,,,,,,,353,,,353,353,353,355,355',
'355,,355,,,,355,355,,,,355,,355,355,355,355,355,355,355,,,,,,355,355',
'355,355,355,355,355,,,355,,,,,,,355,,,355,355,355,355,355,355,355,355',
',355,355,355,,355,355,,,,355,,,,,,,,,,,,,,,,,,,,355,,,355,,,355,355',
',,355,,,,,,,,,,,,,,,,,,,355,355,355,355,355,355,,,,355,355,,,,,,,355',
',,355,355,355,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,',
',67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67',
'67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,70,70,70',
',70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,',
',70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,',
',,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70',
'70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,71,71,71,,71,,,,71,71,,,,71',
',71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71',
'71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71',
',,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71',
',,71,71,71,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,',
',8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,',
',,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,',
'8,8,8,413,413,413,,413,,,,413,413,,,,413,,413,413,413,413,413,413,413',
',,,,,413,413,413,413,413,413,413,,,413,,,,,,,413,,,413,413,413,413,413',
'413,413,413,,413,413,413,,413,413,,413,413,413,,,,,,,,,,,,,,,,,,,,413',
',,413,,,413,413,,,413,,,,,,413,,,,,,,,413,,,,,413,413,413,413,413,413',
',,,413,413,,,,,,,413,,,413,413,413,450,450,450,,450,,,,450,450,,,,450',
',450,450,450,450,450,450,450,,,,,,450,450,450,450,450,450,450,,,450',
',,,,,,450,,,450,450,450,450,450,450,450,450,450,450,450,450,,450,450',
',450,450,450,,,,,,,,,,,,,,,,,,,,450,,,450,,,450,450,,,450,,450,,450',
',450,,,,,,,,450,,,,,450,450,450,450,450,450,,,,450,450,,,,,,,450,,450',
'450,450,450,452,452,452,,452,,,,452,452,,,,452,,452,452,452,452,452',
'452,452,,,,,,452,452,452,452,452,452,452,,,452,,,,,,,452,,,452,452,452',
'452,452,452,452,452,,452,452,452,,452,452,,452,452,452,,,,,,,,,,,,,',
',,,,,,452,,,452,,,452,452,,,452,,,,,,452,,,,,,,,452,,,,,452,452,452',
'452,452,452,,,,452,452,,,,,,,452,,,452,452,452,453,453,453,,453,,,,453',
'453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453,453,453,453,453',
'453,,,453,,,,,,,453,,,453,453,453,453,453,453,453,453,,453,453,453,',
'453,453,,453,453,453,,,,,,,,,,,,,,,,,,,,453,,,453,,,453,453,,,453,,',
',,,453,,,,,,,,453,,,,,453,453,453,453,453,453,,,,453,453,,,,,,,453,',
',453,453,453,454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454',
'454,454,,,,,,454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454',
'454,454,454,454,454,,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,',
',,,,,,454,,,454,,,454,454,,,454,,,,,,454,,,,,,,,454,,,,,454,454,454',
'454,454,454,,,,454,454,,,,,,,454,,,454,454,454,111,111,111,111,111,',
',,111,111,,,,111,,111,111,111,111,111,111,111,,,,,,111,111,111,111,111',
'111,111,,,111,,,,,,111,111,111,111,111,111,111,111,111,111,111,111,',
'111,111,111,,111,111,,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111',
'111,,,111,,111,,,,111,,,,,,,,111,,,,,111,111,111,111,111,111,,,,111',
'111,,,,,,111,111,,,111,111,111,116,116,116,,116,,,,116,116,,,,116,,116',
'116,116,116,116,116,116,,,,,,116,116,116,116,116,116,116,,,116,,,,,',
',116,,,116,116,116,116,116,116,116,116,,116,116,116,,116,116,,116,116',
'116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116,,,,,,,,116',
',,,,116,116,116,116,116,116,,,,116,116,,,,,,,116,,,116,116,116,117,117',
'117,,117,,,,117,117,,,,117,,117,117,117,117,117,117,117,,,,,,117,117',
'117,117,117,117,117,,,117,,,,,,,117,,,117,117,117,117,117,117,117,117',
',117,117,117,,117,117,,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117',
'117,,,117,,,,,,117,,,,,,,,117,,,,,117,117,117,117,117,117,,,,117,117',
',,,,,,117,,,117,117,117,118,118,118,,118,,,,118,118,,,,118,,118,118',
'118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118',
',,118,118,118,118,118,118,118,118,,118,118,118,,118,118,,118,118,118',
',,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,118,,,',
',118,118,118,118,118,118,,,,118,118,,,,,,,118,,,118,118,118,119,119',
'119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119',
'119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119',
',119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119',
'119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119',
',,,,,,119,,,119,119,119,495,495,495,,495,,,,495,495,,,,495,,495,495',
'495,495,495,495,495,,,,,,495,495,495,495,495,495,495,,,495,,,,,,,495',
',,495,495,495,495,495,495,495,495,495,495,495,495,,495,495,,495,495',
'495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495,,,495,,495,,495,,495,,,,',
',,,495,,,,,495,495,495,495,495,495,,,,495,495,,,,,,,495,,495,495,495',
'495,498,498,498,,498,,,,498,498,,,,498,,498,498,498,498,498,498,498',
',,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498',
'498,498,498,498,498,498,498,,498,498,,498,498,498,,,,,,,,,,,,,,,,,,',
',498,,,498,,,498,498,,,498,,,,498,,498,,,,,,,,498,,,,,498,498,498,498',
'498,498,,,,498,498,,,,,,,498,,498,498,498,498,500,500,500,,500,,,,500',
'500,,,,500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500',
'500,,,500,,,,,,,500,,,500,500,500,500,500,500,500,500,,500,500,500,',
'500,500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,',
',,,500,,,,,,,,500,,,,,500,500,500,500,500,500,,,,500,500,,,,,,,500,',
',500,500,500,505,505,505,505,505,,,,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,505,505,,505',
'505,505,505,505,505,505,505,505,,505,505,505,,505,505,,505,505,505,',
',,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,505,,,,505,,,,,,,,505,',
',,,505,505,505,505,505,505,,,,505,505,,,,,,505,505,,,505,505,505,120',
'120,120,120,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,',
'120,120,120,120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120',
'120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,',
',,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,,120,,,,,120,120,120,120',
'120,120,,,,120,120,,,,,,,120,,,120,120,120,512,512,512,,512,,,,512,512',
',,,512,,512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512',
',,512,,,,,,,512,,,512,512,512,512,512,512,512,512,,512,512,512,,512',
'512,,,,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,,,,,,,,,,,',
',,,,,,512,512,512,512,512,512,,,,512,512,,,,,,,512,,,512,512,512,23',
'23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23',
'23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23',
',,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23',
'23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,514,514,514,,514,,,,514,514',
',,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514',
',,514,,,,,,,514,,,514,514,514,514,514,514,514,514,514,514,514,514,,514',
'514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,514,',
'514,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514,514,,,,,,,514',
',514,514,514,514,521,521,521,,521,,,,521,521,,,,521,,521,521,521,521',
'521,521,521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521',
'521,521,521,521,521,521,,521,521,521,,521,521,,,,521,,,,,,,,,,,,,,,',
',,,,521,,,521,,,521,521,,,521,,,,,,,,,,,,,,,,,,,521,521,521,521,521',
'521,,,,521,521,,,,,,,521,,,521,521,521,208,208,208,,208,,,,208,208,',
',,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208',
',,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,,208',
'208,,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208,',
',,208,,,,,,,,208,,,,,208,208,208,208,208,208,,,,208,208,,,,,,,208,,',
'208,208,208,524,524,524,,524,,,,524,524,,,,524,,524,524,524,524,524',
'524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524',
'524,524,524,524,524,,524,524,524,,524,524,,524,524,524,,,,,,,,,,,,,',
',,,,,,524,,,524,,,524,524,,,524,,,,,,524,,,,,,,,524,,,,,524,524,524',
'524,524,524,,,,524,524,,,,,,,524,,,524,524,524,525,525,525,,525,,,,525',
'525,,,,525,,525,525,525,525,525,525,525,,,,,,525,525,525,525,525,525',
'525,,,525,,,,,,,525,,,525,525,525,525,525,525,525,525,,525,525,525,',
'525,525,,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525,,,525,,',
',,,525,,,,,,,,525,,,,,525,525,525,525,525,525,,,,525,525,,,,,,,525,',
',525,525,525,526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526',
'526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526,526',
'526,526,526,526,526,,526,526,526,,526,526,,526,526,526,,,,,,,,,,,,,',
',,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,526,,,,,526,526,526',
'526,526,526,,,,526,526,,,,,,,526,,,526,526,526,530,530,530,,530,,,,530',
'530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530',
'530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530,530,530,',
'530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,',
',,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,,530,',
',530,530,530,209,209,209,,209,,,,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,,,,,,,,,,,,,',
',,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209',
'209,209,209,,,,209,209,,,,,,,209,,,209,209,209,210,210,210,,210,,,,210',
'210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210',
'210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,210,210,210,210',
',210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,',
'210,,210,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,',
',,210,,210,210,210,210,536,536,536,,536,,,,536,536,,,,536,,536,536,536',
'536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536',
'536,536,536,536,536,536,536,536,536,536,536,,536,536,,536,536,536,,',
',,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,',
',,536,536,536,536,536,536,,,,536,536,,,,,,,536,,536,536,536,536,539',
'539,539,,539,,,,539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539',
'539,539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539',
'539,539,539,539,539,,539,539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539',
',,539,539,,,539,,,,,,539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539',
'539,,,,,,,539,,539,539,539,539,214,214,214,,214,,,,214,214,,,,214,,214',
'214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,',
',214,,,214,214,214,214,214,214,214,214,,214,214,214,,214,214,,214,214',
'214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,214',
',,,,214,214,214,214,214,214,,,,214,214,,,,,,,214,,,214,214,214,215,215',
'215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215',
',215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215',
'215,,,215,,215,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,,,,,,,215,,,215,215,215,216,216,216,,216,,,,216,216,,,,216,,216',
'216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,',
',216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216,,216,216',
'216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216',
',,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,216,216,217,217',
'217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218',
',,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218,218',
',,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,',
',218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218,219,219',
'219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219',
'219,,,,,,219,,,219,219,219,564,564,564,,564,,,,564,564,,,,564,,564,564',
'564,564,564,564,564,,,,,,564,564,564,564,564,564,564,,,564,,,,,,,564',
',,564,564,564,564,564,564,564,564,,564,564,564,,564,564,,564,564,564',
',,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,,564,,,,,,564,,,,,,,,564,,,',
',564,564,564,564,564,564,,,,564,564,,,,,,,564,,,564,564,564,585,585',
'585,,585,,,,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585',
'585,585,585,585,585,,,585,,,,,,,585,,,585,585,585,585,585,585,585,585',
'585,585,585,585,,585,585,,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,',
',585,585,,,585,,585,,585,,585,,,,,,,,585,,,,,585,585,585,585,585,585',
',,,585,585,,,,,,,585,,585,585,585,585,597,597,597,,597,,,,597,597,,',
',597,,597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597,',
',597,,,,,,,597,,,597,597,597,597,597,597,597,597,,597,597,597,,597,597',
',597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,,,,,597,',
',,,,,,597,,,,,597,597,597,597,597,597,,,,597,597,,,,,,,597,,,597,597',
'597,601,601,601,,601,,,,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,,601,601,601,601,601,601,601,,,601,,,,,,,601,,,601,601,601,601,601',
'601,601,601,,601,601,601,,601,601,,601,601,601,,,,,,,,,,,,,,,,,,,,601',
',,601,,,601,601,,,601,,,,,,601,,,,,,,,601,,,,,601,601,601,601,601,601',
',,,601,601,,,,,,,601,,,601,601,601,230,230,230,,230,,,,230,230,,,,230',
',230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230',
',,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230',
'230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,',
',230,,,,,230,230,230,230,230,230,,,,230,230,,,,,,,230,,,230,230,230',
'630,630,630,,630,,,,630,630,,,,630,,630,630,630,630,630,630,630,,,,',
',630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630',
'630,630,,630,630,630,,630,630,,630,630,630,,,,,,,,,,,,,,,,,,,,630,,',
'630,,,630,630,,,630,,630,,,,630,,,,,,,,630,,,,,630,630,630,630,630,630',
',,,630,630,,,,,,,630,,,630,630,630,631,631,631,,631,,,,631,631,,,,631',
',631,631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631',
',,,,,,631,,,631,631,631,631,631,631,631,631,,631,631,631,,631,631,,631',
'631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,,,,,631,,,,,,',
',631,,,,,631,631,631,631,631,631,,,,631,631,,,,,,,631,,,631,631,631',
'233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,',
',233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233',
'233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,',
'233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233',
',,,233,233,,,,,,,233,,,233,233,233,634,634,634,,634,,,,634,634,,,,634',
',634,634,634,634,634,634,634,,,,,,634,634,634,634,634,634,634,,,634',
',,,,,,634,,,634,634,634,634,634,634,634,634,634,634,634,634,,634,634',
',634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634,634,,,634,,634,,634',
',634,,,,,,,,634,,,,,634,634,634,634,634,634,,,,634,634,,,,,,,634,,634',
'634,634,634,635,635,635,,635,,,,635,635,,,,635,,635,635,635,635,635',
'635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635',
'635,635,635,635,635,635,635,635,635,,635,635,,635,635,635,,,,,,,,,,',
',,,,,,,,,635,,,635,,,635,635,,,635,,,,635,,635,,,,,,,,635,,,,,635,635',
'635,635,635,635,,,,635,635,,,,,,,635,,635,635,635,635,636,636,636,,636',
',,,636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636',
'636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,,636,636',
'636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636',
',,,,,636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636',
',,636,636,636,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637,637',
'637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637',
'637,637,637,637,637,,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,',
',,,,,,637,,,637,,,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637,637,637',
'637,637,637,,,,637,637,,,,,,,637,,,637,637,637,234,234,234,,234,,,,234',
'234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234',
'234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,',
'234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,',
',,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,',
',234,234,234,642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642',
'642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642',
'642,642,642,642,642,,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,',
',,,,,,642,,,642,,,642,642,,,642,,,,,,642,,,,,,,,642,,,,,642,642,642',
'642,642,642,,,,642,642,,,,,,,642,,,642,642,642,643,643,643,,643,,,,643',
'643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643',
'643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643,643,643,',
'643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,',
',,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,,,,,,,643,',
',643,643,643,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235',
'235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235',
'235,235,235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,',
',,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,235,235,,,,235,235,,,,,,,235,,,235,235,235,646,646,646,,646,,,,646',
'646,,,,646,,646,646,646,646,646,646,646,,,,,,646,646,646,646,646,646',
'646,,,646,,,,,,,646,,,646,646,646,646,646,646,646,646,,646,646,646,',
'646,646,,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,,,646,646,,,646,,',
',,,646,,,,,,,,646,,,,,646,646,646,646,646,646,,,,646,646,,,,,,,646,',
',646,646,646,647,647,647,,647,,,,647,647,,,,647,,647,647,647,647,647',
'647,647,,,,,,647,647,647,647,647,647,647,,,647,,,,,,,647,,,647,647,647',
'647,647,647,647,647,,647,647,647,,647,647,,647,647,647,,,,,,,,,,,,,',
',,,,,,647,,,647,,,647,647,,,647,,,,,,647,,,,,,,,647,,,,,647,647,647',
'647,647,647,,,,647,647,,,,,,,647,,,647,647,647,236,236,236,,236,,,,236',
'236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,',
'236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,',
',,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,',
',236,236,236,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,',
',,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,237,237,,,,237,237,,,,,,,237,,,237,237,237,238,238,238,,238,,,,238',
'238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238',
'238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,',
'238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,',
',238,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,,,,,,,239,,,239,239,239,240,240,240,,240,,,,240',
'240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240',
'240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,',
'240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,',
',240,240,240,671,671,671,,671,,,,671,671,,,,671,,671,671,671,671,671',
'671,671,,,,,,671,671,671,671,671,671,671,,,671,,,,,,,671,,,671,671,671',
'671,671,671,671,671,,671,671,671,,671,671,,671,671,671,,,,,,,,,,,,,',
',,,,,,671,,,671,,,671,671,,,671,,,,,,671,,,,,,,,671,,,,,671,671,671',
'671,671,671,,,,671,671,,,,,,,671,,,671,671,671,676,676,676,,676,,,,676',
'676,,,,676,,676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676',
'676,,,676,,,,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676,',
'676,676,,,,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,,,',
',,,,,,,,,,676,676,676,676,676,676,,,,676,676,,,,,,,676,,,676,676,676',
'241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,',
',241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241',
'241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,',
'241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241',
',,,241,241,,,,,,,241,,,241,241,241,242,242,242,,242,,,,242,242,,,,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242',
'243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,',
',243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243',
'243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,',
'243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243',
',,,243,243,,,,,,,243,,,243,243,243,244,244,244,,244,,,,244,244,,,,244',
',244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244',
',,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244',
'244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,',
',244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244',
'245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,',
',245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245',
'245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,',
'245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,687,687,687,,687,,,,687,687,,,,687',
',687,687,687,687,687,687,687,,,,,,687,687,687,687,687,687,687,,,687',
',,,,,,687,,,687,687,687,687,687,687,687,687,,687,687,687,,687,687,,',
',687,,,,,,,,,,,,,,,,,,,,687,,,687,,,687,687,,,687,,,,,,,,,,,,,,,,,,',
'687,687,687,687,687,687,,,,687,687,,,,,,,687,,,687,687,687,246,246,246',
',246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246',
'246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246',
'246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246',
',,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,',
',,,246,,,246,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,248,248,248,',
'248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,693,693,693,,693,,,,693,693,,,,693,,693,693,693',
'693,693,693,693,,,,,,693,693,693,693,693,693,693,,,693,,,,,,,693,,,693',
'693,693,693,693,693,693,693,,693,693,693,,693,693,,693,693,693,,,,,',
',,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,693,,,,693,,,,,,,,693,,,,,693',
'693,693,693,693,693,,,,693,693,,,,,,,693,,,693,693,693,249,249,249,',
'249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249',
'249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249',
'249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249',
',,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,',
',,,249,,,249,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,',
',,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250',
'250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,713,713,713,',
'713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,,713,713,713',
'713,713,713,713,,,713,,,,,,,713,,,713,713,713,713,713,713,713,713,,713',
'713,713,,713,713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713',
',,713,,,,,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,,713,713,,,',
',,,713,,,713,713,713,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,252,252,252,',
'252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252',
'252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252',
'252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252',
',,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,',
',,,252,,,252,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,254,254,254,',
'254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254',
'254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,',
',,,254,,,254,254,254,734,734,734,,734,,,,734,734,,,,734,,734,734,734',
'734,734,734,734,,,,,,734,734,734,734,734,734,734,,,734,,,,,,,734,,,734',
'734,734,734,734,734,734,734,,734,734,734,,734,734,,734,734,734,,,,,',
',,,,,,,,,,,,,,734,,,734,,,734,734,,,734,,734,,,,734,,,,,,,,734,,,,,734',
'734,734,734,734,734,,,,734,734,,,,,,,734,,,734,734,734,255,255,255,',
'255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,433,255,255,255,255,255,255,433,433,433',
'255,255,433,433,433,,433,,255,,,255,255,255,,433,433,433,433,,,,,,,',
'433,433,,433,433,433,433,433,,,,,,,,,,,,,,,,,,,,,,,,433,433,433,433',
'433,433,433,433,433,433,433,433,433,433,,,433,433,433,,,433,,,433,,',
'433,433,,433,,433,,433,,433,433,433,433,433,433,433,,433,433,433,,,',
',,,,,,,,,433,433,433,433,434,433,,433,,,,434,434,434,,,434,434,434,599',
'434,599,599,599,599,599,,,,434,434,434,434,,,599,,,,,434,434,,434,434',
'434,434,434,,,,,,,,,,599,599,,,,,,,,599,599,599,599,,434,434,434,434',
'434,434,434,434,434,434,434,434,434,434,,,434,434,434,,,434,,,434,,',
'434,434,,434,599,434,,434,,434,434,434,434,434,434,434,,434,434,434',
',,,,,,,,,,,,434,434,434,434,59,434,,434,,,,59,59,59,,,59,59,59,546,59',
'546,546,546,546,546,,,,,59,59,59,,,546,,,,,59,59,,59,59,59,59,59,,,',
',,,,,,546,,,,,,,,,546,546,546,546,,59,59,59,59,59,59,59,59,59,59,59',
'59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,546,59,,59,,59,59,59,59,59',
'59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,424,59,,59,,,,424,424,424,,,424',
'424,424,707,424,707,707,707,707,707,,,,424,424,424,,,,707,,,,,424,424',
',424,424,424,424,424,,,,,,,,,,707,,,,,,,,,707,707,707,707,,424,424,424',
'424,424,424,424,424,424,424,424,424,424,424,,,424,424,424,,,424,,424',
'424,,,424,424,,424,707,424,,424,,424,424,424,424,424,424,424,,424,424',
'424,,,,,,,,,,,,30,424,424,,424,,424,30,30,30,,,30,30,30,884,30,884,884',
'884,884,884,,,,30,30,30,,,,884,,,,,30,30,,30,30,30,30,30,,,,,,,,,,884',
',,,,,,,,884,884,884,884,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,',
',30,30,30,,,30,,30,30,,,30,30,,30,884,30,,30,,30,30,30,30,30,30,30,',
'30,30,30,,,,,,,,,,,,31,30,30,,30,,30,31,31,31,,,31,31,31,887,31,887',
'887,887,887,887,,,,,31,31,,,,887,,,,,31,31,,31,31,31,31,31,,,,,,,,,',
'887,,,,,,,,,887,887,887,887,,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,,,31,31,31,,,31,,31,31,,,31,31,,31,887,31,,31,,31,31,31,31,31,31',
'31,,31,,31,,,,,,,,,,,,482,31,31,,31,,31,482,482,482,,,482,482,482,,482',
'658,,658,658,658,658,658,,482,482,,,,,,,658,,,482,482,,482,482,482,482',
'482,,,709,,709,709,709,709,709,,,658,,,,,,,709,,658,658,658,658,,,,',
',,,,,,482,,,,,,709,482,,,,,482,482,658,709,709,709,709,,,,658,,958,958',
',,958,,,,,,482,482,,958,958,,958,958,958,958,958,958,958,,482,958,958',
'709,,482,958,958,958,958,,,,,,958,,,,,,,,958,958,,958,958,958,958,958',
'958,958,958,958,958,958,,,958,,,,,,,,,,745,745,,,745,,,,,,958,,,745',
'745,958,745,745,745,745,745,745,745,,,745,745,,,,745,745,745,745,,,',
',,745,,,,,,,,745,745,,745,745,745,745,745,745,745,745,745,745,745,,',
'745,,,,,,,,,,587,587,,,587,,,,,,745,,,587,587,745,587,587,587,587,587',
'587,587,,,587,587,,,,587,587,587,587,,,,,,587,,,,,,,,587,587,,587,587',
'587,587,587,587,587,587,587,587,587,,,587,,,,,,,,,,586,586,,,586,,,',
',,587,,,586,586,587,586,586,586,586,586,586,586,,,586,586,,,,586,586',
'586,586,,,,,,586,,,,,,,,586,586,,586,586,586,586,586,586,586,586,586',
'586,586,,,586,,,,,,,,,,1008,1008,,,1008,,,,,,586,,,1008,1008,586,1008',
'1008,1008,1008,1008,1008,1008,,,1008,1008,,,,1008,1008,1008,1008,,,',
',,1008,,,,,,,,1008,1008,,1008,1008,1008,1008,1008,1008,1008,1008,1008',
'1008,1008,,,1008,,,,,,,,,,1007,1007,,,1007,,,,,,1008,,,1007,1007,1008',
'1007,1007,1007,1007,1007,1007,1007,,,1007,1007,,,,1007,1007,1007,1007',
',,,,,1007,,,,,,,,1007,1007,,1007,1007,1007,1007,1007,1007,1007,1007',
'1007,1007,1007,,912,1007,912,912,912,912,912,,,,,261,261,,,261,912,',
',,,1007,,,261,261,1007,261,261,261,261,261,261,261,,,261,261,912,,,261',
'261,261,261,,,912,912,912,912,,,,,,,,261,261,,261,261,261,261,261,261',
'261,261,261,261,261,,,261,,,,,,,,,912,744,744,,,744,,,,,,261,,,744,744',
'261,744,744,744,744,744,744,744,,,744,744,,,,744,744,744,744,,,,,,744',
',,,,,,,744,744,,744,744,744,744,744,744,744,744,744,744,744,,,744,,',
',,,,,,,212,212,,,212,,,,,,744,,,212,212,744,212,212,212,212,212,212',
'212,,,212,212,,,,212,212,212,212,,,,,,212,,,,,,,,212,212,,212,212,212',
'212,212,212,212,212,212,212,212,,,212,,,,,,,,,,211,211,,,211,,,,,,212',
',,211,211,212,211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211',
',,,,,211,,,,,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211',
',,211,,,,,,,,,,528,528,,,528,,,,,,211,,,528,528,211,528,528,528,528',
'528,528,528,,,528,528,,,,528,528,528,528,,,,,,528,,,,,,,,528,528,,528',
'528,528,528,528,528,528,528,528,528,528,,,528,,,,,,,,,,527,527,,,527',
',,,,,528,,,527,527,528,527,527,527,527,527,527,527,,,527,527,,,,527',
'527,527,527,,,,,,527,,,,,,,,527,527,,527,527,527,527,527,527,527,527',
'527,527,527,,,527,,,,,,,,,,448,448,,,448,,,,,,527,,,448,448,527,448',
'448,448,448,448,448,448,,,448,448,,,,448,448,448,448,,,,,,448,,,,,,',
',448,448,,448,448,448,448,448,448,448,448,448,448,448,,,448,,,,,,,,',
',449,449,,,449,,,,,,448,,,449,449,448,449,449,449,449,449,449,449,,',
'449,449,,,,449,449,449,449,,,,,,449,,,,,,,,449,449,,449,449,449,449',
'449,449,449,449,449,449,449,,,449,,,,,,,,,,516,516,,,516,,,,,,449,,',
'516,516,449,516,516,516,516,516,516,516,,,516,516,,,,516,516,516,516',
',,,,,516,,,,,,,,516,516,,516,516,516,516,516,516,516,516,516,516,516',
',,516,,,,,,,,,,515,515,,,515,,,,,,516,,,515,515,516,515,515,515,515',
'515,515,515,,,515,515,,,,515,515,515,515,,,,,,515,,,,,,,,515,515,,515',
'515,515,515,515,515,515,515,515,515,515,,754,515,754,754,754,754,754',
'941,,941,941,941,941,941,,,754,,,,,515,,941,,336,515,336,336,336,336',
'336,,,,,,,754,,,336,,,,941,941,754,754,754,754,,,,941,941,941,941,,',
',,,336,336,991,,991,991,991,991,991,336,336,336,336,,,,,,991,,754,,',
',,,,941,,,,,,,,,,,,,991,,,,,336,,,,991,991,991,991,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,991' ]
        racc_action_check = arr = ::Array.new(25672, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1390,  1732,    98,   nil,   504,   nil,   nil, 12777,  1055,
   nil,  1055,  1469,    66,   nil,    40,   103,   326,   414,    52,
   360,   nil,   -66, 15089,  2554,   195,   nil,   651,   nil,   159,
 24014, 24139,  8017,  8289,  8425,   nil,  5568,  9105,  9241,   nil,
    97,   416,   428,   192,   612, 10193, 10601, 10737,   166,  1090,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23759,
   nil,    85, 11825,   nil,   -19,   nil, 11961, 12369,   nil,   nil,
 12505, 12641,   221,   nil,  1193,   nil,   nil,   nil,   nil,   nil,
   116,   nil,   nil,   nil,   nil,   nil,   nil,   176,   187,   196,
   216,  1607,   nil,   nil,   nil,   510,   nil,   nil,   640,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 13593,   nil,   nil,   nil,   nil, 13729, 13865, 14001, 14137,
 14817,   236,   nil,   228,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   233,   nil,  3924, 15497, 16177,
 16313, 24972, 24899,   nil, 16721, 16857, 16993, 17129, 17265, 17401,
   nil,   nil,   956,    45,   185,   319,   294,   240,   297,   nil,
 18081,  2554,   317, 18489, 19169, 19577, 19985, 20121, 20257, 20393,
 20529, 20937, 21073, 21209, 21345, 21481, 21753, 21889, 22025, 22297,
 22433, 22705, 22841, 22977, 23113, 23385,  6249,  6657,  7473,   nil,
   nil, 24753,   nil,   nil,   333,  7609,   nil,   357,   nil,   nil,
   nil,  7745,   nil,   nil,  7881,   nil,  2417,   nil,   337,   348,
   nil,  5841,   393,  8561,   nil,  8697,  8833,   nil,   nil,   374,
   nil,   917,  8969,   359,  5705,   382,   448,   412,  9377,  2006,
   548,   389,   518,   503,   584,   nil,   470,   446,   -10,   nil,
   nil,   nil,   510,   624,   473, 10329,   nil,   415,   539,   543,
  1089,   nil,   553,   nil, 11009,  4746,   nil, 11145,   531,   nil,
   404,   279,   529, 11281,   nil,   nil, 25497,   609,    33,   -11,
 11417, 11553,   624,   616,   503,     6,     5,  1195,   620,    32,
   676,   nil,   nil, 12097,   nil, 12233,   393,   397,   443,   457,
   611,   298,   297,   484,   488,   nil,   566,   nil,   nil,   nil,
   nil,   nil,   -57,   nil,   190,   nil,   231,   nil,   583,   235,
   nil,   598,   256,   nil,   607,   152,   nil,   609,   128,   nil,
   328,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  2417,   917,   nil,   nil,   nil,   nil,   639,
   nil,   635,   nil, 12913,   636,   nil,  2006,   644,   nil,   nil,
   645,   646,   400,   283, 23889,   nil,   nil,   nil,   385,   260,
   715,   nil,   nil, 23499, 23629,   nil,  2691,   nil,   666,   nil,
   nil,  1732,   nil,   nil,   nil,   nil,   -14,   nil, 25191, 25264,
 13049,   165, 13185, 13321, 13457,  4883,  5020,   428,   -49,   740,
   765,   766,   768,   770,   908,   673,  4609,  5157,  5294,  5568,
  5705,  4061,  6113,  4472,  4198,  5431,   655,   792,  4746,  4335,
  2143,   -17, 24264,   nil,   nil,   nil,   nil,   nil,   nil,   -65,
   -56,   715,   719,   nil,   nil, 14273,   nil,   nil, 14409,   nil,
 14545,   nil,   nil,   nil,   nil, 14681,  1193,   731,   729,   nil,
   nil,   736, 14953,   746, 15225, 25410, 25337,  1036,   789,   nil,
   nil, 15361,   763,   nil, 15633, 15769, 15905, 25118, 25045,  3239,
 16041,   893,   894,   229,   nil,   nil, 16449,   nil,   nil, 16585,
   nil,   791,   nil,    94,   824,   -11, 23723,   nil,   785,   787,
   nil,   788,   815,   816,   nil,   nil,   nil,   nil,   nil,   nil,
   830,   nil,   510,   nil, 17537,   nil,   nil,   nil,   920,   nil,
   nil,   nil,   922,   nil,   nil,   928,  3650,   971,   nil,  2828,
    63,    56,   979,   987,   nil, 17673, 24534, 24461,    33,   nil,
   230,   325,    -3,   nil,  1057,   nil,    10, 17809,   nil, 23593,
   nil, 17945,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   188,   nil,   nil,   nil,
   867,   nil,   nil,   873,   nil,   897,   nil,  1331,   nil,   888,
 18217, 18353,   419,   934, 18625, 18761, 18897, 19033,   933,   nil,
   nil,   nil, 19305, 19441,   936,   nil, 19713, 19849,   nil,   -40,
   273,   130,     0,   909,  1869,   908,   nil,   nil, 24230,   nil,
   nil,  1011,    71,   -50,   nil,   nil,   nil,   nil,   910,   nil,
   960, 20665,   nil,   nil,   779,  -108, 20801,   923,   nil,   928,
    90,   153,   965,   324,  1055,   992,   954, 21617,  3924,  1042,
  1044,   138,  1098, 22161,   nil,   987,   312,   nil,   nil,   nil,
  2691,  5157,   989,   221,   nil,   nil,   662, 23853,   nil, 24259,
   nil,   604,   nil, 22569,   nil,   574,   nil,   987,   378,   nil,
   991,   nil,   nil,   nil,   nil,   689,   nil,  1104,   nil,   nil,
   nil,   nil,  1120,   nil, 23249,  1017,    57,    66,   155,    -4,
  5977,   nil,   816,   nil, 24826, 24388,  6113,   nil,   nil,   nil,
   539,   555,  3102,  3239, 25472,   152,   779,    25,   517,  4609,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1015,  6385,  2965,
  6521,   nil,  1018,   nil,  3102,   nil,  3650,   nil,   nil,  2280,
   nil,  3376,   nil,  2828,  6793,  6929,  7065,  7201,   303,  7337,
  1019,  1023,   nil,  1026,  1044,  1047,   nil,  1068,  1055,  1051,
  1045,  8153,   nil,   nil,  4198,   nil,   nil,   nil,  4335,  4472,
   nil,   nil,  1057,   168,   nil,   nil,  1182,   nil,  5020,  1062,
  1104,   nil,   nil,   nil,   nil,  1080,  1210,  1094,  1092,   nil,
   nil,   nil,  1120,  1122,   nil,  1124,  1125,   nil,  1126,   nil,
  1130,   644,  1138,   854,   nil,  1272,   nil,  9513,  1273,  2280,
  2143,   nil,   -10,   -19,    37,   229,   419,   nil,  1158,  1869,
  9649,   nil,   354,  1276,  1277,  1164,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1180,  1176,   nil,  3787,  9785,  9921,
  3513,   339,   nil,   nil, 23978,   nil,   nil, 24103,   nil,  6021,
   nil,   nil,  1197,   785, 10057,   821,  1253,  1300,  5431,  1197,
  1302,   nil,  5294,   nil,   nil,    22, 10465,   nil,   nil,   nil,
   nil,   nil, 24742,   nil,  6293,   nil,  6429,   nil,  6565,   nil,
   nil,   nil,   nil,   391,   813,  1183,   nil,    21,   nil,  1304,
  1305, 10873,  4883,   nil,   nil,  1306,    65,   nil,   nil,   nil,
   nil, 25479,   nil,  1187,   nil,   nil,  1188,  1189,  1190,  1191,
   nil,  1192,   nil,   558,   nil,   nil,   nil,  1093, 24315,   nil,
   nil,  1209,   nil,   nil,   nil,  4061,  1094,  1174,  1193,  1268,
  1194,   nil,  1195,  1196,  1197,  1199,  1200,   637,  1201,   992,
  3787,   nil,   nil,   nil,    35,  3513,   nil,   nil,  3376,  2965,
   nil, 25537,   nil,  6701,   nil,  6837,   nil,  6973,   nil,   nil,
   nil,   923,  1241,  1267,   nil,  1351, 11689, 24680, 24607,   959,
  7109,   nil,   nil,   nil,   nil,   951,  1230,   403,   nil,   nil,
   nil,  1361,  1362,  1363,  1244,  1245,  1255,  1256,   nil,   nil,
  1261,    19,    23,    34,  1056,  1259,  1260,   nil,   nil,   nil,
   nil,  5885,   nil,   nil,   nil,   nil,    -8,   nil,   -91,   nil ]

racc_action_default = [
    -1,  -620,  -619,  -620,    -2,  -606,    -4,    -5,  -620,    -8,
    -9,  -620,  -620,  -620,   -29,  -620,  -620,  -620,  -281,  -620,
   -41,   -44,  -608,  -620,   -49,   -51,   -52,   -53,   -58,  -260,
  -260,  -260,  -295,  -334,  -335,   -70,  -619,   -74,   -82,   -84,
  -620,  -515,  -516,  -620,  -620,  -620,  -620,  -620,  -608,  -241,
  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -280,  -595,
  -283,  -286,  -619,  -293,  -303,  -406,  -620,  -620,  -308,  -311,
  -606,  -620,  -319,  -326,  -620,  -336,  -337,  -448,  -449,  -450,
  -451,  -452,  -453,  -619,  -456,  -619,  -619,  -619,  -619,  -619,
  -619,  -619,  -493,  -499,  -500,  -593,  -504,  -505,  -594,  -507,
  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -519,  -520,  1050,
    -3,  -607,  -615,  -616,  -617,    -7,  -620,  -620,  -620,  -620,
  -620,  -620,   -17,  -620,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,   -22,  -122,  -619,  -620,  -620,
  -619,  -620,  -620,  -605,  -620,  -620,  -620,  -620,  -620,  -608,
  -609,   -48,  -620,  -515,  -516,  -620,  -281,  -620,  -620,  -233,
  -620,  -619,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,
  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,
  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -412,
  -415,  -620,  -603,  -604,   -59,  -620,  -302,  -620,  -429,  -432,
   -65,  -619,  -426,   -66,  -608,   -67,  -242,  -255,  -619,  -619,
  -259,  -620,  -265,  -620,  -588,  -620,  -620,   -68,   -69,  -606,
   -13,   -14,  -620,   -72,  -619,  -608,  -620,   -75,   -78,  -619,
   -90,   -91,  -620,  -620,   -98,  -295,  -298,  -608,  -419,  -334,
  -335,  -338,  -427,  -620,   -80,  -620,   -86,  -291,  -501,  -502,
  -620,  -218,  -219,  -234,  -620,  -619,  -285,  -620,  -620,  -243,
  -612,  -612,  -620,  -619,  -304,  -305,  -547,   -50,  -620,  -620,
  -620,  -620,  -606,  -620,  -607,  -515,  -516,  -620,  -620,  -281,
  -620,  -359,  -360,  -620,  -322,  -620,  -113,  -114,  -156,  -157,
  -158,  -174,  -179,  -186,  -189,  -329,  -620,  -515,  -516,  -583,
  -584,  -454,  -620,  -477,  -620,  -479,  -620,  -481,  -620,  -620,
  -461,  -620,  -620,  -467,  -620,  -620,  -473,  -620,  -620,  -475,
  -620,  -492,  -494,  -495,  -496,  -497,    -6,  -618,   -23,   -24,
   -25,   -26,   -27,  -619,  -620,   -19,   -20,   -21,  -123,  -620,
   -30,   -39,   -40,  -620,  -620,   -31,  -199,  -608,  -250,  -251,
  -619,  -619,  -596,  -597,  -260,  -424,  -598,  -599,  -597,  -596,
  -260,  -423,  -425,  -598,  -599,   -37,  -207,   -38,  -620,   -42,
   -43,  -197,  -265,   -45,   -46,   -47,  -608,  -301,  -620,  -620,
  -619,  -291,  -620,  -620,  -620,  -208,  -209,  -210,  -211,  -212,
  -213,  -214,  -215,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -230,  -231,  -232,  -235,  -236,  -237,  -238,
  -608,  -619,  -260,  -596,  -597,   -55,   -60,  -261,  -420,  -619,
  -619,  -608,  -608,  -297,  -256,  -620,  -264,  -257,  -620,  -262,
  -620,  -266,  -591,  -592,   -12,  -607,   -16,  -608,   -71,  -289,
   -87,   -76,  -620,  -608,  -619,  -620,  -620,   -97,  -620,  -501,
  -502,  -620,   -83,   -88,  -620,  -620,  -620,  -620,  -620,  -239,
  -620,  -440,  -620,  -287,  -610,  -244,  -614,  -613,  -246,  -614,
  -292,  -620,  -586,  -612,  -620,  -620,  -547,  -409,  -582,  -582,
  -530,  -532,  -532,  -532,  -546,  -548,  -549,  -550,  -551,  -552,
  -553,  -554,  -620,  -556,  -620,  -562,  -564,  -565,  -567,  -572,
  -574,  -575,  -577,  -578,  -579,  -620,  -619,  -350,  -351,  -619,
  -620,  -620,  -620,  -620,  -435,  -619,  -620,  -620,  -291,  -316,
  -108,  -109,  -620,  -111,  -620,  -281,  -620,  -620,  -327,  -547,
  -331,  -620,  -455,  -478,  -483,  -484,  -486,  -457,  -480,  -458,
  -482,  -459,  -460,  -620,  -463,  -465,  -620,  -466,  -469,  -470,
  -620,  -471,  -472,  -620,  -498,  -620,   -18,  -620,   -28,  -271,
  -620,  -620,  -428,  -620,  -252,  -254,  -620,  -620,   -61,  -248,
  -249,  -421,  -620,  -620,   -63,  -422,  -620,  -620,  -300,  -596,
  -597,  -596,  -597,  -608,  -197,  -620,  -395,  -396,  -608,  -398,
  -413,   -54,  -416,  -619,  -430,  -433,  -247,  -296,  -619,  -263,
  -267,  -620,  -589,  -590,   -15,   -73,  -620,   -79,   -85,  -608,
  -596,  -597,  -619,   -94,   -96,  -620,   -81,  -620,  -206,  -216,
  -217,  -608,  -619,  -619,  -284,  -608,  -612,  -294,  -587,  -407,
  -619,  -619,  -608,  -620,  -528,  -529,  -620,  -620,  -539,  -620,
  -542,  -620,  -544,  -620,  -361,  -620,  -363,  -365,  -372,  -553,
  -608,  -558,  -566,  -576,  -580,  -619,  -352,  -619,  -309,  -353,
  -354,  -312,  -620,  -315,  -620,  -608,  -596,  -597,  -600,  -290,
  -620,  -108,  -109,  -110,  -620,  -620,  -619,  -320,  -521,  -522,
  -620,  -323,  -619,  -619,  -547,  -620,  -620,  -608,  -620,  -619,
  -462,  -464,  -468,  -474,  -476,   -10,  -124,  -269,  -620,  -200,
  -620,  -611,  -619,   -33,  -202,   -34,  -203,   -62,   -35,  -205,
   -36,  -204,   -64,  -198,  -620,  -620,  -620,  -620,  -428,  -620,
  -582,  -582,  -377,  -619,  -619,  -619,  -394,  -620,  -608,  -400,
  -553,  -620,  -560,  -570,  -619,  -418,  -417,   -56,  -619,  -619,
  -258,  -268,   -77,   -92,   -89,  -299,  -619,  -357,  -619,  -441,
  -619,  -442,  -443,  -288,  -245,  -620,  -620,  -608,  -582,  -563,
  -581,  -531,  -532,  -532,  -557,  -532,  -532,  -573,  -532,  -568,
  -608,  -620,  -370,  -620,  -555,  -620,  -355,  -620,  -620,  -619,
  -619,  -314,  -620,  -428,  -620,  -108,  -109,  -112,  -608,  -619,
  -620,  -524,  -620,  -620,  -620,  -608,  -526,  -332,  -585,  -485,
  -488,  -489,  -490,  -491,  -620,  -270,   -32,  -201,  -253,  -620,
  -240,  -620,  -375,  -376,  -385,  -379,  -387,  -620,  -390,  -620,
  -392,  -397,  -620,  -620,  -620,  -559,  -620,  -620,  -619,  -620,
  -620,   -11,  -619,  -447,  -358,  -620,  -620,  -445,  -410,  -411,
  -408,  -527,  -620,  -535,  -620,  -537,  -620,  -540,  -620,  -543,
  -545,  -362,  -364,  -368,  -620,  -373,  -306,  -620,  -307,  -620,
  -620,  -620,  -619,  -317,  -428,  -620,  -620,  -324,  -328,  -330,
  -525,  -547,  -487,  -582,  -561,  -378,  -619,  -619,  -619,  -619,
  -571,  -619,  -399,  -608,  -402,  -404,  -405,  -569,  -620,  -291,
  -414,  -620,  -431,  -434,  -446,  -619,   -99,  -100,  -620,  -620,
  -107,  -444,  -532,  -532,  -532,  -532,  -366,  -620,  -371,  -620,
  -619,  -310,  -313,  -267,  -619,  -619,  -321,  -523,  -619,  -619,
  -374,  -620,  -382,  -620,  -384,  -620,  -388,  -620,  -391,  -393,
  -401,  -620,  -290,  -600,   -57,  -440,  -619,  -620,  -620,  -106,
  -620,  -533,  -536,  -538,  -541,  -620,  -369,  -619,  -436,  -437,
  -438,  -620,  -620,  -620,  -619,  -619,  -619,  -619,  -403,  -439,
  -608,  -596,  -597,  -600,  -105,  -532,  -367,  -356,  -318,  -325,
  -333,  -620,  -380,  -383,  -386,  -389,  -428,  -534,  -619,  -381 ]

clist = [
'6,218,221,365,260,417,532,277,277,277,17,583,334,127,127,497,17,122',
'206,692,392,297,632,211,440,576,579,324,278,278,278,222,412,132,132',
'4,672,130,130,437,222,222,222,547,17,302,302,753,728,731,272,522,424',
'430,554,114,261,486,330,669,329,9,669,111,314,845,491,9,794,837,279',
'279,279,950,222,222,127,672,222,347,110,373,834,375,377,380,383,386',
'389,375,264,270,273,127,816,925,922,311,311,743,331,954,482,704,705',
'956,374,720,535,538,850,293,390,338,339,740,797,342,295,17,114,596,985',
'598,222,222,222,222,17,848,115,311,660,353,613,859,791,616,597,326,664',
'665,714,862,988,343,355,752,599,603,756,941,849,610,340,333,614,497',
'695,614,827,796,327,398,399,400,401,275,287,288,9,325,366,672,747,798',
'978,950,350,402,335,828,541,369,953,277,662,410,415,332,545,337,337',
'435,439,337,699,336,669,669,627,481,804,795,414,489,808,490,418,1028',
'809,414,1018,956,434,17,222,222,222,734,820,905,222,222,222,222,222',
'222,448,1016,371,425,372,396,922,898,376,379,1,17,277,337,337,337,337',
'653,277,663,677,277,732,857,833,702,835,382,892,686,788,834,840,278',
'385,388,554,869,758,1036,759,418,278,391,837,222,860,404,496,496,352',
'222,832,205,222,829,813,16,518,488,944,424,430,16,901,834,946,714,121',
'447,842,523,17,601,17,279,341,2,302,17,515,679,,,279,,807,,,554,,16',
',698,933,302,511,,527,,,,,542,272,17,,222,,,,114,853,443,444,445,446',
'882,883,505,222,222,,506,493,586,,296,682,1037,311,943,,594,791,594',
'504,791,,791,682,293,,543,834,508,293,311,507,,,,735,513,,911,,,1019',
'580,581,989,761,,114,761,16,600,633,,,,487,6,,16,810,,127,,,492,626',
'17,812,311,,311,672,582,496,496,,714,639,714,,277,132,682,,947,130,777',
'948,863,864,,625,782,,,,,669,,640,886,888,890,418,,645,434,533,,,440',
',972,222,655,,865,9,934,,337,337,,425,791,,791,554,791,824,791,,,,656',
'639,,,,,638,,656,656,277,16,644,,1029,,,523,,990,,,,640,976,714,523',
',,810,,,,418,17,16,,,821,434,791,302,,222,,648,,409,,,302,434,,,668',
',425,1024,,222,932,935,858,,661,,,,425,,,296,,,,,,,714,,714,277,,,,674',
',,,,666,667,,311,,696,16,,16,,,,311,16,418,17,675,682,17,,434,,678,965',
'222,,714,,,992,994,996,998,,999,,222,425,,16,222,806,,,296,980,773,775',
',296,,,778,780,,,439,,,,127,729,729,633,766,,1046,,799,,,805,708,710',
'712,222,222,748,,,132,222,222,1020,130,222,691,,,633,554,523,656,,,',
',496,29,,1022,1023,814,772,29,,,1042,1043,1044,1045,639,799,,,302,867',
'16,,29,414,817,822,,,,302,,29,29,29,1049,29,640,,,645,,,17,17,,,,,633',
',,,,,,277,751,817,,817,757,,,,852,29,29,,,29,311,,,,,,,,418,,434,311',
'222,876,,,,,222,,,,127,,17,17,,,,425,,17,,815,496,,,823,,,29,799,222',
',,29,29,29,29,29,,854,16,,,885,885,885,,,,,844,,861,1030,,,,866,,,,895',
',,17,,903,,17,17,907,,,,,,,793,17,,,,,,19,,,868,,633,19,,,,,792,,,,',
'682,,,,,,,222,,17,17,16,,311,16,,,337,19,17,222,,,,29,29,29,29,836,',
'838,29,29,29,29,29,29,,,,830,,,830,,,927,725,29,,727,,,351,957,,729',
'910,17,936,,,17,,937,,968,,,,921,,,,913,915,,917,919,,920,,29,,1000',
',,,29,,,29,17,19,18,940,885,885,885,885,18,885,19,,,,311,,,29,,29,434',
',,,29,,311,,,,,,337,17,1007,,18,304,304,,,277,817,16,16,337,987,,17',
',29,,29,17,,,17,17,,,,,,,418,29,29,,,633,434,349,,,222,817,,,,825,826',
',885,885,885,885,,425,,,,,,,,16,16,19,,,,41,16,,,438,885,41,,,,18,,',
'949,,951,,,,18,19,1011,1012,1013,1014,830,,29,792,,,792,,792,41,300',
'300,874,973,,974,,975,,,,16,,,,16,16,,,,,,,,,16,,,,,,,,,345,,,367,,29',
',,,,,,19,897,19,1047,,899,900,19,,,16,16,,,,904,,,,,16,,,,,18,,,41,',
',,,19,,,1025,41,1026,,1027,,,,,,929,930,29,18,,,,,792,1035,792,29,792',
'16,792,,,16,,,,,,,,,,29,,,,,,,,,,,,,1048,,,,,,,16,,961,,,,964,,,,,792',
',,,,,18,19,18,,,,304,18,,29,,,29,,41,,16,,29,984,,,,304,,,,,,,29,16',
',18,29,,16,,41,16,16,,,,,,,,,,,,1005,,,,,,,,,595,,595,,,,1017,,29,29',
',1021,,,29,29,,,29,,42,,,,,,42,,,,,,,,,,,,41,,41,,19,,300,41,,,,,18',
',,,42,301,301,,,,,300,,,,,,,,,,41,29,29,,,,,,,,,,,,,,,,346,,,368,,,',
',,,367,,367,,,,,,,,,,,29,19,,,19,,29,,,,,,29,29,,,,42,,29,,,,,,,42,',
',,29,,,,,,,41,,,18,,,,,,,304,,,,,,,,,304,,,,,,,,29,,,,29,29,,438,411',
',,,,,29,442,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,29,29,18,,42,18,,,,,29,29',
',,,,19,19,,,,,,,,,,,42,,41,,,,,,499,300,501,,502,503,,,,,300,,,29,,',
',29,,,,,,,,,,,,,,,19,19,,,,,,19,,,,,,,,29,,,,,544,42,,42,,,,301,42,',
',,,41,304,,41,,,,,,,,301,304,,,29,,,,19,,42,,19,19,18,18,,,,29,,,19',
',29,,,29,29,,,,,,,,,,368,,368,,,,,29,,,,,,,,19,19,,629,,,,,,,19,,,18',
'18,,,,,873,18,,,,,,,,,,,,,,,42,300,,,,,,,,,,,300,,19,,,,19,,,,971,,',
'41,41,595,,,18,,,,18,18,,,,,,,,,18,,,,19,,670,,,544,,673,,,,,,,,,,,',
',,,,,,,,18,18,41,41,,,19,,,41,18,,,,,,670,,,544,,19,,,,,19,42,,19,19',
',,,301,,,,,,,,,301,721,595,,,,18,,367,,18,41,,,970,41,41,,,,,,,,,41',
',,,,,,,,,,,,,,18,,,,,,,,,,,,,,,42,41,41,42,,,,,,,,41,767,,,,670,544',
'18,,,,,,,,,,,,,,,18,,,,,18,,,18,18,,,,367,,,,41,,,811,41,,,,966,,,,',
',,,,,,,,,,,,819,,,,,,,,,41,,,,,,,,,,,839,,,,,301,,,,,,,,,,,301,,,,,442',
'41,,,,,,,42,42,,,,,,,41,,,,,41,,,41,41,,,,,,,229,,875,,,,,,,276,276',
'276,,,,,,,,,,,321,322,323,,,,42,42,,,,,,42,,,,276,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,368,,,42,,,,42,42,,,,,,,,,42,,,,,,,,,,,,,,,,,,544',
',,,,,,,,,,,,42,42,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,983,,,,,368',
',,,42,,,,42,,,,967,,,276,416,276,,,,436,441,,,,,,,,,,,,,,,229,42,,455',
'456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472',
'473,474,475,476,477,478,479,480,,,,,,42,276,,,,,,276,,,276,,,,,42,,276',
',276,42,276,276,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,529,,,,,,,',
',276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,436,654',
'416,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,276,,276,,,,,,,,,',
',,,,276,,,,,,,,,,688,689,690,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,',
',,,,276,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,276,769,,,276,276,774,776,,,,,779,781,,,654,783,,,,,,,,,,,,',
',,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,276,,,,,',
',,,,,,,,,,,,,,,276,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,276,,877,,,,',
',,,,,,,,,774,776,781,779,,880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,877,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(3019, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,22,60,153,25,10,36,36,36,24,93,87,61,61,74,24,17,17,13,60,53,26',
'27,20,90,90,34,69,69,69,24,30,65,65,2,196,64,64,30,24,24,24,152,24,24',
'24,97,92,92,72,55,40,40,183,96,39,42,69,75,6,9,75,8,54,91,25,9,142,191',
'71,71,71,192,24,24,61,196,24,24,5,6,187,6,6,6,6,6,6,6,41,41,41,61,14',
'133,130,67,67,58,71,147,40,137,137,148,170,132,70,70,106,49,170,19,19',
'107,145,19,50,24,96,59,108,59,24,24,24,24,24,14,7,67,43,109,173,110',
'136,173,111,51,43,43,131,112,113,5,114,115,116,174,117,118,104,174,103',
'102,174,74,101,174,145,134,100,19,19,19,19,48,48,48,9,99,98,196,95,140',
'133,192,94,9,89,136,86,85,146,36,73,22,22,68,149,32,32,22,22,32,150',
'151,75,75,66,154,155,143,69,158,159,160,6,147,161,69,162,148,61,24,24',
'24,24,163,164,165,24,24,24,24,24,24,27,133,168,72,169,7,130,46,171,172',
'1,24,36,32,32,32,32,25,36,45,55,36,93,58,143,152,143,175,145,55,26,187',
'132,69,176,177,183,178,179,133,180,6,69,181,191,24,182,33,6,6,21,24',
'186,18,24,188,26,23,34,72,189,40,40,23,15,187,142,131,11,51,131,53,24',
'195,24,71,105,3,24,24,27,25,,,71,,43,,,183,,23,,70,92,24,54,,27,,,,',
'6,72,24,,24,,,,96,26,32,32,32,32,137,137,8,24,24,,9,51,27,,12,40,91',
'67,136,,24,136,24,5,136,,136,40,49,,71,187,51,49,67,50,,,,25,50,,137',
',,14,19,19,97,174,,96,174,23,39,34,,,,48,6,,23,74,,61,,,48,17,24,55',
'67,,67,196,5,6,6,,131,6,131,,36,65,40,,143,64,42,143,10,10,,2,42,,,',
',75,,72,139,139,139,6,,72,61,32,,,20,,143,24,34,,152,9,26,,32,32,,72',
'136,,136,183,136,70,136,,,,6,6,,,,,41,,6,6,36,23,41,,13,,,53,,137,,',
',72,131,131,53,,,74,,,,6,24,23,,,30,61,136,24,,24,,51,,12,,,24,61,,',
'71,,72,143,,24,90,10,25,,41,,,,72,,,12,,,,,,,131,,131,36,,,,9,,,,,51',
'51,,67,,71,23,,23,,,,67,23,6,24,51,40,24,,61,,51,90,24,,131,,,139,139',
'139,139,,139,,24,72,,23,24,87,,,12,90,22,22,,12,,,22,22,,,22,,,,61,96',
'96,34,17,,26,,34,,,153,185,185,185,24,24,96,,,65,24,24,93,64,24,32,',
',34,183,53,6,,,,,6,44,,10,10,53,71,44,,,139,139,139,139,6,34,,,24,60',
'23,,44,69,6,6,,,,24,,44,44,44,139,44,72,,,72,,,24,24,,,,,34,,,,,,,36',
'32,6,,6,32,,,,69,44,44,,,44,67,,,,,,,,6,,61,67,24,22,,,,,24,,,,61,,24',
'24,,,,72,,24,,51,6,,,51,,,44,34,24,,,44,44,44,44,44,,19,23,,,6,6,6,',
',,,51,,96,25,,,,96,,,,24,,,24,,6,,24,24,6,,,,,,,141,24,,,,,,29,,,51',
',34,29,,,,,138,,,,,40,,,,,,,24,,24,24,23,,67,23,,,32,29,24,24,,,,44',
'44,44,44,141,,141,44,44,44,44,44,44,,,,138,,,138,,,19,12,44,,12,,,29',
'24,,96,51,24,19,,,24,,96,,24,,,,51,,,,185,185,,185,185,,185,,44,,34',
',,,44,,,44,24,29,28,51,6,6,6,6,28,6,29,,,,67,,,44,,44,61,,,,44,,67,',
',,,,32,24,27,,28,28,28,,,36,6,23,23,32,96,,24,,44,,44,24,,,24,24,,,',
',,,6,44,44,,,34,61,28,,,24,6,,,,12,12,,6,6,6,6,,72,,,,,,,,23,23,29,',
',,56,23,,,29,6,56,,,,28,,,141,,141,,,,28,29,185,185,185,185,138,,44',
'138,,,138,,138,56,56,56,12,141,,141,,141,,,,23,,,,23,23,,,,,,,,,23,',
',,,,,,,56,,,56,,44,,,,,,,29,12,29,185,,12,12,29,,,23,23,,,,12,,,,,23',
',,,,28,,,56,,,,,29,,,141,56,141,,141,,,,,,12,12,44,28,,,,,138,141,138',
'44,138,23,138,,,23,,,,,,,,,,44,,,,,,,,,,,,,141,,,,,,,23,,12,,,,12,,',
',,138,,,,,,28,29,28,,,,28,28,,44,,,44,,56,,23,,44,12,,,,28,,,,,,,44',
'23,,28,44,,23,,56,23,23,,,,,,,,,,,,12,,,,,,,,,28,,28,,,,12,,44,44,,12',
',,44,44,,,44,,57,,,,,,57,,,,,,,,,,,,56,,56,,29,,56,56,,,,,28,,,,57,57',
'57,,,,,56,,,,,,,,,,56,44,44,,,,,,,,,,,,,,,,57,,,57,,,,,,,56,,56,,,,',
',,,,,,44,29,,,29,,44,,,,,,44,44,,,,57,,44,,,,,,,57,,,,44,,,,,,,56,,',
'28,,,,,,,28,,,,,,,,,28,,,,,,,,44,,,,44,44,,29,31,,,,,,44,31,,,,,,,,',
',,,,,,,,,,,,,,,,,,,44,,44,44,28,,57,28,,,,,44,44,,,,,29,29,,,,,,,,,',
',57,,56,,,,,,31,56,31,,31,31,,,,,56,,,44,,,,44,,,,,,,,,,,,,,,29,29,',
',,,,29,,,,,,,,44,,,,,31,57,,57,,,,57,57,,,,,56,28,,56,,,,,,,,57,28,',
',44,,,,29,,57,,29,29,28,28,,,,44,,,29,,44,,,44,44,,,,,,,,,,57,,57,,',
',,44,,,,,,,,29,29,,31,,,,,,,29,,,28,28,,,,,28,28,,,,,,,,,,,,,,,57,56',
',,,,,,,,,,56,,29,,,,29,,,,29,,,56,56,28,,,28,,,,28,28,,,,,,,,,28,,,',
'29,,31,,,31,,31,,,,,,,,,,,,,,,,,,,,28,28,56,56,,,29,,,56,28,,,,,,31',
',,31,,29,,,,,29,57,,29,29,,,,57,,,,,,,,,57,31,28,,,,28,,56,,28,56,,',
'28,56,56,,,,,,,,,56,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,57,56,56,57,,,,,',
',,56,31,,,,31,31,28,,,,,,,,,,,,,,,28,,,,,28,,,28,28,,,,56,,,,56,,,31',
'56,,,,56,,,,,,,,,,,,,,,,,31,,,,,,,,,56,,,,,,,,,,,31,,,,,57,,,,,,,,,',
',57,,,,,31,56,,,,,,,57,57,,,,,,,56,,,,,56,,,56,56,,,,,,,35,,31,,,,,',
',35,35,35,,,,,,,,,,,35,35,35,,,,57,57,,,,,,57,,,,35,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,57,,,57,,,,57,57,,,,,,,,,57,,,,,,,,,,,,,,,,,,31',
',,,,,,,,,,,,57,57,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,57',
',,,57,,,,57,,,,57,,,35,35,35,,,,35,35,,,,,,,,,,,,,,,35,57,,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
',,,,,57,35,,,,,,35,,,35,,,,,57,,35,,35,57,35,35,57,57,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,35,,,35,,35,,,,,,,,,,,,,,35,,,,,,,,,,35,35,35,,,,,,,,,,35,,,35,,,',
',,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,',
',,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,',
',,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,',
',,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3019, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   238,    33,   305,   nil,    75,    -2,   122,    58,    59,
  -319,   286,   319,  -512,  -598,  -524,   nil,     6,   269,    47,
  -191,   207,   -21,   283,     8,  -205,  -395,     6,   940,   830,
  -176,  1269,   125,   153,   -21,  2012,   -25,   nil,   nil,    29,
  -159,    61,  -207,  -349,   665,  -238,  -572,   nil,   135,    75,
    82,    78,   nil,   -16,    26,  -264,  1039,  1311,  -493,  -232,
   -71,     2,   nil,   nil,    26,    22,  -208,    60,   127,    -4,
  -222,    38,    20,  -296,  -264,  -436,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   109,  -151,   -52,   nil,   115,
  -313,  -660,  -532,  -332,   107,  -422,    50,  -552,    98,   111,
   101,  -375,    92,    86,  -576,   235,  -621,  -474,  -811,    61,
  -612,  -216,  -608,  -793,    73,  -451,  -217,  -450,  -716,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -745,  -420,  -455,  -748,  -497,   nil,  -522,  -445,   185,  -348,
  -483,   167,  -590,  -455,   nil,  -542,  -709,  -792,  -788,  -146,
  -349,   132,  -293,   -21,   -58,  -458,   nil,   nil,   -63,  -458,
   -62,  -455,  -772,  -365,  -473,  -599,   nil,   nil,   150,   149,
    21,   150,   150,  -245,  -223,   167,   173,   173,  -493,  -339,
  -338,   180,  -475,  -282,   nil,    90,  -427,  -625,  -420,  -593,
   nil,  -640,  -814,   nil,   nil,   -69,  -462 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   290,     7,   344,   291,
   nil,   nil,   531,   nil,   846,   nil,   289,   nil,   nil,   nil,
    14,    15,    21,   228,   320,   nil,   nil,   745,   226,   227,
   nil,   282,    20,   nil,   328,    24,    25,    26,    27,   nil,
   685,   nil,   nil,   nil,   308,   nil,   nil,    28,   419,    35,
   nil,   nil,    37,    40,    39,   nil,   223,   224,   593,   nil,
   129,   427,   128,   131,    78,    79,   nil,    49,   nil,   420,
   nil,   421,   432,   641,   494,   280,   265,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   nil,   266,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   577,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   716,   561,   nil,   717,   945,   790,   549,   nil,   550,   nil,
   nil,   551,   nil,   553,   657,   nil,   nil,   nil,   559,   nil,
   nil,   nil,   755,   nil,   nil,   nil,   431,   267,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   608,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   831,   548,   nil,   552,   563,   565,   802,
   568,   569,   803,   572,   575,   nil,   284 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_8,
  0, 153, :_reduce_9,
  5, 149, :_reduce_10,
  4, 152, :_reduce_11,
  2, 154, :_reduce_12,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_15,
  2, 158, :_reduce_16,
  0, 175, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  3, 151, :_reduce_40,
  1, 151, :_reduce_none,
  3, 162, :_reduce_42,
  3, 162, :_reduce_43,
  1, 174, :_reduce_none,
  3, 174, :_reduce_45,
  3, 174, :_reduce_46,
  3, 174, :_reduce_47,
  2, 174, :_reduce_48,
  1, 174, :_reduce_none,
  1, 161, :_reduce_50,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 179, :_reduce_none,
  4, 179, :_reduce_54,
  0, 187, :_reduce_55,
  0, 188, :_reduce_56,
  6, 184, :_reduce_57,
  1, 186, :_reduce_58,
  2, 178, :_reduce_59,
  3, 178, :_reduce_60,
  4, 178, :_reduce_61,
  5, 178, :_reduce_62,
  4, 178, :_reduce_63,
  5, 178, :_reduce_64,
  2, 178, :_reduce_65,
  2, 178, :_reduce_66,
  2, 178, :_reduce_67,
  2, 178, :_reduce_68,
  2, 178, :_reduce_69,
  1, 163, :_reduce_none,
  3, 163, :_reduce_71,
  1, 192, :_reduce_none,
  3, 192, :_reduce_73,
  1, 191, :_reduce_74,
  2, 191, :_reduce_75,
  3, 191, :_reduce_76,
  5, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  2, 191, :_reduce_80,
  4, 191, :_reduce_81,
  1, 191, :_reduce_82,
  3, 191, :_reduce_83,
  1, 195, :_reduce_none,
  3, 195, :_reduce_85,
  2, 194, :_reduce_86,
  3, 194, :_reduce_87,
  1, 197, :_reduce_88,
  3, 197, :_reduce_89,
  1, 196, :_reduce_90,
  1, 196, :_reduce_91,
  4, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  3, 196, :_reduce_95,
  3, 196, :_reduce_96,
  2, 196, :_reduce_97,
  1, 196, :_reduce_98,
  1, 171, :_reduce_99,
  1, 171, :_reduce_100,
  4, 171, :_reduce_101,
  3, 171, :_reduce_102,
  3, 171, :_reduce_103,
  3, 171, :_reduce_104,
  3, 171, :_reduce_105,
  2, 171, :_reduce_106,
  1, 171, :_reduce_107,
  1, 200, :_reduce_108,
  1, 200, :_reduce_none,
  2, 201, :_reduce_110,
  1, 201, :_reduce_111,
  3, 201, :_reduce_112,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_116,
  1, 202, :_reduce_117,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 159, :_reduce_120,
  1, 159, :_reduce_none,
  1, 160, :_reduce_122,
  0, 208, :_reduce_123,
  4, 160, :_reduce_124,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 177, :_reduce_197,
  5, 177, :_reduce_198,
  3, 177, :_reduce_199,
  5, 177, :_reduce_200,
  6, 177, :_reduce_201,
  5, 177, :_reduce_202,
  5, 177, :_reduce_203,
  5, 177, :_reduce_204,
  5, 177, :_reduce_205,
  4, 177, :_reduce_206,
  3, 177, :_reduce_207,
  3, 177, :_reduce_208,
  3, 177, :_reduce_209,
  3, 177, :_reduce_210,
  3, 177, :_reduce_211,
  3, 177, :_reduce_212,
  3, 177, :_reduce_213,
  3, 177, :_reduce_214,
  3, 177, :_reduce_215,
  4, 177, :_reduce_216,
  4, 177, :_reduce_217,
  2, 177, :_reduce_218,
  2, 177, :_reduce_219,
  3, 177, :_reduce_220,
  3, 177, :_reduce_221,
  3, 177, :_reduce_222,
  3, 177, :_reduce_223,
  3, 177, :_reduce_224,
  3, 177, :_reduce_225,
  3, 177, :_reduce_226,
  3, 177, :_reduce_227,
  3, 177, :_reduce_228,
  3, 177, :_reduce_229,
  3, 177, :_reduce_230,
  3, 177, :_reduce_231,
  3, 177, :_reduce_232,
  2, 177, :_reduce_233,
  2, 177, :_reduce_234,
  3, 177, :_reduce_235,
  3, 177, :_reduce_236,
  3, 177, :_reduce_237,
  3, 177, :_reduce_238,
  3, 177, :_reduce_239,
  6, 177, :_reduce_240,
  1, 177, :_reduce_none,
  1, 173, :_reduce_242,
  1, 210, :_reduce_none,
  2, 210, :_reduce_244,
  4, 210, :_reduce_245,
  2, 210, :_reduce_246,
  3, 214, :_reduce_247,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 167, :_reduce_250,
  1, 167, :_reduce_251,
  2, 167, :_reduce_252,
  4, 167, :_reduce_253,
  2, 167, :_reduce_254,
  1, 190, :_reduce_255,
  2, 190, :_reduce_256,
  2, 190, :_reduce_257,
  4, 190, :_reduce_258,
  1, 190, :_reduce_259,
  0, 218, :_reduce_260,
  2, 183, :_reduce_261,
  2, 217, :_reduce_262,
  2, 216, :_reduce_263,
  1, 216, :_reduce_none,
  1, 211, :_reduce_265,
  2, 211, :_reduce_266,
  3, 211, :_reduce_267,
  4, 211, :_reduce_268,
  3, 172, :_reduce_269,
  4, 172, :_reduce_270,
  2, 172, :_reduce_271,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_282,
  0, 241, :_reduce_283,
  4, 209, :_reduce_284,
  2, 209, :_reduce_285,
  0, 242, :_reduce_286,
  0, 243, :_reduce_287,
  5, 209, :_reduce_288,
  3, 209, :_reduce_289,
  3, 209, :_reduce_290,
  2, 209, :_reduce_291,
  3, 209, :_reduce_292,
  0, 244, :_reduce_293,
  4, 209, :_reduce_294,
  1, 209, :_reduce_295,
  4, 209, :_reduce_296,
  3, 209, :_reduce_297,
  1, 209, :_reduce_298,
  5, 209, :_reduce_299,
  4, 209, :_reduce_300,
  3, 209, :_reduce_301,
  2, 209, :_reduce_302,
  1, 209, :_reduce_none,
  2, 209, :_reduce_304,
  2, 209, :_reduce_305,
  6, 209, :_reduce_306,
  6, 209, :_reduce_307,
  0, 245, :_reduce_308,
  0, 246, :_reduce_309,
  7, 209, :_reduce_310,
  0, 247, :_reduce_311,
  0, 248, :_reduce_312,
  7, 209, :_reduce_313,
  5, 209, :_reduce_314,
  4, 209, :_reduce_315,
  0, 249, :_reduce_316,
  0, 250, :_reduce_317,
  9, 209, :_reduce_318,
  0, 251, :_reduce_319,
  0, 252, :_reduce_320,
  7, 209, :_reduce_321,
  0, 253, :_reduce_322,
  0, 254, :_reduce_323,
  0, 255, :_reduce_324,
  9, 209, :_reduce_325,
  0, 256, :_reduce_326,
  0, 257, :_reduce_327,
  6, 209, :_reduce_328,
  0, 258, :_reduce_329,
  6, 209, :_reduce_330,
  0, 259, :_reduce_331,
  0, 260, :_reduce_332,
  9, 209, :_reduce_333,
  1, 209, :_reduce_334,
  1, 209, :_reduce_335,
  1, 209, :_reduce_336,
  1, 209, :_reduce_337,
  1, 166, :_reduce_338,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 233, :_reduce_none,
  5, 233, :_reduce_356,
  1, 156, :_reduce_none,
  2, 156, :_reduce_358,
  1, 236, :_reduce_none,
  1, 236, :_reduce_360,
  1, 272, :_reduce_none,
  3, 272, :_reduce_362,
  1, 275, :_reduce_363,
  3, 275, :_reduce_364,
  1, 274, :_reduce_365,
  4, 274, :_reduce_366,
  6, 274, :_reduce_367,
  3, 274, :_reduce_368,
  5, 274, :_reduce_369,
  2, 274, :_reduce_370,
  4, 274, :_reduce_371,
  1, 274, :_reduce_372,
  3, 274, :_reduce_373,
  4, 276, :_reduce_374,
  2, 276, :_reduce_375,
  2, 276, :_reduce_376,
  1, 276, :_reduce_377,
  2, 281, :_reduce_378,
  1, 281, :_reduce_none,
  6, 282, :_reduce_380,
  8, 282, :_reduce_381,
  4, 282, :_reduce_382,
  6, 282, :_reduce_383,
  4, 282, :_reduce_384,
  2, 282, :_reduce_385,
  6, 282, :_reduce_386,
  2, 282, :_reduce_387,
  4, 282, :_reduce_388,
  6, 282, :_reduce_389,
  2, 282, :_reduce_390,
  4, 282, :_reduce_391,
  2, 282, :_reduce_392,
  4, 282, :_reduce_393,
  1, 282, :_reduce_394,
  1, 185, :_reduce_395,
  1, 185, :_reduce_none,
  3, 286, :_reduce_397,
  1, 286, :_reduce_398,
  4, 286, :_reduce_399,
  1, 287, :_reduce_none,
  4, 287, :_reduce_401,
  1, 288, :_reduce_402,
  3, 288, :_reduce_403,
  1, 289, :_reduce_404,
  1, 289, :_reduce_none,
  0, 293, :_reduce_406,
  3, 231, :_reduce_407,
  4, 291, :_reduce_408,
  1, 291, :_reduce_409,
  3, 292, :_reduce_410,
  3, 292, :_reduce_411,
  0, 296, :_reduce_412,
  0, 297, :_reduce_413,
  6, 295, :_reduce_414,
  2, 180, :_reduce_415,
  4, 180, :_reduce_416,
  5, 180, :_reduce_417,
  5, 180, :_reduce_418,
  0, 299, :_reduce_419,
  3, 230, :_reduce_420,
  4, 230, :_reduce_421,
  4, 230, :_reduce_422,
  3, 230, :_reduce_423,
  3, 230, :_reduce_424,
  3, 230, :_reduce_425,
  2, 230, :_reduce_426,
  1, 230, :_reduce_427,
  4, 230, :_reduce_428,
  0, 300, :_reduce_429,
  0, 301, :_reduce_430,
  6, 229, :_reduce_431,
  0, 302, :_reduce_432,
  0, 303, :_reduce_433,
  6, 229, :_reduce_434,
  0, 305, :_reduce_435,
  6, 235, :_reduce_436,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  6, 155, :_reduce_439,
  0, 155, :_reduce_440,
  1, 306, :_reduce_441,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  2, 307, :_reduce_444,
  1, 307, :_reduce_none,
  2, 157, :_reduce_446,
  1, 157, :_reduce_none,
  1, 219, :_reduce_448,
  1, 219, :_reduce_449,
  1, 219, :_reduce_none,
  1, 220, :_reduce_451,
  1, 309, :_reduce_452,
  1, 309, :_reduce_none,
  2, 309, :_reduce_454,
  3, 310, :_reduce_455,
  1, 310, :_reduce_456,
  3, 221, :_reduce_457,
  3, 222, :_reduce_458,
  3, 223, :_reduce_459,
  3, 223, :_reduce_460,
  1, 314, :_reduce_461,
  3, 314, :_reduce_462,
  1, 315, :_reduce_none,
  2, 315, :_reduce_464,
  3, 225, :_reduce_465,
  3, 225, :_reduce_466,
  1, 317, :_reduce_467,
  3, 317, :_reduce_468,
  3, 224, :_reduce_469,
  3, 224, :_reduce_470,
  3, 226, :_reduce_471,
  3, 226, :_reduce_472,
  1, 318, :_reduce_473,
  3, 318, :_reduce_474,
  1, 319, :_reduce_475,
  3, 319, :_reduce_476,
  1, 311, :_reduce_477,
  2, 311, :_reduce_478,
  1, 312, :_reduce_479,
  2, 312, :_reduce_480,
  1, 313, :_reduce_481,
  2, 313, :_reduce_482,
  1, 316, :_reduce_483,
  0, 321, :_reduce_484,
  3, 316, :_reduce_485,
  0, 322, :_reduce_486,
  4, 316, :_reduce_487,
  1, 320, :_reduce_488,
  1, 320, :_reduce_489,
  1, 320, :_reduce_490,
  1, 320, :_reduce_none,
  2, 206, :_reduce_492,
  1, 206, :_reduce_493,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  3, 207, :_reduce_498,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 308, :_reduce_501,
  2, 308, :_reduce_502,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 199, :_reduce_508,
  1, 199, :_reduce_509,
  1, 199, :_reduce_510,
  1, 199, :_reduce_511,
  1, 199, :_reduce_512,
  1, 199, :_reduce_513,
  1, 199, :_reduce_514,
  1, 227, :_reduce_515,
  1, 227, :_reduce_516,
  1, 165, :_reduce_517,
  1, 165, :_reduce_518,
  1, 170, :_reduce_519,
  1, 170, :_reduce_520,
  1, 237, :_reduce_521,
  0, 324, :_reduce_522,
  4, 237, :_reduce_523,
  2, 237, :_reduce_524,
  3, 239, :_reduce_525,
  2, 239, :_reduce_526,
  4, 325, :_reduce_527,
  2, 325, :_reduce_528,
  2, 325, :_reduce_529,
  1, 325, :_reduce_none,
  2, 327, :_reduce_531,
  0, 327, :_reduce_532,
  6, 294, :_reduce_533,
  8, 294, :_reduce_534,
  4, 294, :_reduce_535,
  6, 294, :_reduce_536,
  4, 294, :_reduce_537,
  6, 294, :_reduce_538,
  2, 294, :_reduce_539,
  4, 294, :_reduce_540,
  6, 294, :_reduce_541,
  2, 294, :_reduce_542,
  4, 294, :_reduce_543,
  2, 294, :_reduce_544,
  4, 294, :_reduce_545,
  1, 294, :_reduce_546,
  0, 294, :_reduce_547,
  1, 290, :_reduce_548,
  1, 290, :_reduce_549,
  1, 290, :_reduce_550,
  1, 290, :_reduce_551,
  1, 273, :_reduce_none,
  1, 273, :_reduce_553,
  1, 329, :_reduce_none,
  3, 329, :_reduce_555,
  1, 283, :_reduce_556,
  3, 283, :_reduce_557,
  2, 330, :_reduce_558,
  2, 331, :_reduce_559,
  1, 277, :_reduce_none,
  3, 277, :_reduce_561,
  1, 326, :_reduce_none,
  3, 326, :_reduce_563,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 278, :_reduce_566,
  1, 278, :_reduce_567,
  3, 333, :_reduce_568,
  3, 334, :_reduce_569,
  1, 284, :_reduce_570,
  3, 284, :_reduce_571,
  1, 328, :_reduce_572,
  3, 328, :_reduce_573,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 285, :_reduce_576,
  1, 285, :_reduce_577,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 280, :_reduce_580,
  2, 279, :_reduce_581,
  0, 279, :_reduce_582,
  1, 240, :_reduce_none,
  0, 337, :_reduce_584,
  4, 240, :_reduce_585,
  1, 228, :_reduce_586,
  2, 228, :_reduce_587,
  1, 213, :_reduce_none,
  3, 213, :_reduce_589,
  3, 338, :_reduce_590,
  2, 338, :_reduce_591,
  2, 338, :_reduce_592,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 169, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 176, :_reduce_none,
  1, 176, :_reduce_none,
  2, 193, :_reduce_none,
  2, 168, :_reduce_none,
  0, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 238, :_reduce_615,
  1, 238, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_618,
  0, 148, :_reduce_619 ]

racc_reduce_n = 620

racc_shift_n = 1050

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_56(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_60(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_201(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_204(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_205(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_206(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_207(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_208(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_209(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_239(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_260(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_261(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_267(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

def _reduce_282(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_284(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_285(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_286(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_287(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_288(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_292(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_293(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_295(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_301(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_302(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_330(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_332(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_333(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_365(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_369(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_371(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_372(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_373(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
 result = 0 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 405 omitted

def _reduce_406(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_407(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_414(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_415(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_419(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_434(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_440(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_482(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_484(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_485(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_487(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_DEND
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_488(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_502(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_558(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

# reduce 564 omitted

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_567(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_568(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_569(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_577(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_581(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_582(val, _values, result)
                      result = nil
                    
    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_586(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_587(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

def _reduce_615(val, _values, result)
 yyerrok 
    result
end

# reduce 616 omitted

# reduce 617 omitted

def _reduce_618(val, _values, result)
 yyerrok 
    result
end

def _reduce_619(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
