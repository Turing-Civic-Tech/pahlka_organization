#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-507,-100,605,579,579,-101,271,-507,-507,-507,749,271,-507,-507,-507',
'271,-507,221,621,817,-102,585,-103,-612,-507,-84,-507,-507,-507,-100',
'997,579,660,624,-102,579,-507,-507,-70,-507,-507,-507,-507,-507,579',
'271,537,218,219,539,-98,729,-99,222,-106,-104,701,-105,222,-101,-103',
'218,219,607,606,618,659,-507,-507,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,620,729,-507,-507,-507,-600,-507,-507,729,112',
'-507,879,270,-507,-507,623,-507,270,-507,209,-507,270,-507,-507,-507',
'-507,-507,-507,-507,-418,-507,-600,-507,-94,-100,748,116,116,-101,-100',
'-601,115,115,-101,-93,-507,-507,-507,-507,-289,-507,270,-507,-91,116',
'-103,-289,-289,-289,115,-103,-507,-289,-289,116,-289,-100,-102,116,115',
'116,931,-102,115,-89,115,-90,116,-97,-95,700,-96,115,-92,-94,-289,-289',
'210,-289,-289,-289,-289,-289,406,-92,218,219,660,408,407,-94,116,218',
'219,218,219,115,660,116,-518,-427,605,-519,115,610,660,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-512,659,-289',
'-289,-289,-94,643,-512,-94,211,-289,659,605,-289,94,95,94,95,-289,659',
'-289,-94,-289,-289,-289,-289,-289,-289,-289,-515,-289,-92,-289,-427',
'-98,454,-515,-99,-604,-604,-427,217,607,606,-504,-289,-289,784,-95,-427',
'-289,-504,-504,-504,783,222,-504,-504,-504,740,-504,-104,222,741,222',
'261,-92,-427,-504,-92,-504,-504,-504,607,606,608,537,-597,318,539,-504',
'-504,-92,-504,-504,-504,-504,-504,319,564,-106,-604,-604,96,97,96,97',
'83,-604,-604,567,222,-103,-600,-600,84,525,-604,-604,-101,355,-504,-504',
'-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-604,-604',
'-504,-504,-504,-504,-504,-504,575,574,-504,-598,-504,-504,-504,379,-504',
'-597,-504,382,-504,-504,-504,-504,-504,-504,-504,-504,-504,385,-504',
'560,-504,557,556,555,-105,558,116,-597,605,388,568,115,605,-504,-504',
'-504,-504,-604,-504,537,-504,215,536,404,-604,-604,-604,564,1008,-504',
'-604,-604,-507,-604,215,116,409,1006,567,-507,115,743,-604,560,-598',
'557,556,555,-507,558,745,605,453,-604,-604,-509,-604,-604,-604,-604',
'-604,560,-509,557,556,555,-598,558,455,607,606,575,574,607,606,605,-511',
'843,761,847,817,715,759,-511,-604,-604,-604,-604,-604,-604,-604,-604',
'-604,-604,-604,-604,-604,-604,637,605,-604,-604,-604,222,644,568,1001',
'456,-604,221,638,-604,607,606,625,487,-604,273,-604,497,-604,-604,-604',
'-604,-604,-604,-604,500,-604,-604,-604,-519,216,525,769,-518,607,606',
'603,977,-92,502,-604,-604,-604,-69,-93,222,-604,-604,-604,-604,-94,-101',
'-604,-604,-604,511,-604,-102,607,606,613,512,-290,-103,242,-604,-604',
'-604,-604,-290,519,-90,-97,-96,-91,-89,-604,-604,-290,-604,-604,-604',
'-604,-604,-99,-106,-105,-100,-98,575,574,560,264,557,556,555,239,558',
'264,265,241,240,237,238,276,265,222,-604,-604,-604,-604,-604,-604,-604',
'-604,-604,-604,-604,-604,-604,-604,847,817,-604,-604,-604,215,785,-604',
'715,273,-604,522,528,-604,-604,526,-604,718,-604,242,-604,452,-604,-604',
'-604,-604,-604,-604,-604,534,-604,-604,-604,560,-504,557,556,555,564',
'558,537,-504,540,539,585,-604,-604,-604,-604,567,-604,-289,-604,218',
'219,-510,218,219,-289,-289,-289,-102,-510,-289,-289,-289,560,-289,557',
'556,555,562,558,398,589,590,612,-289,-289,-289,572,571,575,574,616,619',
'622,-289,-289,-507,-289,-289,-289,-289,-289,629,-507,-262,631,560,-514',
'557,556,555,715,558,560,-514,557,556,555,222,558,718,635,636,568,273',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'647,242,-289,-289,-289,715,786,-289,-513,242,-289,242,715,-289,-289',
'-513,-289,242,-289,242,-289,923,-289,-289,-289,-289,-289,-289,-289,116',
'-289,116,-289,239,115,215,115,241,240,237,238,222,451,222,116,-289,-289',
'-289,-289,115,-289,452,-289,294,72,73,74,12,60,116,116,-104,66,67,115',
'115,222,70,-84,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104',
'103,105,106,870,871,22,677,872,110,111,648,11,48,222,13,108,107,109',
'98,59,100,99,101,530,102,110,111,688,94,95,693,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,694,235,236,215,697,256,257,502,43,703',
'958,36,706,707,61,62,242,709,63,745,38,239,711,245,47,241,240,237,238',
'249,247,243,23,244,713,721,722,91,83,85,86,87,89,723,725,585,84,92,239',
'260,732,-239,241,240,65,762,763,81,88,90,764,-263,96,97,294,72,73,74',
'12,60,770,487,-516,66,67,487,222,788,70,-516,68,69,71,33,34,75,76,261',
'-516,500,502,688,32,31,30,104,103,105,106,222,273,22,273,688,242,817',
'632,11,48,222,13,108,107,109,98,59,100,99,101,222,102,110,111,841,94',
'95,222,45,46,44,242,246,251,252,253,248,250,258,259,254,255,817,235',
'236,-517,851,256,257,222,43,-264,-517,36,878,881,61,62,242,706,63,-517',
'38,239,884,245,47,241,240,237,238,249,247,243,23,244,887,889,891,91',
'83,85,86,87,89,222,215,893,84,92,239,260,894,958,241,240,65,688,902',
'81,88,90,745,-262,96,97,294,72,73,74,12,60,906,908,-280,66,67,909,222',
'706,70,-280,68,69,71,33,34,75,76,912,-280,914,916,918,32,31,30,104,103',
'105,106,918,222,22,924,926,928,222,648,11,48,938,13,108,107,109,98,59',
'100,99,101,939,102,110,111,222,94,95,942,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,-337,235,236,-280,-265,256,257,-337,43,952,-280',
'36,959,960,61,62,-337,962,63,-280,38,239,963,245,47,241,240,237,238',
'249,247,243,23,244,979,981,215,91,83,85,86,87,89,518,-517,982,84,92',
'986,260,706,-517,516,991,65,993,995,81,88,90,-517,997,96,97,294,72,73',
'74,12,60,997,1004,-290,66,67,1009,1010,918,70,-290,68,69,71,33,34,75',
'76,918,-290,918,1015,979,32,31,30,104,103,105,106,-601,955,22,557,556',
'555,-600,558,11,48,693,13,108,107,109,98,59,100,99,101,979,102,110,111',
'1038,94,95,1039,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
'-516,235,236,-290,1040,256,257,-516,43,1041,-290,36,997,997,61,62,-516',
'997,63,-290,38,239,222,245,47,241,240,237,238,249,247,243,23,244,918',
'979,-289,91,83,85,86,87,89,-289,-289,3,84,92,-601,260,,-289,-289,,65',
',-601,81,88,90,-289,,96,97,294,72,73,74,12,60,,,215,66,67,,,,70,588',
'68,69,71,33,34,75,76,,586,,,,32,31,30,104,103,105,106,,955,22,557,556',
'555,,558,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,-289,235,236,215',
',256,257,-289,43,,214,36,-601,,61,62,-289,,63,212,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,222,260',
',,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,,,22,119,120',
'121,122,123,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,',
'256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247',
'243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96',
'97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121',
'122,123,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254',
'255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65',
',,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,560,22,557,556,555,,558,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,560,715,557,556,555',
',558,,,256,257,,43,,,296,,242,61,62,,,63,,38,239,,245,47,241,240,237',
'238,256,257,243,23,244,715,,,91,83,85,86,87,89,,,239,84,92,,241,240',
'237,238,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,560,22,557,556,555',
',558,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,,,,,,,,715,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-624,-624,-624,-624,248,250,,,-624,-624,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-624,-624,-624,-624,248,250,,,-624,-624,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-624,-624,-624,-624,248,250,,,-624',
'-624,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-624,-624,-624,-624,248,250',
',,-624,-624,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-624,-624,-624,-624',
'248,250,,,-624,-624,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,-624,-624,,,256,257,,43,,,36,,,61,62,,',
'63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,,-624,-624,,,256,257',
',43,,,296,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,,,254,255,,,,,,256,257',
',43,,,296,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-624,-624,-624,-624,248,250,,,-624,-624,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63',
',,239,,245,47,241,240,237,238,,,243,232,244,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,',
',,,,,256,257,,227,,,233,,,61,62,,,63,,285,239,283,245,47,241,240,237',
'238,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61',
'62,,,63,,,239,,245,47,241,240,237,238,,,,232,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,300,,,,,,,',
',,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,317,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,514,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,315,,,,,,,,,,,,,,,,,,,,896,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,672,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,767,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,',
',,,,,,,,,969,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,672,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,349,,,36,,',
'61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,414',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,222,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315',
',,,,,,,,,,,,,,,,,,,896,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,398,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,672,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,',
',,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36',
',,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,',
',108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,',
',,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,398,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,591,59,100,99,592,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,593,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,591,59,100,99,592,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,593,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,530,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,414,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,672,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,',
',108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,',
',,,,,,,,,,,227,,,233,,,61,62,,,63,,414,,,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,-605,,96,97,,,,-605',
'-605,-605,,,-605,-605,-605,560,-605,557,556,555,564,558,,,,-605,-605',
'-605,-605,,,567,,,,,-605,-605,,-605,-605,-605,-605,-605,,,,,,,,,,562',
'753,,,,,,,,572,571,575,574,,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-605,-605,-605,,,-605,-605,-605,,,-605,,,-605,,,-605',
'-605,,-605,568,-605,,-605,,-605,-605,-605,-605,-605,-605,-605,,-605',
'-605,-605,,,,,,,,,,,,,-605,-605,-605,-605,-281,-605,,-605,,,,-281,-281',
'-281,,,-281,-281,-281,560,-281,557,556,555,564,558,,,,,-281,-281,-281',
',,567,,,,,-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,,562,,,,,,,,,572',
'571,575,574,,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,,,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,568',
'-281,,-281,,-281,-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,',
',,,-281,-281,-281,-281,-606,-281,,-281,,,,-606,-606,-606,,,-606,-606',
'-606,560,-606,557,556,555,564,558,,,,-606,-606,-606,-606,,,567,,,,,-606',
'-606,,-606,-606,-606,-606,-606,,,,,,,,,,562,,,,,,,,,,,575,574,,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,,,-606',
'-606,-606,,,-606,,,-606,,,-606,-606,,-606,568,-606,,-606,,-606,-606',
'-606,-606,-606,-606,-606,,-606,-606,-606,,,,,,,,,,,,,-606,-606,-606',
'-606,,-606,,-606,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,364,363,365',
'362,172,191,190,,,,,,171,178,169,170,359,360,361,357,129,100,99,358',
',102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,371,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,126,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,395,394,128,,396,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,',
',,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199',
'184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,',
',,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,-623,,,,,,92,-623,-623,-623,,,-623,-623,-623',
'158,-623,,,,,,,,,-623,-623,-623,,,,,,,,,-623,-623,,-623,-623,-623,-623',
'-623,,,,,,,,,,,,,,,,,,,,,,,,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,,,-623,-623,-623,,,-623,,273,-623,,,-623',
'-623,,-623,,-623,,-623,,-623,-623,-623,-623,-623,-623,-623,,-623,-623',
'-623,,,,,,,,,,,,-297,-623,-623,,-623,,-623,-297,-297,-297,,,-297,-297',
'-297,560,-297,557,556,555,564,558,,,,,-297,-297,,,,567,,,,,-297,-297',
',-297,-297,-297,-297,-297,,,,,,,,,,562,,,,,,,,,572,571,575,574,,-297',
'-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,,,-297',
'-297,-297,,,-297,,276,-297,,,-297,-297,,-297,568,-297,,-297,,-297,-297',
'-297,-297,-297,-297,-297,,-297,,-297,,,,,,,,,,,,-426,-297,-297,,-297',
',-297,-426,-426,-426,,,-426,-426,-426,560,-426,557,556,555,564,558,',
',,-426,-426,-426,,,,567,,,,,-426,-426,,-426,-426,-426,-426,-426,,,,',
',,,,,562,,,,,,,,,572,571,575,574,,-426,-426,-426,-426,-426,-426,-426',
'-426,-426,-426,-426,-426,-426,-426,,,-426,-426,-426,,,-426,,273,-426',
',,-426,-426,,-426,568,-426,,-426,,-426,-426,-426,-426,-426,-426,-426',
',-426,-426,-426,,,,,,,,,,,,-623,-426,-426,,-426,,-426,-623,-623,-623',
',,-623,-623,-623,560,-623,557,556,555,564,558,,,,-623,-623,,,,,567,',
',,,-623,-623,,-623,-623,-623,-623,-623,,,560,,557,556,555,564,558,562',
',560,,557,556,555,564,558,567,,575,574,,,,,,567,,,,,,,-623,,,,,,562',
'-623,,,,,273,-623,,562,,575,574,,568,,,,650,428,575,574,651,,,,,,-623',
'-623,,161,162,,157,139,140,141,148,145,147,,-623,142,143,568,,-623,163',
'164,149,150,,,568,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,652,435,,,653,,,,,,,,,161,162,158,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,485,428,',
',486,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,1033,435,,,1034,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,1031,428,,,1032,,',
',,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,560,165,557,556,555,564,558,,,681,428,,,682,,,567,,,,,158,161,162',
',157,139,140,141,148,145,147,,,142,143,,,562,163,164,149,150,,,,,,273',
'575,574,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,684,435,,,685,,568,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,560,165,557,556,555,564,558,560,,557',
'556,555,564,558,,,567,,,,,158,,567,560,,557,556,555,564,558,,,,,,,,562',
',567,,,,,562,,572,571,575,574,,,,,,575,574,,,,,562,,,,,,,,,572,571,575',
'574,222,,,650,428,,,651,568,,,,,,,568,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,568,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,652,435,,,653,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',560,165,557,556,555,564,558,560,,557,556,555,564,558,,,567,,,,,158',
',567,560,,557,556,555,564,558,,,,,,,,562,546,567,,,,,562,,572,571,575',
'574,,,,572,571,575,574,,,,560,562,557,556,555,564,558,,,,572,571,575',
'574,,,567,,,,,,568,,,,,,,568,,,,,,,,,562,424,428,,,425,,,568,,,575,574',
',161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,',
',,,,273,,,,,568,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',560,165,557,556,555,564,558,,,,,,,,,,567,,,,,158,,,,,,,,,560,,557,556',
'555,564,558,,562,431,435,,,430,,,567,572,571,575,574,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,562,163,164,149,150,,,,,,273,575,574',
',,568,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,',
',,,1003,435,,,1002,,568,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,560,165,557,556,555,564,558,560,,557,556',
'555,564,558,,,567,,,,,158,,567,,,,,,,,,,,,,,,562,,,,,,,562,753,485,428',
'575,574,486,,,572,571,575,574,,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,568,,,273,,,,568,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,855,435,,,856,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',560,165,557,556,555,564,558,,,735,428,,,736,,,567,,,,,158,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,562,163,164,149,150,,,,,,273',
'575,574,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,737,435,,,738,,568,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158' ]
        racc_action_table = arr = ::Array.new(26198, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'101,1046,383,927,905,1031,310,101,101,101,597,663,101,101,101,64,101',
'22,386,984,737,984,1032,61,101,676,101,101,101,853,1048,339,491,389',
'1033,852,101,101,676,101,101,101,101,101,340,29,696,20,20,696,346,854',
'347,22,350,738,545,589,61,735,736,750,750,383,383,383,491,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,386,581,101,101,101,737',
'101,101,582,3,101,787,310,101,101,389,101,663,101,13,101,64,101,101',
'101,101,101,101,101,29,101,1033,101,682,1046,597,927,905,1031,1046,738',
'927,905,1031,737,101,101,101,101,430,101,29,101,853,597,1032,430,430',
'430,597,1032,101,430,430,339,430,787,1033,852,339,854,852,1033,852,346',
'854,347,340,350,738,545,589,340,735,736,430,430,15,430,430,430,430,430',
'126,681,448,448,483,126,126,682,581,691,691,756,756,581,492,582,225',
'812,377,226,582,377,664,430,430,430,430,430,430,430,430,430,430,430',
'430,430,430,362,483,430,430,430,682,430,362,682,16,430,492,375,430,315',
'315,44,44,430,664,430,682,430,430,430,430,430,430,430,361,430,681,430',
'812,225,228,361,226,855,684,812,19,377,377,98,430,430,651,430,812,430',
'98,98,98,650,448,98,98,98,593,98,430,691,593,756,25,681,812,98,681,98',
'98,98,375,375,375,543,591,40,543,98,98,681,98,98,98,98,98,43,703,228',
'855,684,315,315,44,44,80,855,684,703,48,651,855,684,80,453,855,684,650',
'72,98,98,98,98,98,98,98,98,98,98,98,98,98,98,855,684,98,98,98,591,98',
'98,703,703,98,592,591,98,98,87,98,591,98,88,98,591,98,98,98,98,98,98',
'98,89,98,718,98,718,718,718,453,718,5,591,617,90,703,5,614,98,98,98',
'98,431,98,331,98,968,331,124,431,431,431,881,968,98,431,431,592,431',
'595,936,207,968,881,592,936,595,431,924,592,924,924,924,592,924,595',
'391,227,431,431,363,431,431,431,431,431,923,363,923,923,923,592,923',
'229,617,617,881,881,614,614,373,365,718,617,724,724,924,614,365,431',
'431,431,431,431,431,431,431,431,431,431,431,431,431,424,380,431,431',
'431,953,431,881,953,230,431,234,425,431,391,391,391,266,431,269,431',
'280,431,431,431,431,431,431,431,281,431,431,431,42,18,319,633,41,373',
'373,373,923,424,284,652,431,431,295,431,297,431,652,652,652,425,424',
'652,652,652,298,652,431,380,380,380,299,741,425,479,652,652,652,652',
'741,305,42,18,319,633,41,652,652,741,652,652,652,652,652,42,18,319,633',
'41,706,706,715,367,715,715,715,479,715,27,367,479,479,479,479,308,27',
'309,652,652,652,652,652,652,652,652,652,652,652,652,652,652,1017,1017',
'652,652,652,321,652,652,715,314,652,316,321,652,652,320,652,715,652',
'323,652,321,652,652,652,652,652,652,652,329,652,652,652,912,357,912',
'912,912,912,912,332,357,333,332,344,652,652,652,652,912,652,653,652',
'338,338,364,533,533,653,653,653,652,364,653,653,653,562,653,562,562',
'562,912,562,345,349,351,379,653,653,653,912,912,912,912,382,385,388',
'653,653,358,653,653,653,653,653,410,358,413,415,977,359,977,977,977',
'562,977,841,359,841,841,841,419,841,562,422,423,912,432,653,653,653',
'653,653,653,653,653,653,653,653,653,653,653,440,478,653,653,653,977',
'653,653,360,461,653,462,841,653,653,360,653,463,653,464,653,841,653',
'653,653,653,653,653,653,291,653,343,653,478,291,224,343,478,478,478',
'478,493,224,494,749,653,653,653,653,749,653,224,653,808,808,808,808',
'808,808,862,754,653,808,808,862,754,509,808,510,808,808,808,808,808',
'808,808,9,9,9,9,9,808,808,808,808,808,808,808,757,757,808,513,757,757',
'757,443,808,808,515,808,808,808,808,808,808,808,808,808,520,808,808',
'808,523,808,808,531,808,808,808,443,443,443,443,443,443,443,443,443',
'443,443,532,443,443,957,541,443,443,544,808,548,957,808,549,551,808',
'808,460,552,808,957,808,443,553,443,808,443,443,443,443,443,443,443',
'808,443,561,569,573,808,808,808,808,808,808,576,578,583,808,808,460',
'443,584,443,460,460,808,621,624,808,808,808,626,630,808,808,752,752',
'752,752,752,752,634,639,966,752,752,645,654,656,752,966,752,752,752',
'752,752,752,752,662,966,669,671,678,752,752,752,752,752,752,752,680',
'683,752,686,687,690,692,418,752,752,695,752,752,752,752,752,752,752',
'752,752,702,752,752,752,717,752,752,719,752,752,752,418,418,418,418',
'418,418,418,418,418,418,418,726,418,418,967,731,418,418,734,752,766',
'967,752,771,789,752,752,459,790,752,967,752,418,792,418,752,418,418',
'418,418,418,418,418,752,418,793,794,796,752,752,752,752,752,752,797',
'895,798,752,752,459,418,799,895,459,459,752,811,815,752,752,752,895',
'818,752,752,985,985,985,985,985,985,819,824,970,985,985,825,826,827',
'985,970,985,985,985,985,985,985,985,831,970,832,834,835,985,985,985',
'985,985,985,985,837,840,985,842,845,848,858,655,985,985,863,985,985',
'985,985,985,985,985,985,985,864,985,985,985,865,985,985,874,985,985',
'985,655,655,655,655,655,655,655,655,655,655,655,49,655,655,306,875,655',
'655,49,985,892,306,985,896,897,985,985,49,899,985,306,985,655,900,655',
'985,655,655,655,655,655,655,655,985,655,925,929,304,985,985,985,985',
'985,985,304,303,930,985,985,935,655,943,303,304,946,985,947,948,985',
'985,985,303,949,985,985,989,989,989,989,989,989,951,961,519,989,989',
'969,972,973,989,519,989,989,989,989,989,989,989,974,519,975,976,978',
'989,989,989,989,989,989,989,1002,893,989,893,893,893,1003,893,989,989',
'1005,989,989,989,989,989,989,989,989,989,1016,989,989,989,1021,989,989',
'1022,989,989,989,877,877,877,877,877,877,877,877,877,877,877,302,877',
'877,1009,1023,877,877,302,989,1024,1009,989,1025,1026,989,989,302,1027',
'989,1009,989,877,1030,877,989,877,877,877,877,877,877,877,989,877,1035',
'1036,856,989,989,989,989,989,989,856,685,1,989,989,856,877,,685,856',
',989,,685,989,989,989,685,,989,989,849,849,849,849,849,849,,,348,849',
'849,,,,849,348,849,849,849,849,849,849,849,,348,,,,849,849,849,849,849',
'849,849,,1001,849,1001,1001,1001,,1001,849,849,,849,849,849,849,849',
'849,849,849,849,,849,849,849,,849,849,,849,849,849,482,482,482,482,482',
'482,482,482,482,482,482,1034,482,482,17,,482,482,1034,849,,17,849,1034',
',849,849,1034,,849,17,849,482,,482,849,482,482,482,482,482,482,482,849',
'482,,,,849,849,849,849,849,849,,,,849,849,482,482,,,,,849,,,849,849',
'849,,,849,849,850,850,850,850,850,850,,,,850,850,,,,850,,850,850,850',
'850,850,850,850,508,508,508,508,508,850,850,850,850,850,850,850,,,850',
'675,675,675,675,675,850,850,,850,850,850,850,850,850,850,850,850,,850',
'850,850,,850,850,,850,850,850,529,529,529,529,529,529,529,529,529,529',
'529,,529,529,,,529,529,,850,,,850,,,850,850,,,850,,850,529,,529,850',
'529,529,529,529,529,529,529,850,529,,,,850,850,850,850,850,850,,,,850',
'850,,529,,,,,850,,,850,850,850,,,850,850,2,2,2,2,2,2,,,,2,2,,,,2,,2',
'2,2,2,2,2,2,293,293,293,293,293,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2',
'2,2,2,2,2,,2,2,2,,2,2,,2,2,2,689,689,689,689,689,689,689,689,689,689',
'689,,689,689,,,689,689,,2,,,2,,,2,2,,,2,,2,689,,689,2,689,689,689,689',
'689,689,689,2,689,,,,2,2,2,2,2,2,,,,2,2,,689,,,,,2,,,2,2,2,,,2,2,209',
'209,209,209,209,209,,,,209,209,,,,209,,209,209,209,209,209,209,209,',
',,,,209,209,209,209,209,209,209,,,209,,,,,,209,209,,209,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,880,880,880,880',
'880,880,880,880,880,880,880,,880,880,,,880,880,,209,,,209,,,209,209',
',,209,,209,880,,880,209,880,880,880,880,880,880,880,209,880,,,,209,209',
'209,209,209,209,,,,209,209,,880,,,,,209,,,209,209,209,,,209,209,898',
'898,898,898,898,898,,,,898,898,,,,898,,898,898,898,898,898,898,898,',
',,,,898,898,898,898,898,898,898,,,898,,,,,,898,898,,898,898,898,898',
'898,898,898,898,898,,898,898,898,,898,898,,898,898,898,773,773,773,773',
'773,773,773,773,773,773,773,,773,773,,,773,773,,898,,,898,,,898,898',
',,898,,898,773,,773,898,773,773,773,773,773,773,773,898,773,,,,898,898',
'898,898,898,898,,,,898,898,,773,,,,,898,,,898,898,898,,,898,898,817',
'817,817,817,817,817,,,,817,817,,,,817,,817,817,817,817,817,817,817,',
',,,,817,817,817,817,817,817,817,,,817,,,,,,817,817,,817,817,817,817',
'817,817,817,817,817,,817,817,817,,817,817,,817,817,817,768,768,768,768',
'768,768,768,768,768,768,768,,768,768,,,768,768,,817,,,817,,,817,817',
',,817,,817,768,,768,817,768,768,768,768,768,768,768,817,768,,,,817,817',
'817,817,817,817,,,,817,817,,768,,,,,817,,,817,817,817,,,817,817,700',
'700,700,700,700,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,',
',,,,700,700,700,700,700,700,700,,,700,,,,,,700,700,,700,700,700,700',
'700,700,700,700,700,,700,700,700,,700,700,,700,700,700,775,775,775,775',
'775,775,775,775,775,775,775,,775,775,,,775,775,,700,,,700,,,700,700',
',,700,,700,775,,775,700,775,775,775,775,775,775,775,700,775,,,,700,700',
'700,700,700,700,,,,700,700,,775,,,,,700,,,700,700,700,,,700,700,902',
'902,902,902,902,902,,,,902,902,,,,902,,902,902,902,902,902,902,902,',
',,,,902,902,902,902,902,902,902,,,902,,,,,,902,902,,902,902,902,902',
'902,902,902,902,902,,902,902,902,,902,902,,902,902,902,438,438,438,438',
'438,438,438,438,438,438,438,,438,438,,,438,438,,902,,,902,,,902,902',
',,902,,902,438,,438,902,438,438,438,438,438,438,438,902,438,,,,902,902',
'902,902,902,902,,,,902,902,,438,,,,,902,,,902,902,902,,,902,902,980',
'980,980,980,980,980,,,,980,980,,,,980,,980,980,980,980,980,980,980,',
',,,,980,980,980,980,980,980,980,,,980,,,,,,980,980,,980,980,980,980',
'980,980,980,980,980,,980,980,980,,980,980,,980,980,980,778,778,778,778',
'778,778,778,778,778,778,778,,778,778,,,778,778,,980,,,980,,,980,980',
',,980,,980,778,,778,980,778,778,778,778,778,778,778,980,778,,,,980,980',
'980,980,980,980,,,,980,980,,778,,,,,980,,,980,980,980,,,980,980,404',
'404,404,404,404,404,,,,404,404,,,,404,,404,404,404,404,404,404,404,',
',,,,404,404,404,404,404,404,404,,,404,,,,,,404,404,404,404,404,404,404',
'404,404,404,404,404,,404,404,404,,404,404,,404,404,404,780,780,780,780',
'780,780,780,780,780,780,780,,780,780,,,780,780,,404,,,404,,,404,404',
',,404,,404,780,,780,404,780,780,780,780,780,780,780,404,780,,,,404,404',
'404,404,404,404,,,,404,404,,780,,,,,404,,,404,404,404,,,404,404,233',
'233,233,233,233,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,',
',,,,233,233,233,233,233,233,233,,,233,,,,,,233,233,,233,233,233,233',
'233,233,233,233,233,,233,233,233,,233,233,,233,233,233,782,782,782,782',
'782,782,782,782,782,782,782,,782,782,,,782,782,,233,,,233,,,233,233',
',,233,,233,782,,782,233,782,782,782,782,782,782,782,233,782,,,,233,233',
'233,233,233,233,,,,233,233,,782,,,,,233,,,233,233,233,,,233,233,965',
'965,965,965,965,965,,,,965,965,,,,965,,965,965,965,965,965,965,965,',
',,,,965,965,965,965,965,965,965,,,965,,,,,,965,965,,965,965,965,965',
'965,965,965,965,965,,965,965,965,,965,965,,965,965,965,24,24,24,24,24',
'24,24,24,24,24,24,,24,24,,,24,24,,965,,,965,,,965,965,,,965,,965,24',
',24,965,24,24,24,24,24,24,24,965,24,,,,965,965,965,965,965,965,,,,965',
'965,,24,,,,,965,,,965,965,965,,,965,965,326,326,326,326,326,326,,,,326',
'326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326,326,326,326,326',
'326,,,326,,,,,,326,326,,326,326,326,326,326,326,326,326,326,,326,326',
'326,,326,326,,326,326,326,278,278,278,278,278,278,278,278,278,278,278',
',278,278,,,278,278,,326,,,326,,,326,326,,,326,,326,278,,278,326,278',
'278,278,278,278,278,278,326,278,,,,326,326,326,326,326,326,,,,326,326',
',278,,,,,326,,,326,326,326,,,326,326,301,301,301,301,301,301,,,,301',
'301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301,301,301,301',
'301,,1015,301,1015,1015,1015,,1015,301,301,,301,301,301,301,301,301',
'301,301,301,,301,301,301,,301,301,,301,301,301,469,,,,,,,843,1015,843',
'843,843,,843,,,469,469,,301,,,301,,467,301,301,,,301,,301,469,,469,301',
'469,469,469,469,467,467,469,301,469,843,,,301,301,301,301,301,301,,',
'467,301,301,,467,467,467,467,,301,,,301,301,301,,,301,301,859,859,859',
'859,859,859,,,,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859',
'859,859,859,859,859,859,,979,859,979,979,979,,979,859,859,,859,859,859',
'859,859,859,859,859,859,,859,859,859,,859,859,,859,859,859,471,,,,,',
',,979,,,,,,,,471,471,,859,,,859,,,859,859,,,859,,859,471,,471,859,471',
'471,471,471,,,471,859,471,,,,859,859,859,859,859,859,,,,859,859,,,,',
',,859,,,859,859,859,,,859,859,577,577,577,577,577,577,,,,577,577,,,',
'577,,577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,',
'577,,,,,,577,577,,577,577,577,577,577,577,577,577,577,,577,577,577,',
'577,577,,577,577,577,472,,,,,,,,,,,,,,,,472,472,,577,,,577,,,577,577',
',,577,,577,472,,472,577,472,472,472,472,,,472,577,472,,,,577,577,577',
'577,577,577,,,,577,577,,,,,,,577,,,577,577,577,,,577,577,580,580,580',
'580,580,580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,,,580',
'580,580,580,580,580,580,,,580,,,,,,580,580,,580,580,580,580,580,580',
'580,580,580,,580,580,580,,580,580,,580,580,580,473,473,473,473,473,473',
'473,,,473,473,,,,,,473,473,,580,,,580,,,580,580,,,580,,580,473,,473',
'580,473,473,473,473,473,473,473,580,473,,,,580,580,580,580,580,580,',
',,580,580,,,,,,,580,,,580,580,580,,,580,580,751,751,751,751,751,751',
',,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751',
'751,751,751,,,751,,,,,,751,751,,751,751,751,751,751,751,751,751,751',
',751,751,751,,751,751,,751,751,751,474,474,474,474,474,474,474,,,474',
'474,,,,,,474,474,,751,,,751,,,751,751,,,751,,751,474,,474,751,474,474',
'474,474,474,474,474,751,474,,,,751,751,751,751,751,751,,,,751,751,,',
',,,,751,,,751,751,751,,,751,751,932,932,932,932,932,932,,,,932,932,',
',,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932,932',
',,932,,,,,,932,932,,932,932,932,932,932,932,932,932,932,,932,932,932',
',932,932,,932,932,932,475,475,475,475,475,475,475,,,475,475,,,,,,475',
'475,,932,,,932,,,932,932,,,932,,932,475,,475,932,475,475,475,475,475',
'475,475,932,475,,,,932,932,932,932,932,932,,,,932,932,,,,,,,932,,,932',
'932,932,,,932,932,988,988,988,988,988,988,,,,988,988,,,,988,,988,988',
'988,988,988,988,988,,,,,,988,988,988,988,988,988,988,,,988,,,,,,988',
'988,,988,988,988,988,988,988,988,988,988,,988,988,988,,988,988,,988',
'988,988,476,476,476,476,476,476,476,,,476,476,,,,,,476,476,,988,,,988',
',,988,988,,,988,,988,476,,476,988,476,476,476,476,476,476,476,988,476',
',,,988,988,988,988,988,988,,,,988,988,,,,,,,988,,,988,988,988,,,988',
'988,701,701,701,701,701,701,,,,701,701,,,,701,,701,701,701,701,701,701',
'701,,,,,,701,701,701,701,701,701,701,,,701,,,,,,701,701,,701,701,701',
'701,701,701,701,701,701,,701,701,701,,701,701,,701,701,701,477,477,477',
'477,477,477,477,,,477,477,,,,,,477,477,,701,,,701,,,701,701,,,701,,701',
'477,,477,701,477,477,477,477,477,477,477,701,477,,,,701,701,701,701',
'701,701,,,,701,701,,,,,,,701,,,701,701,701,,,701,701,758,758,758,758',
'758,758,,,,758,758,,,,758,,758,758,758,758,758,758,758,,,,,,758,758',
'758,758,758,758,758,,,758,,,,,,758,758,,758,758,758,758,758,758,758',
'758,758,,758,758,758,,758,758,,758,758,758,458,458,458,458,458,458,458',
'458,458,458,458,,458,458,,,458,458,,758,,,758,,,758,758,,,758,,758,458',
',458,758,458,458,458,458,458,458,458,758,458,,,,758,758,758,758,758',
'758,,,,758,758,,,,,,,758,,,758,758,758,,,758,758,36,36,36,36,36,36,',
',,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,',
',,,,36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,457',
'457,457,457,457,457,457,457,457,457,457,,457,457,,,457,457,,36,,,36',
',,36,36,,,36,,36,457,,457,36,457,457,457,457,457,457,457,36,457,,,,36',
'36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36,296,296,296,296',
'296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296',
'296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296,296,296,296',
'296,296,,296,296,296,,296,296,,296,296,296,480,480,480,480,480,480,480',
',,480,480,,,,,,480,480,,296,,,296,,,296,296,,,296,,296,480,,480,296',
'480,480,480,480,480,480,480,296,480,,,,296,296,296,296,296,296,,,,296',
'296,,,,,,,296,,,296,296,296,,,296,296,803,803,803,803,803,803,,,,803',
'803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803,803,803',
'803,,,803,,,,,,803,803,,803,803,803,803,803,803,803,803,803,,803,803',
'803,,803,803,,803,803,803,481,481,481,481,481,481,481,481,,481,481,',
',,,,481,481,,803,,,803,,,803,803,,,803,,803,481,,481,803,481,481,481',
'481,481,481,481,803,481,,,,803,803,803,803,803,803,,,,803,803,,,,,,',
'803,,,803,803,803,,,803,803,807,807,807,807,807,807,,,,807,807,,,,807',
',807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807',
',,,,,807,807,,807,807,807,807,807,807,807,807,807,,807,807,807,,807',
'807,,807,807,807,468,468,468,468,468,468,468,,,468,468,,,,,,468,468',
',807,,,807,,,807,807,,,807,,807,468,,468,807,468,468,468,468,468,468',
'468,807,468,,,,807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807',
'807,,,807,807,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283',
'283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283',
'283,283,283,283,283,,283,283,283,,283,283,,283,283,283,470,,,,,,,,,',
',,,,,,470,470,,283,,,283,,,283,283,,,283,,,470,,470,283,470,470,470',
'470,,,470,283,470,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283,,',
'283,283,283,,,283,283,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34',
'34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34',
'34,34,34,34,,34,34,,34,34,34,465,,,,,,,,,,,,,,,,465,465,,34,,,34,,,34',
'34,,,34,,34,465,34,465,34,465,465,465,465,,,,34,,,,,34,34,34,34,34,34',
',,,34,34,,,,,,,34,,34,34,34,34,,,34,34,285,285,285,,285,,,,285,285,',
',,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285',
',,285,,,,,,,285,,,285,285,285,285,285,285,285,285,,285,285,285,,285',
'285,,285,285,285,466,,,,,,,,,,,,,,,,466,466,,285,,,285,,,285,285,,,285',
',,466,,466,285,466,466,466,466,,,,285,,,,,285,285,285,285,285,285,,',
',285,285,,,,,,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287,287',
',,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287',
',,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,,287',
'287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287',
',,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,,,287,287',
'287,,,287,287,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288',
'288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288',
'288,288,288,288,288,,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,',
',,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288',
'288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288,243,243,243',
',243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243',
'243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243',
'243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243',
',,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,',
',,,243,,,243,243,243,,,243,243,294,294,294,294,294,,,,294,294,,,,294',
',294,294,294,294,294,294,294,,,,,,294,294,294,294,294,294,294,,,294',
',,,,,294,294,,294,294,294,294,294,294,294,294,294,,294,294,294,,294',
'294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294,,294,',
',,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294,294,,,,,,,294,,',
'294,294,294,,,294,294,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37',
'37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37',
',37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,',
',,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37',
'242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,',
',242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242',
'242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,',
'242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242',
',,,242,242,,,,,,,242,,,242,242,242,,,242,242,38,38,38,,38,,,,38,38,',
',,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,',
',38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38',
',,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38',
',,38,,,38,38,38,,,38,38,677,677,677,,677,,,,677,677,,,,677,,677,677',
'677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677',
',,677,677,677,677,677,677,677,677,,677,677,677,,677,677,,,,677,,,,,',
',,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,,,,,,,,,,,,,,677,677,677',
'677,677,677,,,,677,677,,,,,,,677,,,677,677,677,,,677,677,847,847,847',
',847,,,,847,847,,,,847,,847,847,847,847,847,847,847,,,,,,847,847,847',
'847,847,847,847,,,847,,,,,,,847,,,847,847,847,847,847,847,847,847,,847',
'847,847,,847,847,,847,847,847,,,,,,,,,,,,,,,,,,,,847,,,847,,,847,847',
',,847,,,,,,847,,,,,,,,847,,,,,847,847,847,847,847,847,,,,847,847,,,',
',,,847,,,847,847,847,,,847,847,300,300,300,,300,,,,300,300,,,,300,,300',
'300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,',
',300,,,300,300,300,300,300,300,300,300,,300,300,300,,300,300,,,,300',
',,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,,,,,,,,,,,,,,300,300',
'300,300,300,300,,,,300,300,,,,300,,,300,,,300,300,300,,,300,300,739',
'739,739,,739,,,,739,739,,,,739,,739,739,739,739,739,739,739,,,,,,739',
'739,739,739,739,739,739,,,739,,,,,,,739,,,739,739,739,739,739,739,739',
'739,,739,739,739,,739,739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739',
',,739,739,,,739,,,,,,739,,,,,,,,739,,,,,739,739,739,739,739,739,,,,739',
'739,,,,,,,739,,,739,739,739,,,739,739,255,255,255,,255,,,,255,255,,',
',255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,',
',255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255',
',255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,',
',,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255',
'255,,,255,255,672,672,672,,672,,,,672,672,,,,672,,672,672,672,672,672',
'672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672,672,672',
'672,672,672,672,672,,672,672,672,,672,672,,672,672,672,,,,,,,,,,,,,',
',,,,,,672,,,672,,,672,672,,,672,,,,,,672,,,,,,,,672,,,,,672,672,672',
'672,672,672,,,,672,672,,,,,,,672,,,672,672,672,,,672,672,241,241,241',
',241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241',
'241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241',
'241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241',
',,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,',
',,,241,,,241,241,241,,,241,241,860,860,860,,860,,,,860,860,,,,860,,860',
'860,860,860,860,860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,',
',860,,,860,860,860,860,860,860,860,860,,860,860,860,,860,860,,860,860',
'860,,,,,,,,,,,,,,,,,,,,860,,,860,,,860,860,,,860,,,,,,860,,,,,,,,860',
',,,,860,860,860,860,860,860,,,,860,860,,,,,,,860,,,860,860,860,,,860',
'860,240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240',
',,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240',
'240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240',
',,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,,,,,,,240,,,240,240,240,,,240,240,239,239,239,,239,,,,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,',
',239,239,239,,,239,239,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,237',
'237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,,,,,,,237,,,237,237,237,,,237,237,648,648,648,,648,,,,648,648,,',
',648,,648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,',
',648,,,,,,,648,,,648,648,648,648,648,648,648,648,,648,648,648,,648,648',
',648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,',
',,,,,,648,,,,,648,648,648,648,648,648,,,,648,648,,,,,,,648,,,648,648',
'648,,,648,648,878,878,878,,878,,,,878,878,,,,878,,878,878,878,878,878',
'878,878,,,,,,878,878,878,878,878,878,878,,,878,,,,,,,878,,,878,878,878',
'878,878,878,878,878,878,878,878,878,,878,878,,878,878,878,,,,,,,,,,',
',,,,,,,,,878,,,878,,,878,878,,,878,,,,878,,878,,,,,,,,878,,,,,878,878',
'878,878,878,878,,,,878,878,,,,,,,878,,878,878,878,878,,,878,878,879',
'879,879,,879,,,,879,879,,,,879,,879,879,879,879,879,879,879,,,,,,879',
'879,879,879,879,879,879,,,879,,,,,,,879,,,879,879,879,879,879,879,879',
'879,,879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879,,,879',
',,879,879,,,879,,,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879,,,,879',
'879,,,,,,,879,,,879,879,879,,,879,879,647,647,647,,647,,,,647,647,,',
',647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647,647,647,',
',647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647,647,,647,647',
',647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,,,,,647,',
',,,,,,647,,,,,647,647,647,647,647,647,,,,647,647,,,,,,,647,,,647,647',
'647,,,647,647,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,',
',,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236',
'236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,644,644,644',
',644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644,644',
'644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644',
'644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644',
',,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,,,',
',,,644,,,644,644,644,,,644,644,643,643,643,,643,,,,643,643,,,,643,,643',
'643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,',
',643,,,643,643,643,643,643,643,643,643,,643,643,643,,643,643,,643,643',
'643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,,,,,643,,,,,,,,643',
',,,,643,643,643,643,643,643,,,,643,643,,,,,,,643,,,643,643,643,,,643',
'643,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235',
',,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235',
',,,235,235,,,,,,,235,,,235,235,235,,,235,235,638,638,638,,638,,,,638',
'638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638',
'638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,',
'638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,',
',,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,',
',638,638,638,,,638,638,637,637,637,,637,,,,637,637,,,,637,,637,637,637',
'637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637',
'637,637,637,637,637,637,637,,637,637,637,,637,637,,637,637,637,,,,,',
',,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637',
'637,637,637,637,637,,,,637,637,,,,,,,637,,,637,637,637,,,637,637,894',
'894,894,,894,,,,894,894,,,,894,,894,894,894,894,894,894,894,,,,,,894',
'894,894,894,894,894,894,,,894,,,,,,,894,,,894,894,894,894,894,894,894',
'894,,894,894,894,,894,894,,,,894,,,,,,,,,,,,,,,,,,,,894,,,894,,,894',
'894,,,894,,,,,,,,,,,,,,,,,,,894,894,894,894,894,894,,,,894,894,,,,,',
',894,,,894,894,894,,,894,894,636,636,636,,636,,,,636,636,,,,636,,636',
'636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,',
',636,,,636,636,636,636,636,636,636,636,636,636,636,636,,636,636,,636',
'636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,,,636,,636,,,',
',,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,636,636,636',
'636,,,636,636,635,635,635,,635,,,,635,635,,,,635,,635,635,635,635,635',
'635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635',
'635,635,635,635,635,635,635,635,635,,635,635,,635,635,635,,,,,,,,,,',
',,,,,,,,,635,,,635,,,635,635,,,635,,635,,635,,635,,,,,,,,635,,,,,635',
'635,635,635,635,635,,,,635,635,,,,,,,635,,635,635,635,635,,,635,635',
'632,632,632,,632,,,,632,632,,,,632,,632,632,632,632,632,632,632,,,,',
',632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632,632',
'632,632,,632,632,632,,632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,',
'632,,,632,632,,,632,,,,,,632,,,,,,,,632,,,,,632,632,632,632,632,632',
',,,632,632,,,,,,,632,,,632,632,632,,,632,632,631,631,631,,631,,,,631',
'631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631,631,631,631,631',
'631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631,,631,631,631,',
'631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,631',
',,,631,,,,,,,,631,,,,,631,631,631,631,631,631,,,,631,631,,,,,,,631,',
',631,631,631,,,631,631,906,906,906,,906,,,,906,906,,,,906,,906,906,906',
'906,906,906,906,,,,,,906,906,906,906,906,906,906,,,906,,,,,,,906,,,906',
'906,906,906,906,906,906,906,,906,906,906,,906,906,,,,906,,,,,,,,,,,',
',,,,,,,,906,,,906,,,906,906,,,906,,,,,,,,,,,,,,,,,,,906,906,906,906',
'906,906,,,,906,906,,,,,,,906,,,906,906,906,,,906,906,232,232,232,,232',
',,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232',
'232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232',
'232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232',
',,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232',
',,232,232,232,,,232,232,602,602,602,,602,,,,602,602,,,,602,,602,602',
'602,602,602,602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602',
',,602,602,602,602,602,602,602,602,,602,602,602,,602,602,,602,602,602',
',,,,,,,,,,,,,,,,,,,602,,,602,,,602,602,,,602,,,,,,602,,,,,,,,602,,,',
',602,602,602,602,602,602,,,,602,602,,,,,,,602,,,602,602,602,,,602,602',
'598,598,598,,598,,,,598,598,,,,598,,598,598,598,598,598,598,598,,,,',
',598,598,598,598,598,598,598,,,598,,,,,,,598,,,598,598,598,598,598,598',
'598,598,,598,598,598,,598,598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,',
'598,,,598,598,,,598,,,,,,598,,,,,,,,598,,,,,598,598,598,598,598,598',
',,,598,598,,,,,,,598,,,598,598,598,,,598,598,45,45,45,,45,,,,45,45,',
',,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,',
',45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,',
',,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45',
'45,,,,,,,45,,,45,45,45,,,45,45,317,317,317,,317,,,,317,317,,,,317,,317',
'317,317,317,317,317,317,,,,,,317,317,317,317,317,317,317,,,317,,,,,',
',317,,,317,317,317,317,317,317,317,317,,317,317,317,,317,317,,,,317',
',,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317,,,,,,,,,,,,,,,,,,,317,317',
'317,317,317,317,,,,317,317,,,,,,,317,,,317,317,317,,,317,317,931,931',
'931,,931,,,,931,931,,,,931,,931,931,931,931,931,931,931,,,,,,931,931',
'931,931,931,931,931,,,931,,,,,,,931,,,931,931,931,931,931,931,931,931',
',931,931,931,,931,931,,931,931,931,,,,,,,,,,,,,,,,,,,,931,,,931,,,931',
'931,,,931,,931,,,,931,,,,,,,,931,,,,,931,931,931,931,931,931,,,,931',
'931,,,,,,,931,,,931,931,931,,,931,931,46,46,46,,46,,,,46,46,,,,46,,46',
'46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46',
'46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46',
',,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,',
'46,,,46,46,46,,,46,46,586,586,586,,586,,,,586,586,,,,586,,586,586,586',
'586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,,,586,,,586',
'586,586,586,586,586,586,586,586,586,586,586,,586,586,,586,586,586,,',
',,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,586,,586,,586,,,,,,,,586',
',,,,586,586,586,586,586,586,,,,586,586,,,,,,,586,,586,586,586,586,,',
'586,586,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119',
'119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119',
'119,119,119,119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,',
',,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119',
'119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119,119,66,66,66,,66,,',
',66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,',
',,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,',
',,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66',
'66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,',
',67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,',
',,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70',
'70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70',
'70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70',
',,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70',
'70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,',
',,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,253,253',
'253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253',
'253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253',
',253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253',
'253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253',
',,,,,,253,,,253,253,253,,,253,253,252,252,252,,252,,,,252,252,,,,252',
',252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252',
',,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252',
'252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,',
',252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252',
',,252,252,251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251',
'251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251',
'251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,',
',,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251',
'251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,713,713,713,,713',
',,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,,713,713,713,713',
'713,713,713,,,713,,,,,,,713,,,713,713,713,713,713,713,713,713,,713,713',
'713,,713,713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713,,,713',
',,,,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,,713,713,,,,,,,713',
',,713,713,713,,,713,713,250,250,250,,250,,,,250,250,,,,250,,250,250',
'250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250',
',,250,250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250',
',,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,',
',250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250',
'256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,',
',256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256',
'256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,',
'256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256',
',,,256,256,,,,,,,256,,,256,256,256,,,256,256,767,767,767,,767,,,,767',
'767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767,767,767,767',
'767,,,767,,,,,,,767,,,767,767,767,767,767,767,767,767,,767,767,767,',
'767,767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767,,',
',,,767,,,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767,,,,,,,767,',
',767,767,767,,,767,767,769,769,769,,769,,,,769,769,,,,769,,769,769,769',
'769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,,,769,,,769',
'769,769,769,769,769,769,769,,769,769,769,,769,769,,769,769,769,,,,,',
',,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,769,,,,,769',
'769,769,769,769,769,,,,769,769,,,,,,,769,,,769,769,769,,,769,769,257',
'257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257',
'257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257',
'257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257',
',,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257',
'257,,,,,,,257,,,257,257,257,,,257,257,249,249,249,,249,,,,249,249,,',
',249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,',
',249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249',
',249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,',
',,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249',
'249,,,249,249,693,693,693,,693,,,,693,693,,,,693,,693,693,693,693,693',
'693,693,,,,,,693,693,693,693,693,693,693,,,693,,,,,,,693,,,693,693,693',
'693,693,693,693,693,,693,693,693,,693,693,,693,693,693,,,,,,,,,,,,,',
',,,,,,693,,,693,,,693,693,,,693,,693,,,,693,,,,,,,,693,,,,,693,693,693',
'693,693,693,,,,693,693,,,,,,,693,,,693,693,693,,,693,693,248,248,248',
',248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,,,248,248,247,247,247,,247,,,,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247',
',,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247',
'247,688,688,688,,688,,,,688,688,,,,688,,688,688,688,688,688,688,688',
',,,,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688',
'688,688,688,,688,688,688,,688,688,,,,688,,,,,,,,,,,,,,,,,,,,688,,,688',
',,688,688,,,688,,,,,,,,,,,,,,,,,,,688,688,688,688,688,688,,,,688,688',
',,,,,,688,,,688,688,688,,,688,688,783,783,783,,783,,,,783,783,,,,783',
',783,783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783',
',,,,,,783,,,783,783,783,783,783,783,783,783,,783,783,783,,783,783,,783',
'783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,,,,,783,,,,,,',
',783,,,,,783,783,783,783,783,783,,,,783,783,,,,,,,783,,,783,783,783',
',,783,783,784,784,784,,784,,,,784,784,,,,784,,784,784,784,784,784,784',
'784,,,,,,784,784,784,784,784,784,784,,,784,,,,,,,784,,,784,784,784,784',
'784,784,784,784,,784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,',
',,784,,,784,,,784,784,,,784,,,,,,784,,,,,,,,784,,,,,784,784,784,784',
'784,784,,,,784,784,,,,,,,784,,,784,784,784,,,784,784,785,785,785,,785',
',,,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785',
'785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785',
'785,,785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785',
',,,,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785',
',,785,785,785,,,785,785,786,786,786,,786,,,,786,786,,,,786,,786,786',
'786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786',
',,786,786,786,786,786,786,786,786,,786,786,786,,786,786,,786,786,786',
',,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,786,,,',
',786,786,786,786,786,786,,,,786,786,,,,,,,786,,,786,786,786,,,786,786',
'246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,',
',246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246',
'246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,',
'246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246',
',,,246,246,,,,,,,246,,,246,246,246,,,246,246,788,788,788,,788,,,,788',
'788,,,,788,,788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788',
'788,,,788,,,,,,,788,,,788,788,788,788,788,788,788,788,,788,788,788,',
'788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,',
',,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,,,,,,,788,',
',788,788,788,,,788,788,258,258,258,,258,,,,258,258,,,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,',
',,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258',
'258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259',
'259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259',
'259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259',
'259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259',
',,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259',
'259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,',
',260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,',
',260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260',
',260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,',
',,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260',
'260,,,260,260,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,',
',,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245,245,267,267,267',
',267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267',
'267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267',
'267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267',
'267,,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267',
'267,,,,,,,267,,267,267,267,267,,,267,267,273,273,273,,273,,,,273,273',
',,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273',
',,273,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273',
'273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,',
'273,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,,,,273',
',273,273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276,,276,276',
'276,276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276',
',,276,276,276,276,276,276,276,276,276,276,276,276,,276,276,,276,276',
'276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,',
',,,276,,,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276,,276,276',
'276,276,,,276,276,800,800,800,,800,,,,800,800,,,,800,,800,800,800,800',
'800,800,800,,,,,,800,800,800,800,800,800,800,,,800,,,,,,,800,,,800,800',
'800,800,800,800,800,800,,800,800,800,,800,800,,,,800,,,,,,,,,,,,,,,',
',,,,800,,,800,,,800,800,,,800,,,,,,,,,,,,,,,,,,,800,800,800,800,800',
'800,,,,800,800,,,,,,,800,,,800,800,800,,,800,800,244,244,244,,244,,',
',244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244',
'244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244',
',244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,',
',,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244',
',,244,244,244,,,244,244,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32',
'32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32',
'32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,',
',32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32',
'32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,',
',,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33',
'33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33',
',33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33',
'33,,,33,33,516,516,516,,516,,,,516,516,,,,516,,516,516,516,516,516,516',
'516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516,516',
'516,516,516,516,516,516,516,516,,516,516,,516,516,516,,,,,,,,,,,,,,',
',,,,,516,,,516,,,516,516,,,516,,516,,516,,516,,,,,,,,516,,,,,516,516',
'516,516,516,516,,,,516,516,,,,,,,516,,516,516,516,516,,,516,516,514',
'514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514',
'514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514,514,514,514',
'514,,514,514,514,,514,514,,,,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514',
'514,,,514,,,,,,,,,,,,,,,,,,,514,514,514,514,514,514,,,,514,514,,,,,',
',514,,,514,514,514,,,514,514,123,123,123,123,123,,,,123,123,,,,123,',
'123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,',
',,,,123,123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123',
',123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123',
',,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123',
'123,,,123,123,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341',
'341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341',
'341,341,341,341,341,,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,',
',,,,,,341,,,341,,,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341',
'341,341,341,,,,341,341,,,,,,,341,,,341,341,341,,,341,341,342,342,342',
',342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342',
'342,342,,342,342,,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342',
',,342,,,,,,342,,,,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,',
',,,342,,,342,342,342,,,342,342,122,122,122,,122,,,,122,122,,,,122,,122',
'122,122,122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,',
',122,,,122,122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122',
'122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122',
',,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122',
'122,1006,1006,1006,,1006,,,,1006,1006,,,,1006,,1006,1006,1006,1006,1006',
'1006,1006,,,,,,1006,1006,1006,1006,1006,1006,1006,,,1006,,,,,,,1006',
',,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,,1006',
'1006,,1006,1006,1006,,,,,,,,,,,,,,,,,,,,1006,,,1006,,,1006,1006,,,1006',
',1006,,1006,,1006,,,,,,,,1006,,,,,1006,1006,1006,1006,1006,1006,,,,1006',
'1006,,,,,,,1006,,1006,1006,1006,1006,,,1006,1006,507,507,507,507,507',
',,,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507',
'507,507,507,,,507,,,,,,507,507,,507,507,507,507,507,507,507,507,507',
',507,507,507,,507,507,,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507',
'507,,,507,,507,,,,507,,,,,,,,507,,,,,507,507,507,507,507,507,,,,507',
'507,,,,,,507,507,,,507,507,507,,,507,507,502,502,502,,502,,,,502,502',
',,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502',
',,502,,,,,,,502,,,502,502,502,502,502,502,502,502,,502,502,502,,502',
'502,,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,,,,,502',
',,,,,,,502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,,502,502',
'502,,,502,502,500,500,500,,500,,,,500,500,,,,500,,500,500,500,500,500',
'500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500',
'500,500,500,500,500,500,500,500,500,,500,500,,500,500,500,,,,,,,,,,',
',,,,,,,,,500,,,500,,,500,500,,,500,,,,500,,500,,,,,,,,500,,,,,500,500',
'500,500,500,500,,,,500,500,,,,,,,500,,500,500,500,500,,,500,500,497',
'497,497,,497,,,,497,497,,,,497,,497,497,497,497,497,497,497,,,,,,497',
'497,497,497,497,497,497,,,497,,,,,,,497,,,497,497,497,497,497,497,497',
'497,497,497,497,497,,497,497,,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497',
',,497,497,,,497,,497,,497,,497,,,,,,,,497,,,,,497,497,497,497,497,497',
',,,497,497,,,,,,,497,,497,497,497,497,,,497,497,121,121,121,,121,,,',
'121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121',
'121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121',
',121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,',
',,,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121',
',,121,121,121,,,121,121,120,120,120,,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120',
',,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120,120',
',,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,',
',120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120,120',
'733,733,733,,733,,,,733,733,,,,733,,733,733,733,733,733,733,733,,,,',
',733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733',
'733,733,,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,',
'733,,,733,733,,,733,,733,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733',
',,,733,733,,,,,,,733,,,733,733,733,,,733,733,254,254,254,,254,,,,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,',
',254,254,254,,,254,254,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8',
'8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,',
',,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8',
',,,,,,8,,,8,8,8,,,8,8,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62',
'62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62',
'62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62',
',62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62',
'62,,,62,62,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745,745',
'745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745,745,745',
'745,745,745,745,745,745,745,745,,745,745,,745,745,745,,,,,,,,,,,,,,',
',,,,,745,,,745,,,745,745,,,745,,745,,745,,745,,,,,,,,745,,,,,745,745',
'745,745,745,745,,,,745,745,,,,,,,745,,745,745,745,745,,,745,745,114',
'114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,',
'114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,',
',,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114',
'114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,354,354,354',
',354,,,,354,354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354',
'354,354,354,354,,,354,,,,,,,354,,,354,354,354,354,354,354,354,354,,354',
'354,354,,354,354,,,,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354',
',,,,,,,,,,,,,,,,,,354,354,354,354,354,354,,,,354,354,,,,,,,354,,,354',
'354,354,,,354,354,356,356,356,,356,,,,356,356,,,,356,,356,356,356,356',
'356,356,356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,,356,,,356,356',
'356,356,356,356,356,356,,356,356,356,,356,356,,,,356,,,,,,,,,,,,,,,',
',,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356,356,356,356',
'356,,,,356,356,,,,,,,356,,,356,356,356,,,356,356,456,456,456,,456,,',
',456,456,,,,456,,456,456,456,456,456,456,456,,,,,,456,456,456,456,456',
'456,456,,,456,,,,,,,456,,,456,456,456,456,456,456,456,456,,456,456,456',
',456,456,,456,456,456,,,,,,,,,,,,,,,,,,,,456,,,456,,,456,456,,,456,',
',,,,456,,,,,,,,456,,,,,456,456,456,456,456,456,,,,456,456,,,,,,,456',
',,456,456,456,,,456,456,455,455,455,,455,,,,455,455,,,,455,,455,455',
'455,455,455,455,455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455',
',,455,455,455,455,455,455,455,455,,455,455,455,,455,455,,455,455,455',
',,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,,,,,455,,,,,,,,455,,,',
',455,455,455,455,455,455,,,,455,455,,,,,,,455,,,455,455,455,,,455,455',
'454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,',
',454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454',
'454,454,,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,',
'454,,,454,454,,,454,,,,,,454,,,,,,,,454,,,,,454,454,454,454,454,454',
',,,454,454,,,,,,,454,,,454,454,454,,,454,454,452,452,452,,452,,,,452',
'452,,,,452,,452,452,452,452,452,452,452,,,,,,452,452,452,452,452,452',
'452,,,452,,,,,,,452,,,452,452,452,452,452,452,452,452,452,452,452,452',
',452,452,,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,,452,',
'452,,452,,452,,,,,,,,452,,,,,452,452,452,452,452,452,,,,452,452,,,,',
',,452,,452,452,452,452,,,452,452,414,414,414,,414,,,,414,414,,,,414',
',414,414,414,414,414,414,414,,,,,,414,414,414,414,414,414,414,,,414',
',,,,,,414,,,414,414,414,414,414,414,414,414,,414,414,414,,414,414,,414',
'414,414,,,,,,,,,,,,,,,,,,,,414,,,414,,,414,414,,,414,,,,,,414,,,,,,',
',414,,,,,414,414,414,414,414,414,,,,414,414,,,,,,,414,,,414,414,414',
',,414,414,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47',
'47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47',
',47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,',
',,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,325',
'325,325,,325,,,,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325',
'325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325',
'325,,325,325,325,,325,325,,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325',
'325,,325,325,,,325,,,,,,325,,,,,,,,325,,,,,325,325,325,325,325,325,',
',,325,325,,,,,,,325,,,325,325,325,,,325,325,328,328,328,,328,,,,328',
'328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328',
'328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,',
'328,328,,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,',
',,,328,,,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328,,,,,,,328,',
',328,328,328,,,328,328,221,221,221,,221,,,,221,221,,,,221,,221,221,221',
'221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221',
'221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,',
',,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221',
'221,221,221,221,221,,,,221,221,221,,,,,,221,,,221,221,221,,,221,221',
'565,565,565,,565,,,,565,565,,,,565,,565,565,565,565,565,565,565,,,,',
',565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565,565,565,565,565',
'565,565,,565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,,,,,,,,565,,',
'565,,,565,565,,,565,,,,,,565,,,,,,,,565,,,,,565,565,565,565,565,565',
',,,565,565,,,,,,,565,,,565,565,565,,,565,565,220,220,220,,220,,,,220',
'220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220',
'220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,',
'220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,',
',,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220,',
',220,220,220,,,220,220,219,219,219,,219,,,,219,219,,,,219,,219,219,219',
'219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219',
'219,219,219,219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,',
',,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219',
'219,219,219,219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,218',
'218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218',
'218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218',
'218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218',
',,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,,,,,,,218,,,218,218,218,,,218,218,217,217,217,,217,,,,217,217,,',
',217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,',
',217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217',
',217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217',
',,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217',
'217,,,217,217,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,',
',,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216',
'216,216,216,,,,216,216,,,,,,,216,,,216,216,216,,,216,216,212,212,212',
',212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212',
'212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212',
'212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212',
'212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212',
'212,,,,,,,212,,212,212,212,212,,,212,212,539,539,539,,539,,,,539,539',
',,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539',
',,539,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539',
'539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,,,,539',
',,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,539,539',
'539,539,,,539,539,536,536,536,,536,,,,536,536,,,,536,,536,536,536,536',
'536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536,536',
'536,536,536,536,536,536,536,536,536,536,,536,536,,536,536,536,,,,,,',
',,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,,,,536',
'536,536,536,536,536,,,,536,536,,,,,,,536,,536,536,536,536,,,536,536',
'211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211,,,,',
',211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211,211',
'211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,',
'211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211',
',,,211,211,,,,,,,211,,,211,211,211,,,211,211,334,334,334,,334,,,,334',
'334,,,,334,,334,334,334,334,334,334,334,,,,,,334,334,334,334,334,334',
'334,,,334,,,,,,,334,,,334,334,334,334,334,334,334,334,334,334,334,334',
',334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334,,,334,',
',,,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,,,334,334,,,,,,,334',
',334,334,334,334,,,334,334,210,210,210,,210,,,,210,210,,,,210,,210,210',
'210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210',
',,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210,210,210',
',,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,210',
',,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210,210,,,210',
'210,530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530',
',,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530',
'530,530,530,,530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530',
',,530,,,530,530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530',
',,,530,530,,,,,,,530,,,530,530,530,,,530,530,526,526,526,,526,,,,526',
'526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526',
'526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526,',
'526,526,,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,',
',,,526,,,,,,,,526,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,',
',526,526,526,,,526,526,525,525,525,,525,,,,525,525,,,,525,,525,525,525',
'525,525,525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525',
'525,525,525,525,525,525,525,,525,525,525,,525,525,,525,525,525,,,,,',
',,,,,,,,,,,,,,525,,,525,,,525,525,,,525,,,,,,525,,,,,,,,525,,,,,525',
'525,525,525,525,525,,,,525,525,,,,,,,525,,,525,525,525,,,525,525,522',
'522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522',
'522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522',
'522,,522,522,522,,522,522,,,,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522',
'522,,,522,,,,,,,,,,,,,,,,,,,522,522,522,522,522,522,,,,522,522,,,,,',
',522,,,522,522,522,,,522,522,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,435,,23,23,,,,435,435,435,,,435,435,435,600,435,600,600,600,600',
'600,,,,435,435,435,435,,,600,,,,,435,435,,435,435,435,435,435,,,,,,',
',,,600,600,,,,,,,,600,600,600,600,,435,435,435,435,435,435,435,435,435',
'435,435,435,435,435,,,435,435,435,,,435,,,435,,,435,435,,435,600,435',
',435,,435,435,435,435,435,435,435,,435,435,435,,,,,,,,,,,,,435,435,435',
'435,59,435,,435,,,,59,59,59,,,59,59,59,753,59,753,753,753,753,753,,',
',,59,59,59,,,753,,,,,59,59,,59,59,59,59,59,,,,,,,,,,753,,,,,,,,,753',
'753,753,753,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,',
'59,,,59,,,59,59,,59,753,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,',
',,,,,59,59,59,59,436,59,,59,,,,436,436,436,,,436,436,436,711,436,711',
'711,711,711,711,,,,436,436,436,436,,,711,,,,,436,436,,436,436,436,436',
'436,,,,,,,,,,711,,,,,,,,,,,711,711,,436,436,436,436,436,436,436,436',
'436,436,436,436,436,436,,,436,436,436,,,436,,,436,,,436,436,,436,711',
'436,,436,,436,436,436,436,436,436,436,,436,436,436,,,,,,,,,,,,,436,436',
'436,436,,436,,436,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74',
'74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74',
'74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74',
'74,,,74,,,,,,,,,,,,,,,,,,,,74,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,',
',,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11',
'11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11',
'11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12',
'12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12',
'12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91',
'91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91',
',91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91',
'91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,755,755,755',
'755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755',
'755,755,755,755,,,,755,755,755,755,755,755,755,755,755,755,,,,,,755',
'755,755,755,755,755,755,755,755,,,755,,,,,,,,,755,755,,755,755,755,755',
'755,755,755,,,755,755,,,,755,755,755,755,,,,,,,,,,,,,,755,755,,755,755',
'755,755,755,755,755,755,755,755,755,,,755,,,,,,,,,,,,,,,,,,,,755,628',
'628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628',
'628,628,628,628,628,628,,,,628,628,628,628,628,628,628,628,628,628,',
',,,,628,628,628,628,628,628,628,628,628,,,628,,,,,,,,,628,628,,628,628',
'628,628,628,628,628,,,628,628,,,,628,628,628,628,,,,,,,,,,,,,,628,628',
',628,628,628,628,628,628,628,628,628,628,628,,,628,628,,,,,,,,,,628',
',,,,,,,,628,405,405,405,405,405,405,405,405,405,405,405,405,405,405',
'405,405,405,405,405,405,405,405,405,405,,,,405,405,405,405,405,405,405',
'405,405,405,,,,,,405,405,405,405,405,405,405,405,405,,,405,,,,,,,,,405',
'405,,405,405,405,405,405,405,405,,,405,405,,,,405,405,405,405,,,,,,',
',,,,,,,405,405,,405,405,405,405,405,405,405,405,405,405,405,,,405,405',
',,,426,,,,,,405,426,426,426,,,426,426,426,405,426,,,,,,,,,426,426,426',
',,,,,,,,426,426,,426,426,426,426,426,,,,,,,,,,,,,,,,,,,,,,,,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,,,426,426,426,,,426',
',426,426,,,426,426,,426,,426,,426,,426,426,426,426,426,426,426,,426',
'426,426,,,,,,,,,,,,31,426,426,,426,,426,31,31,31,,,31,31,31,709,31,709',
'709,709,709,709,,,,,31,31,,,,709,,,,,31,31,,31,31,31,31,31,,,,,,,,,',
'709,,,,,,,,,709,709,709,709,,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,,,31,31,31,,,31,,31,31,,,31,31,,31,709,31,,31,,31,31,31,31,31,31',
'31,,31,,31,,,,,,,,,,,,30,31,31,,31,,31,30,30,30,,,30,30,30,707,30,707',
'707,707,707,707,,,,30,30,30,,,,707,,,,,30,30,,30,30,30,30,30,,,,,,,',
',,707,,,,,,,,,707,707,707,707,,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,,,30,30,30,,,30,,30,30,,,30,30,,30,707,30,,30,,30,30,30,30,30,30',
'30,,30,30,30,,,,,,,,,,,,484,30,30,,30,,30,484,484,484,,,484,484,484',
'1041,484,1041,1041,1041,1041,1041,,,,484,484,,,,,1041,,,,,484,484,,484',
'484,484,484,484,,,1010,,1010,1010,1010,1010,1010,1041,,997,,997,997',
'997,997,997,1010,,1041,1041,,,,,,997,,,,,,,484,,,,,,1010,484,,,,,484',
'484,,997,,1010,1010,,1041,,,,450,450,997,997,450,,,,,,484,484,,450,450',
',450,450,450,450,450,450,450,,484,450,450,1010,,484,450,450,450,450',
',,997,,,450,,,,,,,,450,450,,450,450,450,450,450,450,450,450,450,450',
'450,,,450,,,,,451,451,,,451,,,,,,,,,451,451,450,451,451,451,451,451',
'451,451,,,451,451,,,,451,451,451,451,,,,,,451,,,,,,,,451,451,,451,451',
'451,451,451,451,451,451,451,451,451,,,451,,,,,263,263,,,263,,,,,,,,',
'263,263,451,263,263,263,263,263,263,263,,,263,263,,,,263,263,263,263',
',,,,,,,,,,,,,263,263,,263,263,263,263,263,263,263,263,263,263,263,,',
'263,,,,,1008,1008,,,1008,,,,,,,,,1008,1008,263,1008,1008,1008,1008,1008',
'1008,1008,,,1008,1008,,,,1008,1008,1008,1008,,,,,,1008,,,,,,,,1008,1008',
',1008,1008,1008,1008,1008,1008,1008,1008,1008,1008,1008,,,1008,,,,,1007',
'1007,,,1007,,,,,,,,,1007,1007,1008,1007,1007,1007,1007,1007,1007,1007',
',,1007,1007,,,,1007,1007,1007,1007,,,,,,1007,,,,,,,,1007,1007,,1007',
'1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,,995,1007,995,995',
'995,995,995,,,517,517,,,517,,,995,,,,,1007,517,517,,517,517,517,517',
'517,517,517,,,517,517,,,995,517,517,517,517,,,,,,517,995,995,,,,,,517',
'517,,517,517,517,517,517,517,517,517,517,517,517,,,517,,,,,518,518,',
',518,,995,,,,,,,518,518,517,518,518,518,518,518,518,518,,,518,518,,',
',518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518,518,518,518',
'518,518,518,518,,659,518,659,659,659,659,659,993,,993,993,993,993,993',
',,659,,,,,518,,993,991,,991,991,991,991,991,,,,,,,,659,,991,,,,,993',
',659,659,659,659,,,,,,993,993,,,,,991,,,,,,,,,991,991,991,991,659,,',
'527,527,,,527,659,,,,,,,993,527,527,,527,527,527,527,527,527,527,,,527',
'527,,,991,527,527,527,527,,,,,,527,,,,,,,,527,527,,527,527,527,527,527',
'527,527,527,527,527,527,,,527,,,,,528,528,,,528,,,,,,,,,528,528,527',
'528,528,528,528,528,528,528,,,528,528,,,,528,528,528,528,,,,,,528,,',
',,,,,528,528,,528,528,528,528,528,528,528,528,528,528,528,,337,528,337',
'337,337,337,337,884,,884,884,884,884,884,,,337,,,,,528,,884,887,,887',
'887,887,887,887,,,,,,,,337,337,887,,,,,884,,337,337,337,337,,,,884,884',
'884,884,,,,889,887,889,889,889,889,889,,,,887,887,887,887,,,889,,,,',
',337,,,,,,,884,,,,,,,,,889,213,213,,,213,,,887,,,889,889,,213,213,,213',
'213,213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,,,,889',
',,213,213,,213,213,213,213,213,213,213,213,213,213,213,,546,213,546',
'546,546,546,546,,,,,,,,,,546,,,,,213,,,,,,,,,914,,914,914,914,914,914',
',546,214,214,,,214,,,914,546,546,546,546,,214,214,,214,214,214,214,214',
'214,214,,,214,214,,,914,214,214,214,214,,,,,,214,914,914,,,546,,,214',
'214,,214,214,214,214,214,214,214,214,214,214,214,,,214,,,,,958,958,',
',958,,914,,,,,,,958,958,214,958,958,958,958,958,958,958,,,958,958,,',
',958,958,958,958,,,,,,958,,,,,,,,958,958,,958,958,958,958,958,958,958',
'958,958,958,958,,916,958,916,916,916,916,916,941,,941,941,941,941,941',
',,916,,,,,958,,941,,,,,,,,,,,,,,,916,,,,,,,941,941,744,744,916,916,744',
',,941,941,941,941,,,744,744,,744,744,744,744,744,744,744,,,744,744,',
',,744,744,744,744,,,916,,,744,,,,941,,,,744,744,,744,744,744,744,744',
'744,744,744,744,744,744,,,744,,,,,743,743,,,743,,,,,,,,,743,743,744',
'743,743,743,743,743,743,743,,,743,743,,,,743,743,743,743,,,,,,743,,',
',,,,,743,743,,743,743,743,743,743,743,743,743,743,743,743,,918,743,918',
'918,918,918,918,,,587,587,,,587,,,918,,,,,743,587,587,,587,587,587,587',
'587,587,587,,,587,587,,,918,587,587,587,587,,,,,,587,918,918,,,,,,587',
'587,,587,587,587,587,587,587,587,587,587,587,587,,,587,,,,,588,588,',
',588,,918,,,,,,,588,588,587,588,588,588,588,588,588,588,,,588,588,,',
',588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588,588,588,588,588',
'588,588,588,588,,,588,,,,,,,,,,,,,,,,,,,,588' ]
        racc_action_check = arr = ::Array.new(26198, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1321,  1621,    90,   nil,   248,   nil,   nil, 18584,   760,
   nil, 23587, 23720,   -12,   nil,    26,   133,  1342,   413,   110,
    11,   nil,   -73, 22924,  2890,   249,   nil,   490,   nil,    20,
 24621, 24496, 16204, 16344,  5144,   nil,  4441,  5984,  6264,   nil,
   160,   416,   412,   244,   166, 10744, 11164, 20124,   186,  1057,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23192,
   nil,   -68, 18724,   nil,   -10,   nil, 11584, 11724,   nil,   nil,
 11864, 12004,   238,   nil, 23454,   nil,   nil,   nil,   nil,   nil,
   192,   nil,   nil,   nil,   nil,   nil,   nil,   221,   225,   235,
   247, 23853,   nil,   nil,   nil,   nil,   nil,   nil,   255,   nil,
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 19004,   nil,   nil,   nil,   nil, 11444,
 18164, 18024, 17184, 16764,   279,   nil,   121,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   275,   nil,  1762,
 22224, 21944, 21524, 25578, 25679,   nil, 21384, 21244, 21104, 20964,
 20824, 20544,   nil,   nil,   680,   103,   106,   365,   159,   294,
   388,   nil, 10324,  2749,   387,  9064,  8644,  7944,  7804,  7664,
  7524,  7244,  6124,  5704, 16064, 15364, 14664, 13824, 13684, 13404,
 12704, 12424, 12284, 12144, 18444,  6964, 12844, 13264, 14944, 15084,
 15224,   nil,   nil, 24933,   nil,   nil,   386, 15504,   nil,   395,
   nil,   nil,   nil, 15644,   nil,   nil, 15784,   nil,  3031,   nil,
   358,   366,   nil,  5004,   421,  5284,   nil,  5424,  5564,   nil,
   nil,   626,   nil,  1606,  5844,   371,  4582,   389,   434,   402,
  6684,  3172,  1198,  1101,  1093,   485,  1060,   nil,   484,   450,
   -19,   nil,   nil,   nil,   510,   164,   473, 10884,   nil,   414,
   539,   518,   nil,   543,   nil, 20264,  3031,   nil, 20404,   529,
   nil,   261,   505,   538, 22084,   nil,   nil, 25478,   608,    19,
    32, 16904, 17044,   628,   619,   533,    26,    28,  1270,   610,
    30,   642,   nil,   nil, 19144,   nil, 19284,   547,   602,   613,
   653,   162,   133,   345,   568,   366,   nil,   484,   nil,   nil,
   nil,   nil,   nil,   383,   nil,   163,   nil,   132,   nil,   544,
   407,   nil,   552,   -58,   nil,   553,   -42,   nil,   554,   -27,
   nil,   359,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  2608, 24252,   nil,   nil,   nil,   nil,
   573,   nil,   nil,   559, 19984,   560,   nil,   nil,   916,   576,
   nil,   nil,   576,   577,   379,   391, 24371,   nil,   nil,   nil,
   130,   385,   618,   nil,   nil, 23062, 23322,   nil,  2326,   nil,
   581,   nil,   nil,   775,   nil,   nil,   nil,   nil,   140,   nil,
 24797, 24865, 19844,   230, 19704, 19564, 19424,  4441,  4300,   943,
   802,   665,   667,   673,   675,  5144,  5284,  3196,  4864,  3172,
  5004,  3313,  3454,  3595,  3736,  3877,  4018,  4159,   657,   467,
  4582,  4723,  1339,   103, 24746,   nil,   nil,   nil,   nil,   nil,
   nil,   -43,   113,   638,   640,   nil,   nil, 17884,   nil,   nil,
 17744,   nil, 17604,   nil,   nil,   nil,   nil, 17464,  1465,   663,
   662,   nil,   nil,   685, 16624,   695, 16484, 25140, 25208,  1129,
   741,   nil, 22784,   706,   nil, 22644, 22504, 25348, 25416,  1480,
 22364,   831,   844,   611,   nil,   nil, 21804,   nil,   nil, 21664,
   nil,   744,   nil,   161,   772,    28, 25640,   nil,   733,   736,
   nil,   737,   741,   746,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   745,   606,   nil,   nil, 20684,   nil,   nil,   nil,   837,
   nil,   nil,   nil,   838,   nil,   nil,   845,  3454,   885,   nil,
  3595,    56,    63,   882,   894,   nil, 11304, 25995, 26063,    33,
   nil,   263,   322,   219,   nil,   324,   nil,     9, 10604,   nil,
 23026,   nil, 10464,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   320,   nil,   nil,   316,   nil,   nil,
   nil,   778,   nil,   nil,   779,   nil,   800,   nil, 24119,   nil,
   785, 10044,  9904,   415,   828,  9764,  9624,  9344,  9204,   827,
   nil,   nil,   nil,  8924,  8784,   831,   nil,  8504,  8084,   nil,
   178,   171,   510,   642,   803,  1057,   802,   nil,   nil, 25270,
   nil,   nil,   913,   -14,   121,   nil,   nil,   nil,   nil,   813,
   nil,   855,  7104,   nil,   nil,  1480,  -104,  6404,   815,   nil,
   826,   151,    90,   863,   225,  1242,   865,   827, 13964,  1621,
   890,   147,   944, 13544,   nil,   836,   -80,   nil,   nil,   nil,
  2185,  4159,   846,   244,   nil,   nil,   459, 24585,   nil, 24460,
   nil, 23286,   nil, 12564,   nil,   510,   nil,   847,   316,   853,
   nil,   nil,   nil,   nil,   434,   nil,   980,   nil,   nil,   nil,
   nil,   989,   nil, 18304,   875,    35,    36,    -4,    31,  6824,
   nil,   454,   nil, 25924, 25856, 18864,   nil,   nil,   nil,   641,
    25,  3736,   916, 23156,   657, 23986,   149,   758,  4300,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   874, 12984,  2044, 13124,
   nil,   877,   nil,  1903,   nil,  2185,   nil,   nil,  2467,   nil,
  2608,   nil,  2749, 14104, 14244, 14384, 14524,     5, 14804,   878,
   882,   nil,   887,   899,   900,   nil,   921,   911,   908,   902,
 15924,   nil,   nil,  4723,   nil,   nil,   nil,  4864,   775,   nil,
   nil,   920,   166,   nil,   nil,  1042,   nil,  2044,   926,   976,
   nil,   nil,   nil,   nil,   952,  1060,   944,   942,   nil,   nil,
   nil,   952,   954,   nil,   955,   956,   nil,   964,   nil,   nil,
   968,   646,   967,  3195,   nil,  1088,   nil,  6544,  1089,  1339,
  1480,   nil,    23,     5,    25,   224,  1234,   nil,   973,  3313,
  7384,   nil,   656,  1094,  1104,   991,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1007,  1010,   nil,  1198,  8224,  8364,
  1762,   339,   nil,   nil, 25485,   nil,   nil, 25502,   nil, 25539,
   nil,   nil,  1035,  1184,  9484,   960,  1092,  1139,  1903,  1039,
  1148,   nil,  2326,   nil,   nil,    -8, 10184,   nil,   nil,   nil,
   nil,   nil,   573,   nil, 25670,   nil, 25809,   nil, 25986,   nil,
   nil,   nil,   nil,   378,   360,  1040,   nil,    -9,   nil,  1161,
  1171, 11024,  3877,   nil,   nil,  1174,   277,   nil,   nil,   nil,
   nil, 25816,   nil,  1056,   nil,   nil,  1059,  1061,  1062,  1067,
   nil,  1076,   nil,   345,   nil,   nil,   nil,   778, 25747,   nil,
   nil,  1093,   nil,   nil,   nil,  2890,   847,   919,   311,  1155,
   988,   nil,  1082,  1083,  1093,  1095,  1096,   639,  1097,  3299,
  2467,   nil,   nil,   nil,     5,  1057,   nil,   nil,  4018,  1198,
   nil, 25294,   nil, 25277,   nil, 25131,   nil, 24750,   nil,   nil,
   nil,  1325,  1144,  1150,   nil,  1237, 17324, 25069, 25001,  1201,
 24741,   nil,   nil,   nil,   nil,  3158,  1125,   578,   nil,   nil,
   nil,  1249,  1252,  1271,  1156,  1159,  1160,  1164,   nil,   nil,
  1172,    -7,    10,    22,  1339,  1181,  1182,   nil,   nil,   nil,
   nil, 24710,   nil,   nil,   nil,   nil,   -11,   nil,   -99,   nil ]

racc_action_default = [
    -1,  -624,  -623,  -624,    -2,  -610,    -4,    -5,  -624,    -8,
    -9,  -624,  -624,  -624,   -29,  -624,  -624,  -624,  -280,  -624,
   -40,   -43,  -612,  -624,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -623,   -73,   -81,   -83,
  -624,  -516,  -517,  -624,  -624,  -624,  -624,  -624,  -612,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -599,
  -282,  -285,  -623,  -292,  -302,  -405,  -624,  -624,  -307,  -310,
  -610,  -624,  -318,  -325,  -624,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -623,  -455,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -492,  -498,  -500,  -501,  -502,  -503,  -597,  -505,
  -506,  -598,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1050,    -3,  -611,  -619,  -620,  -621,    -7,  -624,
  -624,  -624,  -624,  -624,  -624,   -17,  -624,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -623,
  -624,  -624,  -623,  -624,  -624,  -609,  -624,  -624,  -624,  -624,
  -624,  -612,  -613,   -47,  -624,  -516,  -517,  -624,  -280,  -624,
  -624,  -230,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -411,  -414,  -624,  -607,  -608,   -58,  -624,  -301,  -624,
  -428,  -431,   -64,  -623,  -425,   -65,  -612,   -66,  -239,  -252,
  -623,  -623,  -256,  -624,  -262,  -624,  -592,  -624,  -624,   -67,
   -68,  -610,   -13,   -14,  -624,   -71,  -623,  -612,  -624,   -74,
   -77,  -623,   -89,   -90,  -624,  -624,   -97,  -294,  -297,  -612,
  -418,  -333,  -334,  -337,  -426,  -624,   -79,  -624,   -85,  -290,
  -499,  -624,  -215,  -216,  -231,  -624,  -623,  -284,  -624,  -624,
  -240,  -616,  -616,  -624,  -623,  -303,  -304,  -548,   -49,  -624,
  -624,  -624,  -624,  -610,  -624,  -611,  -516,  -517,  -624,  -624,
  -280,  -624,  -358,  -359,  -624,  -321,  -624,  -112,  -113,  -154,
  -155,  -156,  -172,  -177,  -184,  -187,  -328,  -624,  -516,  -517,
  -587,  -588,  -453,  -624,  -476,  -624,  -478,  -624,  -480,  -624,
  -624,  -460,  -624,  -624,  -466,  -624,  -624,  -472,  -624,  -624,
  -474,  -624,  -491,  -493,  -494,  -495,  -496,    -6,  -622,   -23,
   -24,   -25,   -26,   -27,  -623,  -624,   -19,   -20,   -21,  -122,
  -624,   -30,   -39,  -267,  -624,  -624,  -266,   -31,  -197,  -612,
  -247,  -248,  -623,  -623,  -600,  -601,  -257,  -423,  -602,  -603,
  -601,  -600,  -257,  -422,  -424,  -602,  -603,   -37,  -205,   -38,
  -624,   -41,   -42,  -195,  -262,   -44,   -45,   -46,  -612,  -300,
  -624,  -624,  -623,  -290,  -624,  -624,  -624,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -232,  -233,
  -234,  -235,  -612,  -623,  -257,  -600,  -601,   -54,   -59,  -258,
  -419,  -623,  -623,  -612,  -612,  -296,  -253,  -624,  -261,  -254,
  -624,  -259,  -624,  -263,  -595,  -596,   -12,  -611,   -16,  -612,
   -70,  -288,   -86,   -75,  -624,  -612,  -623,  -624,  -624,   -96,
  -624,  -499,  -624,   -82,   -87,  -624,  -624,  -624,  -624,  -236,
  -624,  -439,  -624,  -286,  -614,  -241,  -618,  -617,  -243,  -618,
  -291,  -624,  -590,  -616,  -624,  -624,  -548,  -408,  -586,  -586,
  -531,  -533,  -533,  -533,  -547,  -549,  -550,  -551,  -552,  -553,
  -554,  -555,  -624,  -557,  -559,  -561,  -566,  -568,  -569,  -571,
  -576,  -578,  -579,  -581,  -582,  -583,  -624,  -623,  -349,  -350,
  -623,  -624,  -624,  -624,  -624,  -434,  -623,  -624,  -624,  -290,
  -315,  -107,  -108,  -624,  -110,  -624,  -280,  -624,  -624,  -326,
  -548,  -330,  -624,  -454,  -477,  -482,  -483,  -485,  -456,  -479,
  -457,  -481,  -458,  -459,  -624,  -462,  -464,  -624,  -465,  -468,
  -469,  -624,  -470,  -471,  -624,  -497,  -624,   -18,  -624,   -28,
  -270,  -624,  -624,  -427,  -624,  -249,  -251,  -624,  -624,   -60,
  -245,  -246,  -420,  -624,  -624,   -62,  -421,  -624,  -624,  -299,
  -600,  -601,  -600,  -601,  -612,  -195,  -624,  -394,  -395,  -612,
  -397,  -412,   -53,  -415,  -623,  -429,  -432,  -244,  -295,  -623,
  -260,  -264,  -624,  -593,  -594,   -15,   -72,  -624,   -78,   -84,
  -612,  -600,  -601,  -623,   -93,   -95,  -624,   -80,  -624,  -204,
  -214,  -612,  -623,  -623,  -283,  -612,  -616,  -293,  -591,  -406,
  -623,  -623,  -612,  -624,  -529,  -530,  -624,  -624,  -540,  -624,
  -543,  -624,  -545,  -624,  -360,  -624,  -362,  -364,  -371,  -612,
  -560,  -570,  -580,  -584,  -623,  -351,  -623,  -308,  -352,  -353,
  -311,  -624,  -314,  -624,  -612,  -600,  -601,  -604,  -289,  -624,
  -107,  -108,  -109,  -624,  -624,  -623,  -319,  -522,  -523,  -624,
  -322,  -623,  -623,  -548,  -624,  -624,  -612,  -624,  -623,  -461,
  -463,  -467,  -473,  -475,   -10,  -123,  -268,  -624,  -198,  -624,
  -615,  -623,   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,
  -202,   -63,  -196,  -624,  -624,  -624,  -624,  -427,  -624,  -586,
  -586,  -376,  -623,  -623,  -623,  -393,  -624,  -612,  -399,  -555,
  -563,  -564,  -574,  -623,  -417,  -416,   -55,  -623,  -623,  -255,
  -265,   -76,   -91,   -88,  -298,  -623,  -356,  -623,  -440,  -623,
  -441,  -442,  -287,  -242,  -624,  -624,  -612,  -586,  -567,  -585,
  -532,  -533,  -533,  -558,  -533,  -533,  -577,  -533,  -555,  -572,
  -612,  -624,  -369,  -624,  -556,  -624,  -354,  -624,  -624,  -623,
  -623,  -313,  -624,  -427,  -624,  -107,  -108,  -111,  -612,  -623,
  -624,  -525,  -624,  -624,  -624,  -612,  -527,  -331,  -589,  -484,
  -487,  -488,  -489,  -490,  -624,  -269,   -32,  -199,  -250,  -624,
  -237,  -624,  -374,  -375,  -384,  -378,  -386,  -624,  -389,  -624,
  -391,  -396,  -624,  -624,  -624,  -562,  -624,  -624,  -623,  -624,
  -624,   -11,  -623,  -446,  -357,  -624,  -624,  -444,  -409,  -410,
  -407,  -528,  -624,  -536,  -624,  -538,  -624,  -541,  -624,  -544,
  -546,  -361,  -363,  -367,  -624,  -372,  -305,  -624,  -306,  -624,
  -624,  -624,  -623,  -316,  -427,  -624,  -624,  -323,  -327,  -329,
  -526,  -548,  -486,  -586,  -565,  -377,  -623,  -623,  -623,  -623,
  -575,  -623,  -398,  -612,  -401,  -403,  -404,  -573,  -624,  -290,
  -413,  -624,  -430,  -433,  -445,  -623,   -98,   -99,  -624,  -624,
  -106,  -443,  -533,  -533,  -533,  -533,  -365,  -624,  -370,  -624,
  -623,  -309,  -312,  -264,  -623,  -623,  -320,  -524,  -623,  -623,
  -373,  -624,  -381,  -624,  -383,  -624,  -387,  -624,  -390,  -392,
  -400,  -624,  -289,  -604,   -56,  -439,  -623,  -624,  -624,  -105,
  -624,  -534,  -537,  -539,  -542,  -624,  -368,  -623,  -435,  -436,
  -437,  -624,  -624,  -624,  -623,  -623,  -623,  -623,  -402,  -438,
  -612,  -600,  -601,  -604,  -104,  -533,  -366,  -355,  -317,  -324,
  -332,  -624,  -379,  -382,  -385,  -388,  -427,  -535,  -623,  -380 ]

clist = [
'6,419,220,299,213,223,532,327,366,584,262,135,135,335,130,130,426,432',
'692,313,313,125,208,133,133,393,117,442,325,416,752,274,4,577,580,499',
'439,633,263,9,279,279,279,488,845,9,925,554,339,340,523,673,343,313',
'298,266,272,275,547,719,330,297,493,833,815,316,484,280,280,280,793',
'114,320,113,295,704,705,130,796,742,118,374,836,376,378,381,384,387',
'390,376,673,117,670,956,130,670,954,331,848,727,730,399,400,401,402',
'661,922,281,281,281,535,538,375,665,666,950,614,850,391,617,597,826',
'599,739,985,604,354,978,859,611,598,862,615,800,988,615,356,332,344',
'751,794,600,277,289,290,755,941,849,341,334,695,9,795,328,326,367,746',
'797,351,336,403,541,370,953,663,333,545,449,699,337,628,483,803,491',
'807,492,808,499,1018,733,1016,819,905,372,373,898,397,673,832,377,834',
'380,411,417,1,664,383,386,437,441,389,956,869,757,1028,758,392,860,405',
'412,420,450,840,831,427,353,892,436,1036,950,279,207,495,828,944,901',
'124,410,17,857,670,670,602,342,17,2,,,,,833,654,,510,922,415,,678,731',
'224,,298,415,426,432,687,554,,224,224,224,,17,304,304,,,702,,,490,420',
'787,,833,279,,,498,498,,279,313,524,279,836,806,,,520,,517,224,224,',
'946,224,348,812,313,,,280,,,680,,,527,,554,280,117,,298,274,882,883',
',298,683,509,698,581,582,,515,513,,,683,508,542,,295,587,313,1037,313',
'295,17,790,281,521,,224,224,224,224,17,,281,853,833,911,800,1019,507',
'800,506,,800,,800,117,947,760,,948,760,,989,933,,,734,,489,601,,,,,',
',827,494,,,,683,,,972,649,,,,,634,,,6,,,135,,,130,543,811,583,,,,627',
'776,133,,,498,498,781,809,640,,,641,,673,,863,864,646,626,17,224,224',
'224,667,668,9,224,224,224,224,224,224,,,420,427,639,,436,676,,442,645',
'17,279,679,656,554,,800,,800,,800,990,800,1024,670,865,823,934,,,,524',
'657,640,,,641,,,524,657,657,,1029,224,,,313,,,224,,,224,,313,,,,,791',
'662,,820,,420,800,,,427,,17,436,17,,279,809,304,17,427,,,436,,,858,',
',,,935,,,,304,675,,932,683,,,,,17,829,224,,829,,,,,,,943,,,790,224,224',
'790,,790,669,,,,,,,,595,,595,,420,,,,427,,,436,,,279,724,,,726,965,',
',728,728,,,,,,,,696,805,,,,,,747,772,774,980,,,792,777,779,,135,441',
'17,130,,,634,,,814,765,798,133,822,,524,,,,804,1046,1020,,554,,,813',
',708,710,712,313,634,,657,,,844,,498,1022,1023,313,,,790,835,790,837',
'790,224,790,,640,798,,641,,,646,,867,816,821,,,,,,,,,,,868,,,,,,,,771',
',,,634,,,,824,825,,854,816,790,816,,,,415,,,829,,17,791,,,791,,791,304',
',224,420,,427,436,,304,,,876,,279,,,224,,130,,,,,,,,,,852,498,861,,910',
',,866,874,798,,,,,313,,,,921,,,,885,885,885,,,1030,,,,,,,,17,,,17,,',
',683,940,224,903,,,,907,,,,897,,,224,899,900,,224,927,,,,,,904,,,634',
',,791,936,791,,791,,791,,,,,949,,951,,,,,,,,,224,224,,,929,930,224,224',
',,224,,728,313,973,,974,,975,,937,,,,,313,,,791,,,,,,,,,,,,304,886,888',
'890,,,,,,,,304,,961,,,,964,,,,,,17,17,,,,,,1000,,,913,915,,917,919,',
'920,,885,885,885,885,,885,984,,,,,1007,1025,987,1026,,1027,436,,,,224',
',,,,,224,,,,1035,,17,17,,,,816,1005,17,,29,,,,,,29,,,224,,,1017,,,,',
'1021,420,,1048,29,427,,634,436,,,279,816,29,29,29,,29,18,885,885,885',
'885,895,18,,17,,,,17,17,,,,,,,,,17,,,885,,,,29,29,,,29,18,306,306,992',
'994,996,998,,999,,,,,,,,,,224,,17,17,1011,1012,1013,1014,,,,,17,224',
',,,350,,413,,,,,,29,444,,,,29,29,29,29,29,,,,,,,,,,,,,957,,,,17,,,,17',
',,,968,18,,,1042,1043,1044,1045,1047,,18,,,,,,,,,,,,,,,,17,,1049,,,',
',501,,503,,504,505,,,,,,,,,,,,,,,,,,,,,17,,29,29,29,29,,,,29,29,29,29',
'29,29,17,,,,,17,,,17,17,544,29,,,,,,,,,,,18,,,,224,,,,42,,,,,,42,,,',
'338,338,,,338,29,18,,,,,29,,,29,,,,,,,,,,42,303,303,,,,,,29,,29,,,,',
'29,,,,,,,,,,,630,,,338,338,338,338,,,347,,,369,,29,,29,18,,18,,,,306',
'18,,,,,29,29,,,,,,,,,,306,,,,,,,,,18,,,42,16,,,,,,16,,42,,,,,,,,,,,',
',,,,596,,596,,,,671,,,544,16,674,,,,29,,,,,,,,,,445,446,447,448,,41',
',,,,,41,,,,,,,,,671,,,544,,18,,,,,,,,,,,,,29,41,302,302,,,,42,,,,720',
',,,,,,,,,,,,,16,,,,,,42,,,16,,346,,,368,,,,,,,,,,,,,,,,29,,,,,,,,,29',
',,,,,,,533,,,,,766,29,41,,671,544,,,338,338,,41,561,18,,42,,42,,,306',
'303,42,,,,,,306,,,,,,,,,,303,,,810,,16,,,,42,29,,,29,,,,19,,29,,,,19',
'818,,,,,16,,29,,,,29,,369,,369,,,,,839,18,,,18,,,19,,,,,,,,41,,,,,444',
',,,,,29,29,,,,,29,29,,,29,,,41,,,352,42,,,16,,16,,,,,16,875,,,,,,,,',
',,,,,,,,,,,,,,,16,,,,,,,19,,,,29,29,,,,19,,,,,,41,306,41,,,,302,41,',
',,,306,,,691,,,,,,,,302,18,18,,,29,,,,41,,29,,,,,561,29,29,,,,,42,29',
',,,,,303,,714,16,,29,,368,303,368,,,544,,,,,,,,,,18,18,,,,19,873,18',
'750,,,,756,440,,,,29,561,,,29,29,,,,,,,19,,29,,,,41,,,,,,42,,983,42',
',,,,596,,,18,,,,18,18,,,,29,,29,29,,18,,,,,,,29,29,,,799,,,,,,,16,,',
',,,19,,19,,,,,19,18,18,,,,,,,,,18,,,,29,,,,29,,,,,,19,,,561,,561,,,',
',,714,,,842,,41,,,303,,596,,302,29,18,,338,,18,303,302,16,970,,16,,',
',,,,42,42,,,,,,561,,,,,,,,29,,18,,,,,,,,,,,,,29,,,,,29,19,,29,29,,,',
',41,,,41,,,18,42,42,,,,29,,42,,,,,,,18,,,,,18,,,18,18,,,,,,,,,,,,,,',
',,,,338,,714,,714,,,369,,,42,,,338,42,42,,,,,16,16,,,42,,,,,,,,,,,,',
',,,,,,,,799,19,,799,,,302,,,,,42,42,,,,,302,,,,42,,,,,16,16,561,41,41',
',,16,,,,,,976,714,,,,,,,,,,,,,,,,369,561,,,42,,,,42,,,,967,,,19,,,19',
',,,16,,41,41,16,16,,,,41,,,,,16,714,42,714,,,,,,,,,,,,799,,,,,,,,,,',
',,,,,,16,16,,42,,368,,714,41,,16,,41,41,,,,440,42,,,231,41,42,,,42,42',
',,278,278,278,,,,,,,,,,,322,323,324,,,,16,,,,16,41,41,,,,,278,,,,41',
',,,,,19,19,,,,,,,,,,,,16,,,,,,,,,,,,,,,,368,,,,41,,,,41,,,,966,,,,,16',
',,,,19,19,,,,,,19,,,16,,,,,16,41,,16,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',41,,,19,,,,19,19,,,,,,,41,,19,,,41,,,41,41,,,,,,,,,,,,,,278,418,278',
',,,438,443,,,,19,19,,,,,,,,,19,231,,,457,458,459,460,461,462,463,464',
'465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481',
'482,,,,,,,278,,,19,,,278,19,,278,,971,,,,,278,,278,,278,278,,,,,,,,',
',,,,,,,19,,,,,,,,,,,,,,,,,,,,,529,,,,,,,,,278,,,19,,,,,,,,,,,,,,,19',
',,,,19,,,19,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,438,655,418,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,278,,,,,,,,,,,,,,278,,,,,,,,,689',
'690,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,',
',,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,768,,,278,278',
'773,775,,,,,778,780,,,655,782,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,',
',,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,',
',,278,,,,,,,,,,,,,,,,,,,,,,278,,877,,,,,,,,,,,,,,773,775,780,778,,880',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,278,877,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3201, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,25,34,53,27,22,10,51,60,95,155,65,65,89,61,61,40,40,13,68,68,17,17',
'64,64,60,98,20,34,30,99,74,2,92,92,76,30,26,39,9,36,36,36,42,93,9,135',
'185,19,19,55,199,19,68,12,41,41,41,154,134,6,50,25,189,14,54,40,71,71',
'71,144,8,67,5,49,139,139,61,147,58,7,6,194,6,6,6,6,6,6,6,199,98,77,150',
'61,77,149,71,14,94,94,19,19,19,19,43,132,73,73,73,72,72,172,43,43,195',
'175,108,172,175,59,147,59,109,110,176,111,135,112,176,113,114,176,190',
'115,176,116,73,5,117,145,118,48,48,48,119,120,106,105,104,103,9,136',
'102,101,100,97,142,96,91,9,88,87,148,75,70,151,51,152,153,66,156,157',
'160,161,162,163,76,164,165,135,166,167,170,171,46,7,199,145,173,145',
'174,22,22,1,45,177,178,22,22,179,150,180,181,149,182,183,184,33,31,6',
'27,134,188,74,21,147,61,135,195,36,18,51,191,192,15,11,12,24,58,77,77',
'198,107,24,3,,,,,189,25,,51,132,71,,55,95,24,,12,71,40,40,55,185,,24',
'24,24,,24,24,24,,,154,,,74,6,26,,189,36,,,6,6,,36,68,53,36,194,43,,',
'34,,27,24,24,,144,24,24,26,68,,,71,,,25,,,27,,185,71,98,,12,74,139,139',
',12,40,50,72,19,19,,50,54,,,40,9,6,,49,27,68,93,68,49,24,138,73,67,',
'24,24,24,24,24,,73,26,189,139,190,14,8,190,5,,190,,190,98,145,176,,145',
'176,,99,94,,,25,,48,39,,,,,,,138,48,,,,40,,,145,51,,,,,34,,,6,,,65,',
',61,73,55,5,,,,17,42,64,,,6,6,42,76,6,,,74,,199,,10,10,74,2,24,24,24',
'24,51,51,9,24,24,24,24,24,24,,,6,74,41,,61,51,,20,41,24,36,51,34,185',
',190,,190,,190,139,190,145,77,154,72,26,,,,53,6,6,,,74,,,53,6,6,,13',
'24,,,68,,,24,,,24,,68,,,,,140,41,,30,,6,190,,,74,,24,61,24,,36,76,24',
'24,74,,,61,,,25,,,,,10,,,,24,9,,92,40,,,,,24,140,24,,140,,,,,,,138,',
',138,24,24,138,,138,73,,,,,,,,24,,24,,6,,,,74,,,61,,,36,12,,,12,92,',
',98,98,,,,,,,,73,89,,,,,,98,22,22,92,,,143,22,22,,65,22,24,61,,,34,',
',51,17,34,64,51,,53,,,,155,26,95,,185,,,53,,187,187,187,68,34,,6,,,51',
',6,10,10,68,,,138,143,138,143,138,24,138,,6,34,,74,,,74,,60,6,6,,,,',
',,,,,,51,,,,,,,,73,,,,34,,,,12,12,,19,6,138,6,,,,71,,,140,,24,140,,',
'140,,140,24,,24,6,,74,61,,24,,,22,,36,,,24,,61,,,,,,,,,,71,6,98,,51',
',,98,12,34,,,,,68,,,,51,,,,6,6,6,,,25,,,,,,,,24,,,24,,,,40,51,24,6,',
',,6,,,,12,,,24,12,12,,24,19,,,,,,12,,,34,,,140,19,140,,140,,140,,,,',
'143,,143,,,,,,,,,24,24,,,12,12,24,24,,,24,,98,68,143,,143,,143,,98,',
',,,68,,,140,,,,,,,,,,,,24,141,141,141,,,,,,,,24,,12,,,,12,,,,,,24,24',
',,,,,34,,,187,187,,187,187,,187,,6,6,6,6,,6,12,,,,,27,143,98,143,,143',
'61,,,,24,,,,,,24,,,,143,,24,24,,,,6,12,24,,44,,,,,,44,,,24,,,12,,,,',
'12,6,,143,44,74,,34,61,,,36,6,44,44,44,,44,28,6,6,6,6,24,28,,24,,,,24',
'24,,,,,,,,,24,,,6,,,,44,44,,,44,28,28,28,141,141,141,141,,141,,,,,,',
',,,24,,24,24,187,187,187,187,,,,,24,24,,,,28,,69,,,,,,44,69,,,,44,44',
'44,44,44,,,,,,,,,,,,,24,,,,24,,,,24,,,,24,28,,,141,141,141,141,187,',
'28,,,,,,,,,,,,,,,,24,,141,,,,,69,,69,,69,69,,,,,,,,,,,,,,,,,,,,,24,',
'44,44,44,44,,,,44,44,44,44,44,44,24,,,,,24,,,24,24,69,44,,,,,,,,,,,28',
',,,24,,,,57,,,,,,57,,,,32,32,,,32,44,28,,,,,44,,,44,,,,,,,,,,57,57,57',
',,,,,44,,44,,,,,44,,,,,,,,,,,69,,,32,32,32,32,,,57,,,57,,44,,44,28,',
'28,,,,28,28,,,,,44,44,,,,,,,,,,28,,,,,,,,,28,,,57,23,,,,,,23,,57,,,',
',,,,,,,,,,,,28,,28,,,,69,,,69,23,69,,,,44,,,,,,,,,,32,32,32,32,,56,',
',,,,56,,,,,,,,,69,,,69,,28,,,,,,,,,,,,,44,56,56,56,,,,57,,,,69,,,,,',
',,,,,,,,23,,,,,,57,,,23,,56,,,56,,,,,,,,,,,,,,,,44,,,,,,,,,44,,,,,,',
',32,,,,,69,44,56,,69,69,,,32,32,,56,133,28,,57,,57,,,28,57,57,,,,,,28',
',,,,,,,,,57,,,69,,23,,,,57,44,,,44,,,,29,,44,,,,29,69,,,,,23,,44,,,',
'44,,57,,57,,,,,69,28,,,28,,,29,,,,,,,,56,,,,,69,,,,,,44,44,,,,,44,44',
',,44,,,56,,,29,57,,,23,,23,,,,,23,69,,,,,,,,,,,,,,,,,,,,,,,,23,,,,,',
',29,,,,44,44,,,,29,,,,,,56,28,56,,,,56,56,,,,,28,,,32,,,,,,,,56,28,28',
',,44,,,,56,,44,,,,,133,44,44,,,,,57,44,,,,,,57,,133,23,,44,,56,57,56',
',,69,,,,,,,,,,28,28,,,,29,28,28,32,,,,32,29,,,,44,133,,,44,44,,,,,,',
'29,,44,,,,56,,,,,,57,,69,57,,,,,28,,,28,,,,28,28,,,,44,,44,44,,28,,',
',,,,44,44,,,133,,,,,,,23,,,,,,29,,29,,,,,29,28,28,,,,,,,,,28,,,,44,',
',,44,,,,,,29,,,133,,133,,,,,,133,,,133,,56,,,57,,28,,56,44,28,,32,,28',
'57,56,23,28,,23,,,,,,,57,57,,,,,,133,,,,,,,,44,,28,,,,,,,,,,,,,44,,',
',,44,29,,44,44,,,,,56,,,56,,,28,57,57,,,,44,,57,,,,,,,28,,,,,28,,,28',
'28,,,,,,,,,,,,,,,,,,,32,,133,,133,,,57,,,57,,,32,57,57,,,,,23,23,,,57',
',,,,,,,,,,,,,,,,,,,,133,29,,133,,,56,,,,,57,57,,,,,56,,,,57,,,,,23,23',
'133,56,56,,,23,,,,,,133,133,,,,,,,,,,,,,,,,57,133,,,57,,,,57,,,,57,',
',29,,,29,,,,23,,56,56,23,23,,,,56,,,,,23,133,57,133,,,,,,,,,,,,133,',
',,,,,,,,,,,,,,,23,23,,57,,56,,133,56,,23,,56,56,,,,29,57,,,35,56,57',
',,57,57,,,35,35,35,,,,,,,,,,,35,35,35,,,,23,,,,23,56,56,,,,,35,,,,56',
',,,,,29,29,,,,,,,,,,,,23,,,,,,,,,,,,,,,,56,,,,56,,,,56,,,,56,,,,,23',
',,,,29,29,,,,,,29,,,23,,,,,23,56,,23,23,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',56,,,29,,,,29,29,,,,,,,56,,29,,,56,,,56,56,,,,,,,,,,,,,,35,35,35,,',
',35,35,,,,29,29,,,,,,,,,29,35,,,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,,,35,,,29,,,35,29,,35',
',29,,,,,35,,35,,35,35,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,35,,,,,',
',,,35,,,29,,,,,,,,,,,,,,,29,,,,,29,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,,,',
',,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
'35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,',
',,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,',
',,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3201, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   194,    30,   235,   nil,    68,    -2,    72,    66,    37,
  -320,   216,    18,  -513,  -628,  -590,   nil,    10,   209,   -18,
  -190,   144,   -18,  1347,   226,  -211,  -382,   -13,  1019,  1566,
  -181,    -1,  1180,    83,   -20,  2194,     8,   nil,   nil,    11,
  -197,    26,  -223,  -378,   984,  -292,  -621,   nil,   110,    38,
    25,   -54,   nil,   -34,    27,  -267,  1401,  1234,  -514,  -234,
   -66,     3,   nil,   nil,    12,     0,  -239,    28,   -18,   882,
   103,    35,  -221,    75,     1,  -320,  -246,  -405,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,  -173,   -51,
   nil,    94,  -306,  -680,  -482,  -335,    87,  -441,    21,  -570,
    81,    94,    92,  -383,    86,    80,  -580,   164,  -613,  -467,
  -809,    54,  -618,  -225,  -619,  -803,    63,  -460,  -225,  -456,
  -721,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -735,  1188,  -503,  -797,  -507,   nil,  -318,  -473,
  -150,   112,  -502,   -35,  -589,  -519,   nil,  -581,  -730,  -797,
  -800,  -171,  -377,   104,  -279,   -15,   -90,  -489,   nil,   nil,
   -97,  -491,   -96,  -490,  -806,  -406,  -512,  -637,   nil,   nil,
   103,   101,    27,   103,   104,  -264,  -248,   108,   108,   110,
  -555,  -403,  -402,   115,  -541,  -290,   nil,   105,  -494,  -644,
  -526,  -480,  -657,   nil,  -627,  -772,   nil,   nil,  -139,  -449 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   292,     7,   345,   293,
   nil,   nil,   531,   nil,   846,   nil,   291,   nil,   nil,   nil,
    14,    15,    21,   230,   321,   nil,   nil,   744,   228,   229,
   nil,   nil,    20,   nil,   329,    24,    25,    26,    27,   nil,
   686,   nil,   nil,   nil,   310,   nil,   nil,    28,   421,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   594,   nil,
   132,   429,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   422,   nil,   423,   434,   642,   496,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   578,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   716,   838,   nil,   717,   945,   789,   549,   nil,
   550,   nil,   nil,   551,   nil,   553,   658,   nil,   nil,   nil,
   559,   nil,   nil,   nil,   754,   nil,   nil,   nil,   433,   269,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   830,   548,   nil,   552,   563,
   565,   566,   801,   569,   570,   802,   573,   576,   nil,   286 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  5, 151, :_reduce_10,
  4, 154, :_reduce_11,
  2, 156, :_reduce_12,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_15,
  2, 160, :_reduce_16,
  0, 177, :_reduce_17,
  4, 153, :_reduce_18,
  3, 153, :_reduce_19,
  3, 153, :_reduce_20,
  3, 153, :_reduce_21,
  2, 153, :_reduce_22,
  3, 153, :_reduce_23,
  3, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  4, 153, :_reduce_28,
  1, 153, :_reduce_none,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  6, 153, :_reduce_32,
  5, 153, :_reduce_33,
  5, 153, :_reduce_34,
  5, 153, :_reduce_35,
  5, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  3, 153, :_reduce_39,
  1, 153, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 163, :_reduce_49,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 165, :_reduce_none,
  3, 165, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 161, :_reduce_119,
  1, 161, :_reduce_none,
  1, 162, :_reduce_121,
  0, 210, :_reduce_122,
  4, 162, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 169, :_reduce_247,
  1, 169, :_reduce_248,
  2, 169, :_reduce_249,
  4, 169, :_reduce_250,
  2, 169, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  0, 247, :_reduce_286,
  5, 212, :_reduce_287,
  3, 212, :_reduce_288,
  3, 212, :_reduce_289,
  2, 212, :_reduce_290,
  3, 212, :_reduce_291,
  0, 248, :_reduce_292,
  4, 212, :_reduce_293,
  1, 212, :_reduce_294,
  4, 212, :_reduce_295,
  3, 212, :_reduce_296,
  1, 212, :_reduce_297,
  5, 212, :_reduce_298,
  4, 212, :_reduce_299,
  3, 212, :_reduce_300,
  2, 212, :_reduce_301,
  1, 212, :_reduce_none,
  2, 212, :_reduce_303,
  2, 212, :_reduce_304,
  6, 212, :_reduce_305,
  6, 212, :_reduce_306,
  0, 249, :_reduce_307,
  0, 250, :_reduce_308,
  7, 212, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 212, :_reduce_312,
  5, 212, :_reduce_313,
  4, 212, :_reduce_314,
  0, 253, :_reduce_315,
  0, 254, :_reduce_316,
  9, 212, :_reduce_317,
  0, 255, :_reduce_318,
  0, 256, :_reduce_319,
  7, 212, :_reduce_320,
  0, 257, :_reduce_321,
  0, 258, :_reduce_322,
  0, 259, :_reduce_323,
  9, 212, :_reduce_324,
  0, 260, :_reduce_325,
  0, 261, :_reduce_326,
  6, 212, :_reduce_327,
  0, 262, :_reduce_328,
  6, 212, :_reduce_329,
  0, 263, :_reduce_330,
  0, 264, :_reduce_331,
  9, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 212, :_reduce_335,
  1, 212, :_reduce_336,
  1, 168, :_reduce_337,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_355,
  1, 158, :_reduce_none,
  2, 158, :_reduce_357,
  1, 240, :_reduce_none,
  1, 240, :_reduce_359,
  1, 276, :_reduce_none,
  3, 276, :_reduce_361,
  1, 279, :_reduce_362,
  3, 279, :_reduce_363,
  1, 278, :_reduce_364,
  4, 278, :_reduce_365,
  6, 278, :_reduce_366,
  3, 278, :_reduce_367,
  5, 278, :_reduce_368,
  2, 278, :_reduce_369,
  4, 278, :_reduce_370,
  1, 278, :_reduce_371,
  3, 278, :_reduce_372,
  4, 280, :_reduce_373,
  2, 280, :_reduce_374,
  2, 280, :_reduce_375,
  1, 280, :_reduce_376,
  2, 285, :_reduce_377,
  1, 285, :_reduce_none,
  6, 286, :_reduce_379,
  8, 286, :_reduce_380,
  4, 286, :_reduce_381,
  6, 286, :_reduce_382,
  4, 286, :_reduce_383,
  2, 286, :_reduce_384,
  6, 286, :_reduce_385,
  2, 286, :_reduce_386,
  4, 286, :_reduce_387,
  6, 286, :_reduce_388,
  2, 286, :_reduce_389,
  4, 286, :_reduce_390,
  2, 286, :_reduce_391,
  4, 286, :_reduce_392,
  1, 286, :_reduce_393,
  1, 187, :_reduce_394,
  1, 187, :_reduce_none,
  3, 290, :_reduce_396,
  1, 290, :_reduce_397,
  4, 290, :_reduce_398,
  1, 291, :_reduce_none,
  4, 291, :_reduce_400,
  1, 292, :_reduce_401,
  3, 292, :_reduce_402,
  1, 293, :_reduce_403,
  1, 293, :_reduce_none,
  0, 297, :_reduce_405,
  3, 235, :_reduce_406,
  4, 295, :_reduce_407,
  1, 295, :_reduce_408,
  3, 296, :_reduce_409,
  3, 296, :_reduce_410,
  0, 300, :_reduce_411,
  0, 301, :_reduce_412,
  6, 299, :_reduce_413,
  2, 182, :_reduce_414,
  4, 182, :_reduce_415,
  5, 182, :_reduce_416,
  5, 182, :_reduce_417,
  0, 303, :_reduce_418,
  3, 234, :_reduce_419,
  4, 234, :_reduce_420,
  4, 234, :_reduce_421,
  3, 234, :_reduce_422,
  3, 234, :_reduce_423,
  3, 234, :_reduce_424,
  2, 234, :_reduce_425,
  1, 234, :_reduce_426,
  4, 234, :_reduce_427,
  0, 304, :_reduce_428,
  0, 305, :_reduce_429,
  6, 233, :_reduce_430,
  0, 306, :_reduce_431,
  0, 307, :_reduce_432,
  6, 233, :_reduce_433,
  0, 309, :_reduce_434,
  6, 239, :_reduce_435,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  6, 157, :_reduce_438,
  0, 157, :_reduce_439,
  1, 310, :_reduce_440,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  2, 311, :_reduce_443,
  1, 311, :_reduce_none,
  2, 159, :_reduce_445,
  1, 159, :_reduce_none,
  1, 223, :_reduce_447,
  1, 223, :_reduce_448,
  1, 223, :_reduce_none,
  1, 224, :_reduce_450,
  1, 313, :_reduce_451,
  1, 313, :_reduce_none,
  2, 313, :_reduce_453,
  3, 314, :_reduce_454,
  1, 314, :_reduce_455,
  3, 225, :_reduce_456,
  3, 226, :_reduce_457,
  3, 227, :_reduce_458,
  3, 227, :_reduce_459,
  1, 318, :_reduce_460,
  3, 318, :_reduce_461,
  1, 319, :_reduce_none,
  2, 319, :_reduce_463,
  3, 229, :_reduce_464,
  3, 229, :_reduce_465,
  1, 321, :_reduce_466,
  3, 321, :_reduce_467,
  3, 228, :_reduce_468,
  3, 228, :_reduce_469,
  3, 230, :_reduce_470,
  3, 230, :_reduce_471,
  1, 322, :_reduce_472,
  3, 322, :_reduce_473,
  1, 323, :_reduce_474,
  3, 323, :_reduce_475,
  1, 315, :_reduce_476,
  2, 315, :_reduce_477,
  1, 316, :_reduce_478,
  2, 316, :_reduce_479,
  1, 317, :_reduce_480,
  2, 317, :_reduce_481,
  1, 320, :_reduce_482,
  0, 325, :_reduce_483,
  3, 320, :_reduce_484,
  0, 326, :_reduce_485,
  4, 320, :_reduce_486,
  1, 324, :_reduce_487,
  1, 324, :_reduce_488,
  1, 324, :_reduce_489,
  1, 324, :_reduce_none,
  2, 208, :_reduce_491,
  1, 208, :_reduce_492,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  3, 209, :_reduce_497,
  1, 312, :_reduce_none,
  2, 312, :_reduce_499,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 201, :_reduce_514,
  1, 201, :_reduce_515,
  1, 231, :_reduce_516,
  1, 231, :_reduce_517,
  1, 167, :_reduce_518,
  1, 167, :_reduce_519,
  1, 172, :_reduce_520,
  1, 172, :_reduce_521,
  1, 241, :_reduce_522,
  0, 328, :_reduce_523,
  4, 241, :_reduce_524,
  2, 241, :_reduce_525,
  3, 243, :_reduce_526,
  2, 243, :_reduce_527,
  4, 329, :_reduce_528,
  2, 329, :_reduce_529,
  2, 329, :_reduce_530,
  1, 329, :_reduce_none,
  2, 331, :_reduce_532,
  0, 331, :_reduce_533,
  6, 298, :_reduce_534,
  8, 298, :_reduce_535,
  4, 298, :_reduce_536,
  6, 298, :_reduce_537,
  4, 298, :_reduce_538,
  6, 298, :_reduce_539,
  2, 298, :_reduce_540,
  4, 298, :_reduce_541,
  6, 298, :_reduce_542,
  2, 298, :_reduce_543,
  4, 298, :_reduce_544,
  2, 298, :_reduce_545,
  4, 298, :_reduce_546,
  1, 298, :_reduce_547,
  0, 298, :_reduce_548,
  1, 294, :_reduce_549,
  1, 294, :_reduce_550,
  1, 294, :_reduce_551,
  1, 294, :_reduce_552,
  1, 277, :_reduce_none,
  1, 277, :_reduce_554,
  1, 333, :_reduce_none,
  3, 333, :_reduce_556,
  1, 287, :_reduce_557,
  3, 287, :_reduce_558,
  1, 334, :_reduce_none,
  2, 335, :_reduce_560,
  1, 335, :_reduce_561,
  2, 336, :_reduce_562,
  1, 336, :_reduce_563,
  1, 281, :_reduce_none,
  3, 281, :_reduce_565,
  1, 330, :_reduce_none,
  3, 330, :_reduce_567,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 282, :_reduce_570,
  1, 282, :_reduce_571,
  3, 338, :_reduce_572,
  3, 339, :_reduce_573,
  1, 288, :_reduce_574,
  3, 288, :_reduce_575,
  1, 332, :_reduce_576,
  3, 332, :_reduce_577,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 289, :_reduce_580,
  1, 289, :_reduce_581,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 284, :_reduce_584,
  2, 283, :_reduce_585,
  0, 283, :_reduce_586,
  1, 244, :_reduce_none,
  0, 342, :_reduce_588,
  4, 244, :_reduce_589,
  1, 232, :_reduce_590,
  2, 232, :_reduce_591,
  1, 217, :_reduce_none,
  3, 217, :_reduce_593,
  3, 343, :_reduce_594,
  2, 343, :_reduce_595,
  2, 343, :_reduce_596,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 171, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 170, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_619,
  1, 242, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_622,
  0, 150, :_reduce_623 ]

racc_reduce_n = 624

racc_shift_n = 1050

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_557(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_558(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_561(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_562(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_563(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

# reduce 568 omitted

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_581(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_586(val, _values, result)
                      result = nil
                    
    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

def _reduce_619(val, _values, result)
 yyerrok 
    result
end

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

def _reduce_623(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
