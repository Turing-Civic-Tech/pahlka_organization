#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby23Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-289,297,72,73,74,12,60,-289,-289,-289,66,67,-289,-289,-289,70,-289',
'68,69,71,33,34,75,76,222,-100,-289,-289,-289,32,31,30,104,103,105,106',
'-289,-289,22,-289,-289,-289,-289,-289,11,48,-69,13,108,107,109,98,59',
'100,99,101,-93,102,110,111,223,94,95,756,45,46,44,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-92,-94,-289,-289',
'-289,43,793,-289,36,505,-289,61,62,-289,-289,63,-289,38,-289,-264,-289',
'47,-289,-289,-289,-289,-289,-289,-289,23,-289,272,-289,887,91,83,85',
'86,87,89,666,-603,-93,84,92,-289,-289,-289,-289,-91,-289,65,-289,-99',
'81,88,90,-504,-518,96,97,585,-289,-104,-504,-504,-504,-92,-94,-504,-504',
'-504,-91,-504,665,-101,736,-93,503,-100,-93,-504,-98,-504,-504,-504',
'272,116,755,666,-100,-103,115,-504,-504,-93,-504,-504,-504,-504,-504',
'585,-92,-94,500,-92,-94,116,-105,708,585,-98,115,-104,-106,-98,855,825',
'271,627,-92,-94,-99,665,-504,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,-504,-102,-91,-504,-504,-504,-101,-504,-504,-102',
'886,-504,736,-106,-504,-504,736,-504,-103,-504,-263,-504,272,-504,-504',
'-504,-504,-504,-504,-504,-99,-504,-519,-504,771,-99,271,-91,116,116',
'-91,939,-604,115,115,626,-504,-504,-504,-504,-89,-504,-101,-504,-105',
'-91,-100,-101,-507,630,585,-100,-104,-504,-504,-507,-507,-507,-103,585',
'-507,-507,-507,-103,-507,-603,-96,707,116,-603,770,-95,-507,115,-507',
'-507,-507,116,-98,-99,-90,-106,115,-98,-507,-507,-106,-507,-507,-507',
'-507,-507,219,220,219,220,769,219,220,271,666,-92,116,272,-93,-102,116',
'115,-97,274,-102,115,629,-94,666,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,-507,-507,490,-604,-507,-507,-507,665,-507',
'-507,94,95,-507,222,116,-507,-507,611,-507,115,-507,665,-507,-600,-507',
'-507,-507,-507,-507,-507,-507,-105,-507,825,-507,591,-105,116,-507,-104',
'217,-418,115,611,-104,-507,116,-507,-507,-507,-507,115,-507,611,-507',
'223,457,223,-616,-607,223,889,-84,271,-507,-507,-607,-607,-607,94,95',
'-607,-607,-607,-511,-607,-504,-70,613,612,609,-511,-97,-504,-607,-607',
'-607,-607,-600,96,97,713,-504,223,790,-607,-607,-106,-607,-607,-607',
'-607,-607,83,613,612,609,219,220,892,-600,84,611,-106,613,612,565,895',
'562,561,560,791,563,768,-607,681,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,530,-504,-607,-607,-607,215,792,-607',
'96,97,-607,-101,966,-607,-607,611,-607,897,-607,899,-607,752,-607,-607',
'-607,-607,-607,-607,-607,570,-607,-607,-607,613,612,747,116,-607,-103',
'748,573,115,766,611,-607,-607,-607,-607,-607,-603,-607,-289,-607,-607',
'985,223,116,-105,-289,-289,-289,115,-607,-102,-289,-289,901,-289,215',
'570,216,-607,902,581,580,1016,613,612,624,-601,573,116,-514,459,1014',
'458,115,-289,-289,-514,-289,-289,-289,-289,-289,565,-290,562,561,560',
'456,563,-607,-290,613,612,631,574,-504,265,-515,530,-290,581,580,-504',
'266,-515,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-507,216,-289,-289,-289,611,649,-507,616,695,-289,910,-601',
'-289,643,574,-507,776,-289,-262,-289,-96,-289,-289,-289,-289,-289,-289',
'-289,-290,-289,-337,-289,215,-601,914,-105,916,-337,917,966,851,611',
'223,-607,-289,-289,-337,-95,752,-289,-607,-607,-607,581,580,-92,-607',
'-607,-91,-607,-289,-289,-104,713,-507,613,612,-289,-607,243,-101,215',
'-604,-100,215,920,-289,922,454,-607,-607,750,-607,-607,-607,-607,-607',
'455,542,116,752,544,-290,215,115,-337,644,216,611,-290,594,240,613,612',
'619,242,241,924,-290,592,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-516,-289,-607,-607,-607,542,650,-516,544,926',
'-607,926,216,-607,-94,216,-516,-518,-607,223,-607,932,-607,-607,-607',
'-607,-607,-607,-607,-103,-607,-607,-607,-290,216,613,612,614,116,223',
'-512,934,1009,115,-608,-607,-607,-512,-93,-519,-607,-608,-608,-608,219',
'220,-608,-608,-608,-89,-608,-517,-607,-102,739,-516,215,243,-517,-608',
'-608,-608,-608,523,-98,542,542,-517,544,541,-608,-608,521,-608,-608',
'-608,-608,-608,-510,-280,-513,-90,936,265,215,-510,-280,-513,591,240',
'266,533,-509,242,241,-280,-99,219,220,-509,455,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,-608,-608,732,-517,-608,-608,-608',
'-289,216,-608,219,220,-608,412,-289,-608,-608,407,-608,-604,-608,391',
'-608,-289,-608,-608,-608,-608,-608,-608,-608,-280,-608,-608,-608,565',
'216,562,561,560,570,563,119,120,121,122,123,-608,-608,-608,-608,573',
'-608,-627,-608,119,120,121,122,123,-627,-627,-627,618,-608,-627,-627',
'-627,223,-627,215,388,-289,568,385,243,946,214,-627,-627,-627,947,578',
'577,581,580,212,855,825,-627,-627,223,-627,-627,-627,-627,-627,963,950',
'562,561,560,565,563,562,561,560,240,563,-265,409,242,241,238,239,411',
'410,730,574,382,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627',
'-627,-627,-627,729,216,-627,-627,-627,728,722,-627,720,274,-627,718',
'716,-627,-627,725,-627,960,-627,358,-627,714,-627,-627,-627,-627,-627',
'-627,-627,967,-627,-627,-627,968,713,565,970,562,561,560,971,563,710',
'223,-281,-627,-627,622,-627,505,-627,-281,-281,-281,704,625,-281,-281',
'-281,243,-281,565,-627,562,561,560,701,563,243,987,-281,-281,-281,722',
'322,257,258,989,990,700,-281,-281,931,-281,-281,-281,-281,-281,628,994',
'695,240,713,246,999,242,241,238,239,722,240,244,1001,245,242,241,238',
'239,725,1003,1005,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,1005,535,-281,-281,-281,635,1012,-281,321,262,-281',
'223,1017,-281,-281,-262,-281,1018,-281,926,-281,926,-281,-281,-281,-281',
'-281,-281,-281,926,-281,1023,-281,565,684,562,561,560,570,563,119,120',
'121,122,123,-281,-281,-281,-281,573,-281,-426,-281,119,120,121,122,123',
'-426,-426,-426,987,-281,-426,-426,-426,-84,-426,243,878,879,568,223',
'880,110,111,-426,-426,-426,218,637,223,581,580,257,258,641,-426,-426',
'223,-426,-426,-426,-426,-426,565,-604,562,561,560,240,563,246,-603,242',
'241,238,239,700,223,244,565,245,562,561,560,574,563,-426,-426,-426,-426',
'-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,642,722,-426,-426',
'-426,243,211,-426,243,274,-426,243,987,-426,-426,1046,-426,722,-426',
'1047,-426,1048,-426,-426,-426,-426,-426,-426,-426,1049,-426,-426,-426',
'1005,1005,565,1005,562,561,560,223,563,210,209,-609,-426,-426,926,-426',
'987,-426,-609,-609,-609,243,112,-609,-609,-609,243,-609,565,-426,562',
'561,560,274,563,539,-609,-609,-609,-609,722,243,257,258,695,223,505',
'-609,-609,531,-609,-609,-609,-609,-609,274,503,653,240,274,246,695,242',
'241,238,239,722,527,244,565,245,562,561,560,1005,563,243,262,-609,-609',
'-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,825,274',
'-609,-609,-609,223,3,-609,223,223,-609,795,223,-609,-609,722,-609,545',
'-609,277,-609,849,-609,-609,-609,-609,-609,-609,-609,490,-609,-609,-609',
'565,223,562,561,560,570,563,825,859,223,524,591,-609,-609,-609,-609',
'573,-609,-297,-609,490,401,517,595,596,-297,-297,-297,777,-609,-297',
'-297,-297,516,-297,243,223,,568,551,,,,,-297,-297,,578,577,581,580,257',
'258,,-297,-297,,-297,-297,-297,-297,-297,963,,562,561,560,240,563,246',
',242,241,238,239,,,244,,245,,,,574,,-297,-297,-297,-297,-297,-297,-297',
'-297,-297,-297,-297,-297,-297,-297,,,-297,-297,-297,,,-297,,277,-297',
',,-297,-297,,-297,,-297,,-297,,-297,-297,-297,-297,-297,-297,-297,,-297',
',-297,,,,,,,,,,,,,-297,-297,,-297,,-297,297,72,73,74,12,60,,,,66,67',
'-297,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,',
',,,654,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258',
',43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,261,,-239,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,638,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255',
'256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65',
',,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,654,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247',
'252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61',
'62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83',
'85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,223,261,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255',
'256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65',
',,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247',
'252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61',
'62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83',
'85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628',
',,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628',
'-628,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,-628,-628,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,260,255,256,,-628,-628,,,257,258,,43,,,36,,,61,62,,',
'63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,,,36',
',,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257,258,',
'43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,,255,256,,,,,,257,258',
',43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,8,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,247,252,253,254,249,251,,,255,256,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,',
',,257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628',
'-628,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43',
',,36,,,61,62,,,63,,38,240,,,47,242,241,238,239,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,228,,,234',
',,61,62,,,63,,,240,,246,47,242,241,238,239,,,,233,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,',
',108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,',
',,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,',
',,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,',
',84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,',
'108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,303,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,320,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,,,47',
',,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,977,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,286,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116',
',,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,',
',,,352,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,',
',,,904,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47',
',,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,223,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,519,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
'286,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,',
'310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,417,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,',
',304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,',
',304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,535,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,678,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'597,59,100,99,598,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,599',
',,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'597,59,100,99,598,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,599',
',,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,774,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,',
',,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
'678,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,',
',,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,',
',312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,',
',,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,678,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,',
',65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,',
',,,,,,,,,,,,,,,,,904,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,',
'48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,',
',,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,',
',,91,287,85,86,87,89,,,,84,288,223,,,,,,65,,291,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,',
',108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,',
',,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171',
'178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,',
',158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,367,366,368,365,172,191',
'190,,,,,,171,178,169,170,362,363,364,360,129,100,99,361,,102,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,374',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,398,397,128,,399,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,',
',,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191',
'190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,-627',
',,,,,92,-627,-627,-627,,,-627,-627,-627,158,-627,565,,562,561,560,570',
'563,,-627,-627,,,,,,,573,,,-627,-627,,-627,-627,-627,-627,-627,,,565',
',562,561,560,570,563,,,568,,,,,,,573,,578,577,581,580,,,,,,,,,,,-627',
',,,,,568,-627,,,,,274,-627,,,,581,580,,,,574,,863,438,,,864,,,,,,-627',
'-627,,161,162,,157,139,140,141,148,145,147,,-627,142,143,574,,-627,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,488,431,,,489,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560,570',
'563,,,,488,431,,,489,,573,,,,,158,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,568,760,163,164,149,150,,,,578,577,581,580,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560',
'570,563,,,1041,438,574,,1042,,,573,,,,,158,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,568,163,164,149,150,,,,,,274,581,580,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,744,438,',
',745,,574,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,',
',163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,742,431,,,743,,,,,,,,,161,162,158,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,434,438,',
',433,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,427,431,,,428,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560,570',
'563,565,,562,561,560,570,563,,,573,,,,,158,,573,565,,562,561,560,570',
'563,,,,,,,,568,,573,,,,,568,,578,577,581,580,,,,578,577,581,580,,,,565',
'568,562,561,560,570,563,,,,,,581,580,,565,573,562,561,560,570,563,574',
',,,,,,574,,573,,,,,,,568,565,,562,561,560,570,563,574,578,577,581,580',
',,568,565,573,562,561,560,570,563,,578,577,581,580,,,,565,573,562,561',
'560,570,563,,568,,,,,,574,,573,,,581,580,,,568,,,,,,574,,,,,581,580',
',,568,,,658,438,,,659,,,,581,580,,,574,161,162,,157,139,140,141,148',
'145,147,,,142,143,574,,,163,164,149,150,,,,,,274,,,574,,,,,154,153,',
'138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,656,431,,,657',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,565,165,562,561,560,570,563,,,,,,,,,,573,,,,,158,,,,,,,,,,',
',,,,,,568,760,691,438,,,692,,,578,577,581,580,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,574,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,688,431,',
',689,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,1011,438,,,1010,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,656,431,,,657',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,1039,431,,,1040,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,658,438,,,659,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,565,165,562,561,560,570,563,565,,562,561,560,570,563,,,573,,,,',
'158,,573,565,,562,561,560,570,563,,,,,,,,568,,573,,,,,568,,578,577,581',
'580,,,,,,581,580,,,,565,568,562,561,560,570,563,,,,,,581,580,,565,573',
'562,561,560,570,563,574,,,,,,,574,,573,,,,,,,568,565,,562,561,560,570',
'563,574,,,581,580,,,568,,573,,,,,,,578,577,581,580,,,,,,,,,,,,568,,',
',,,574,,,578,577,581,580,223,,,,,,,,574,,,,,,,,,,,,,,,,,,,,,,,,574' ]
        racc_action_table = arr = ::Array.new(26492, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'659,765,765,765,765,765,765,659,659,659,765,765,659,659,659,765,659',
'765,765,765,765,765,765,765,22,861,659,659,659,765,765,765,765,765,765',
'765,659,659,765,659,659,659,659,659,765,765,298,765,765,765,765,765',
'765,765,765,765,691,765,765,765,22,765,765,603,765,765,765,659,659,659',
'659,659,659,659,659,659,659,659,659,659,659,688,689,659,659,659,765',
'659,659,765,285,659,765,765,659,659,765,659,765,659,773,659,765,659',
'659,659,659,659,659,659,765,659,313,659,794,765,765,765,765,765,765',
'670,691,691,765,765,659,659,659,659,861,659,765,659,975,765,765,765',
'98,226,765,765,860,659,659,98,98,98,688,689,98,98,98,820,98,670,1039',
'587,691,282,1054,691,98,349,98,98,98,64,5,603,486,794,1040,5,98,98,691',
'98,98,98,98,98,913,688,689,281,688,689,603,595,550,935,974,603,745,978',
'226,731,731,313,389,688,689,350,486,98,98,98,98,98,98,98,98,98,98,98',
'98,98,98,1041,820,98,98,98,742,98,98,744,778,98,862,353,98,98,588,98',
'743,98,636,98,669,98,98,98,98,98,98,98,975,98,227,98,632,975,64,820',
'860,587,820,860,745,860,587,389,98,98,98,98,349,98,1039,98,1017,820',
'1054,1039,101,392,342,1054,1042,98,98,101,101,101,1040,343,101,101,101',
'1040,101,744,595,550,913,1041,630,745,101,913,101,101,101,935,974,227',
'350,978,935,974,101,101,978,101,101,101,101,101,763,763,451,451,627',
'698,698,669,494,742,862,29,744,1041,588,862,353,270,1041,588,392,743',
'495,101,101,101,101,101,101,101,101,101,101,101,101,101,101,267,1042',
'101,101,101,494,101,101,318,318,101,235,870,101,101,376,101,870,101',
'495,101,597,101,101,101,101,101,101,101,1017,101,992,101,992,1017,342',
'361,1042,18,29,342,507,1042,361,343,101,101,101,101,343,101,623,101',
'763,229,451,61,658,698,796,683,29,101,101,658,658,658,44,44,658,658',
'658,368,658,597,683,376,376,376,368,18,597,658,658,658,658,597,318,318',
'797,597,61,656,658,658,18,658,658,658,658,658,80,507,507,507,341,341',
'799,597,80,620,229,623,623,931,800,931,931,931,657,931,623,863,507,658',
'658,658,658,658,658,658,658,658,658,658,658,658,658,456,597,658,658',
'658,965,658,658,44,44,658,656,965,658,658,386,658,801,658,803,658,965',
'658,658,658,658,658,658,658,710,658,658,658,620,620,599,761,863,657',
'599,710,761,620,394,863,658,658,658,658,863,658,433,658,863,931,804',
'294,456,433,433,433,294,658,658,433,433,805,433,976,889,965,863,806',
'710,710,976,386,386,386,598,889,944,362,231,976,230,944,433,433,362',
'433,433,433,433,433,725,524,725,725,725,228,725,863,524,394,394,394',
'710,360,27,364,322,524,889,889,360,27,364,433,433,433,433,433,433,433',
'433,433,433,433,433,433,433,598,976,433,433,433,380,433,598,380,819',
'433,823,598,433,427,889,598,639,433,826,433,322,433,433,433,433,433',
'433,433,524,433,49,433,903,598,827,322,832,49,833,903,725,383,834,434',
'433,433,49,433,903,433,434,434,434,713,713,427,434,434,639,434,864,433',
'433,835,598,380,380,864,434,462,427,225,864,639,601,839,864,840,225',
'434,434,601,434,434,434,434,434,225,703,346,601,703,748,351,346,49,428',
'903,378,748,351,462,383,383,383,462,462,842,748,351,434,434,434,434',
'434,434,434,434,434,434,434,434,434,434,305,864,434,434,434,548,434',
'305,548,843,434,845,225,434,428,601,305,41,434,848,434,850,434,434,434',
'434,434,434,434,428,434,434,434,748,351,378,378,378,756,961,365,853',
'961,756,438,434,434,365,434,42,434,438,438,438,20,20,438,438,438,41',
'438,306,434,434,590,305,307,463,306,438,438,438,438,307,41,335,334,306',
'335,334,438,438,307,438,438,438,438,438,367,309,363,42,856,370,324,367',
'309,363,589,463,370,324,366,463,463,309,42,757,757,366,324,438,438,438',
'438,438,438,438,438,438,438,438,438,438,438,584,306,438,438,438,692',
'307,438,538,538,438,207,692,438,438,124,438,692,438,90,438,692,438,438',
'438,438,438,438,438,309,438,438,438,716,324,716,716,716,716,716,9,9',
'9,9,9,438,438,438,438,716,438,429,438,513,513,513,513,513,429,429,429',
'382,438,429,429,429,866,429,17,89,692,716,88,482,871,17,429,429,429',
'872,716,716,716,716,17,1025,1025,429,429,873,429,429,429,429,429,1009',
'882,1009,1009,1009,568,1009,568,568,568,482,568,883,126,482,482,482',
'482,126,126,582,716,87,429,429,429,429,429,429,429,429,429,429,429,429',
'429,429,579,17,429,429,429,575,568,429,567,429,429,558,557,429,429,568',
'429,900,429,72,429,556,429,429,429,429,429,429,429,904,429,429,429,905',
'554,849,907,849,849,849,908,849,553,48,59,429,429,385,429,549,429,59',
'59,59,546,388,59,59,59,472,59,722,429,722,722,722,537,722,481,933,59',
'59,59,849,43,472,472,937,938,536,59,59,849,59,59,59,59,59,391,943,528',
'472,951,472,954,472,472,472,472,722,481,472,955,472,481,481,481,481',
'722,956,957,59,59,59,59,59,59,59,59,59,59,59,59,59,59,959,525,59,59',
'59,413,969,59,40,25,59,520,977,59,59,416,59,980,59,981,59,982,59,59',
'59,59,59,59,59,983,59,984,59,718,518,718,718,718,718,718,296,296,296',
'296,296,59,59,59,59,718,59,30,59,682,682,682,682,682,30,30,30,986,59',
'30,30,30,515,30,473,764,764,718,514,764,764,764,30,30,30,19,418,422',
'718,718,473,473,425,30,30,497,30,30,30,30,30,851,1010,851,851,851,473',
'851,473,1011,473,473,473,473,1013,496,473,987,473,987,987,987,718,987',
'30,30,30,30,30,30,30,30,30,30,30,30,30,30,426,851,30,30,30,467,16,30',
'466,30,30,465,1024,30,30,1029,30,987,30,1030,30,1031,30,30,30,30,30',
'30,30,1032,30,30,30,1033,1034,1023,1035,1023,1023,1023,1038,1023,15',
'13,439,30,30,1043,30,1044,30,439,439,439,464,3,439,439,439,474,439,932',
'30,932,932,932,435,932,332,439,439,439,439,1023,326,474,474,685,687',
'677,439,439,323,439,439,439,439,439,690,675,443,474,693,474,694,474',
'474,474,474,932,319,474,985,474,985,985,985,1056,985,697,668,439,439',
'439,439,439,439,439,439,439,439,439,439,439,439,699,317,439,439,439',
'702,1,439,312,709,439,662,660,439,439,985,439,336,439,311,439,724,439',
'439,439,439,439,439,439,651,439,439,439,340,726,340,340,340,340,340',
'733,738,741,308,347,439,439,439,439,340,439,31,439,645,348,302,352,354',
'31,31,31,640,439,31,31,31,301,31,475,300,,340,340,,,,,31,31,,340,340',
'340,340,475,475,,31,31,,31,31,31,31,31,901,,901,901,901,475,901,475',
',475,475,475,475,,,475,,475,,,,340,,31,31,31,31,31,31,31,31,31,31,31',
'31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31,31,31,31',
'31,31,,31,,31,,,,,,,,,,,,,31,31,,31,,31,234,234,234,234,234,234,,,,234',
'234,31,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234',
'234,,,234,,,,,446,234,234,,234,234,234,234,234,234,234,234,234,,234',
'234,234,,234,234,,234,234,234,446,446,446,446,446,446,446,446,446,446',
'446,,446,446,,,446,446,,234,,,234,,,234,234,,,234,,234,446,,446,234',
'446,446,446,446,446,446,446,234,446,,,,234,234,234,234,234,234,,,,234',
'234,,446,,446,,,234,,,234,234,234,,,234,234,810,810,810,810,810,810',
',,,810,810,,,,810,,810,810,810,810,810,810,810,,,,,,810,810,810,810',
'810,810,810,,,810,,,,,421,810,810,,810,810,810,810,810,810,810,810,810',
',810,810,810,,810,810,,810,810,810,421,421,421,421,421,421,421,421,421',
'421,421,,421,421,,,421,421,,810,,,810,,,810,810,,,810,,810,421,,421',
'810,421,421,421,421,421,421,421,810,421,,,,810,810,810,810,810,810,',
',,810,810,,421,,,,,810,,,810,810,810,,,810,810,209,209,209,209,209,209',
',,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209',
'209,209,209,,,209,,,,,661,209,209,,209,209,209,209,209,209,209,209,209',
',209,209,209,,209,209,,209,209,209,661,661,661,661,661,661,661,661,661',
'661,661,,661,661,,,661,661,,209,,,209,,,209,209,,,209,,209,661,,661',
'209,661,661,661,661,661,661,661,209,661,,,,209,209,209,209,209,209,',
',,209,209,,661,,,,,209,,,209,209,209,,,209,209,940,940,940,940,940,940',
',,,940,940,,,,940,,940,940,940,940,940,940,940,,,,,,940,940,940,940',
'940,940,940,,,940,,,,,,940,940,,940,940,940,940,940,940,940,940,940',
',940,940,940,,940,940,,940,940,940,787,787,787,787,787,787,787,787,787',
'787,787,,787,787,,,787,787,,940,,,940,,,940,940,,,940,,940,787,,787',
'940,787,787,787,787,787,787,787,940,787,,,,940,940,940,940,940,940,',
',,940,940,,787,,,,,940,,,940,940,940,,,940,940,707,707,707,707,707,707',
',,,707,707,,,,707,,707,707,707,707,707,707,707,,,,,,707,707,707,707',
'707,707,707,,,707,,,,,,707,707,,707,707,707,707,707,707,707,707,707',
',707,707,707,,707,707,,707,707,707,485,485,485,485,485,485,485,485,485',
'485,485,,485,485,,,485,485,,707,,,707,,,707,707,,,707,,707,485,,485',
'707,485,485,485,485,485,485,485,707,485,,,,707,707,707,707,707,707,',
',,707,707,485,485,,,,,707,,,707,707,707,,,707,707,858,858,858,858,858',
'858,,,,858,858,,,,858,,858,858,858,858,858,858,858,,,,,,858,858,858',
'858,858,858,858,,,858,,,,,,858,858,,858,858,858,858,858,858,858,858',
'858,,858,858,858,,858,858,,858,858,858,441,441,441,441,441,441,441,441',
'441,441,441,,441,441,,,441,441,,858,,,858,,,858,858,,,858,,858,441,',
'441,858,441,441,441,441,441,441,441,858,441,,,,858,858,858,858,858,858',
',,,858,858,,441,,,,,858,,,858,858,858,,,858,858,857,857,857,857,857',
'857,,,,857,857,,,,857,,857,857,857,857,857,857,857,,,,,,857,857,857',
'857,857,857,857,,,857,,,,,,857,857,,857,857,857,857,857,857,857,857',
'857,,857,857,857,,857,857,,857,857,857,775,775,775,775,775,775,775,775',
'775,775,775,,775,775,,,775,775,,857,,,857,,,857,857,,,857,,857,775,',
'775,857,775,775,775,775,775,775,775,857,775,,,,857,857,857,857,857,857',
',,,857,857,,775,,,,,857,,,857,857,857,,,857,857,997,997,997,997,997',
'997,,,,997,997,,,,997,,997,997,997,997,997,997,997,,,,,,997,997,997',
'997,997,997,997,,,997,,,,,,997,997,,997,997,997,997,997,997,997,997',
'997,,997,997,997,,997,997,,997,997,997,780,780,780,780,780,780,780,780',
'780,780,780,,780,780,,,780,780,,997,,,997,,,997,997,,,997,,997,780,',
'780,997,780,780,780,780,780,780,780,997,780,,,,997,997,997,997,997,997',
',,,997,997,,780,,,,,997,,,997,997,997,,,997,997,996,996,996,996,996',
'996,,,,996,996,,,,996,,996,996,996,996,996,996,996,,,,,,996,996,996',
'996,996,996,996,,,996,,,,,,996,996,,996,996,996,996,996,996,996,996',
'996,,996,996,996,,996,996,,996,996,996,782,782,782,782,782,782,782,782',
'782,782,782,,782,782,,,782,782,,996,,,996,,,996,996,,,996,,996,782,',
'782,996,782,782,782,782,782,782,782,996,782,,,,996,996,996,996,996,996',
',,,996,996,,782,,,,,996,,,996,996,996,,,996,996,993,993,993,993,993',
'993,,,,993,993,,,,993,,993,993,993,993,993,993,993,,,,,,993,993,993',
'993,993,993,993,,,993,,,,,,993,993,,993,993,993,993,993,993,993,993',
'993,,993,993,993,,993,993,,993,993,993,24,24,24,24,24,24,24,24,24,24',
'24,,24,24,,,24,24,,993,,,993,,,993,993,,,993,,993,24,,24,993,24,24,24',
'24,24,24,24,993,24,,,,993,993,993,993,993,993,,,,993,993,,24,,,,,993',
',,993,993,993,,,993,993,708,708,708,708,708,708,,,,708,708,,,,708,,708',
'708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708,,,708,,,,,',
'708,708,,708,708,708,708,708,708,708,708,708,,708,708,708,,708,708,',
'708,708,708,789,789,789,789,789,789,789,789,789,789,789,,789,789,,,789',
'789,,708,,,708,,,708,708,,,708,,708,789,,789,708,789,789,789,789,789',
'789,789,708,789,,,,708,708,708,708,708,708,,,,708,708,,789,,,,,708,',
',708,708,708,,,708,708,910,910,910,910,910,910,,,,910,910,,,,910,,910',
'910,910,910,910,910,910,,,,,,910,910,910,910,910,910,910,,,910,,,,,',
'910,910,,910,910,910,910,910,910,910,910,910,,910,910,910,,910,910,',
'910,910,910,279,279,279,279,279,279,279,279,279,279,279,,279,279,,,279',
'279,,910,,,910,,,910,910,,,910,,910,279,,279,910,279,279,279,279,279',
'279,279,910,279,,,,910,910,910,910,910,910,,,,910,910,,279,,,,,910,',
',910,910,910,,,910,910,825,825,825,825,825,825,,,,825,825,,,,825,,825',
'825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,,825,,,,,',
'825,825,,825,825,825,825,825,825,825,825,825,,825,825,825,,825,825,',
'825,825,825,888,888,888,888,888,888,888,888,888,888,888,,888,888,,,888',
'888,,825,,,825,,,825,825,,,825,,825,888,,888,825,888,888,888,888,888',
'888,888,825,888,,,,825,825,825,825,825,825,,,,825,825,,888,,,,,825,',
',825,825,825,,,825,825,814,814,814,814,814,814,,,,814,814,,,,814,,814',
'814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814,,,814,,,,,',
'814,814,,814,814,814,814,814,814,814,814,814,,814,814,814,,814,814,',
'814,814,814,534,534,534,534,534,534,534,534,534,534,534,,534,534,,,534',
'534,,814,,,814,,,814,814,,,814,,814,534,,534,814,534,534,534,534,534',
'534,534,814,534,,,,814,814,814,814,814,814,,,,814,814,,534,,,,,814,',
',814,814,814,,,814,814,815,815,815,815,815,815,,,,815,815,,,,815,,815',
'815,815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,',
'815,815,,815,815,815,815,815,815,815,815,815,,815,815,815,,815,815,',
'815,815,815,696,696,696,696,696,696,696,696,696,696,696,,696,696,,,696',
'696,,815,,,815,,,815,815,,,815,,815,696,,696,815,696,696,696,696,696',
'696,696,815,696,,,,815,815,815,815,815,815,,,,815,815,,696,,,,,815,',
',815,815,815,,,815,815,906,906,906,906,906,906,,,,906,906,,,,906,,906',
'906,906,906,906,906,906,,,,,,906,906,906,906,906,906,906,,,906,,,,,',
'906,906,,906,906,906,906,906,906,906,906,906,,906,906,906,,906,906,',
'906,906,906,785,785,785,785,785,785,785,785,785,785,785,,785,785,,,785',
'785,,906,,,906,,,906,906,,,906,,906,785,,785,906,785,785,785,785,785',
'785,785,906,785,,,,906,906,906,906,906,906,,,,906,906,,785,,,,,906,',
',906,906,906,,,906,906,304,304,304,304,304,304,,,,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,',
'304,304,,304,304,304,304,304,304,304,304,304,,304,304,304,,304,304,',
'304,304,304,885,885,885,885,885,885,885,885,885,885,885,,885,885,,,885',
'885,,304,,,304,,,304,304,,,304,,304,885,,885,304,885,885,885,885,885',
'885,885,304,885,,,,304,304,304,304,304,304,,,,304,304,,885,,,,,304,',
',304,304,304,,,304,304,988,988,988,988,988,988,,,,988,988,,,,988,,988',
'988,988,988,988,988,988,,,,,,988,988,988,988,988,988,988,,,988,,,,,',
'988,988,,988,988,988,988,988,988,988,988,988,,988,988,988,,988,988,',
'988,988,988,477,477,477,477,477,477,477,,,477,477,,,,,,477,477,,988',
',,988,,,988,988,,,988,,988,477,,477,988,477,477,477,477,477,477,477',
'988,477,,,,988,988,988,988,988,988,,,,988,988,,,,,,,988,,,988,988,988',
',,988,988,329,329,329,329,329,329,,,,329,329,,,,329,,329,329,329,329',
'329,329,329,,,,,,329,329,329,329,329,329,329,,,329,,,,,,329,329,,329',
'329,329,329,329,329,329,329,329,,329,329,329,,329,329,,329,329,329,471',
'471,471,471,471,471,471,,,471,471,,,,,,471,471,,329,,,329,,,329,329',
',,329,,329,471,,471,329,471,471,471,471,471,471,471,329,471,,,,329,329',
'329,329,329,329,,,,329,329,,,,,,,329,,,329,329,329,,,329,329,2,2,2,2',
'2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2',
'2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,461,461,461,461,461,461,461,461,461',
'461,461,,461,461,,,461,461,,2,,,2,,,2,2,,,2,,2,461,,461,2,461,461,461',
'461,461,461,461,2,461,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,758',
'758,758,758,758,758,,,,758,758,,,,758,,758,758,758,758,758,758,758,',
',,,,758,758,758,758,758,758,758,,,758,,,,,,758,758,,758,758,758,758',
'758,758,758,758,758,,758,758,758,,758,758,,758,758,758,460,460,460,460',
'460,460,460,460,460,460,460,,460,460,,,460,460,,758,,,758,,,758,758',
',,758,,758,460,,460,758,460,460,460,460,460,460,460,758,460,,,,758,758',
'758,758,758,758,,,,758,758,,,,,,,758,,,758,758,758,,,758,758,867,867',
'867,867,867,867,,,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,',
'867,867,867,867,867,867,867,,,867,,,,,,867,867,,867,867,867,867,867',
'867,867,867,867,,867,867,867,,867,867,,867,867,867,480,480,480,480,480',
'480,480,,,480,480,,,,,,480,480,,867,,,867,,,867,867,,,867,,867,480,',
'480,867,480,480,480,480,480,480,480,867,480,,,,867,867,867,867,867,867',
',,,867,867,,,,,,,867,,,867,867,867,,,867,867,299,299,299,299,299,299',
',,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299,299,299',
'299,299,299,,,299,,,,,,299,299,,299,299,299,299,299,299,299,299,299',
',299,299,299,,299,299,,299,299,299,476,476,476,476,476,476,476,,,476',
'476,,,,,,476,476,,299,,,299,,,299,299,,,299,,299,476,,476,299,476,476',
'476,476,476,476,476,299,476,,,,299,299,299,299,299,299,,,,299,299,,',
',,,,299,,,299,299,299,,,299,299,759,759,759,759,759,759,,,,759,759,',
',,759,,759,759,759,759,759,759,759,,,,,,759,759,759,759,759,759,759',
',,759,,,,,,759,759,,759,759,759,759,759,759,759,759,759,,759,759,759',
',759,759,,759,759,759,484,484,484,484,484,484,484,484,,484,484,,,,,',
'484,484,,759,,,759,,,759,759,,,759,,759,484,,484,759,484,484,484,484',
'484,484,484,759,484,,,,759,759,759,759,759,759,,,,759,759,,,,,,,759',
',,759,759,759,,,759,759,407,407,407,407,407,407,,,,407,407,,,,407,,407',
'407,407,407,407,407,407,,,,,,407,407,407,407,407,407,407,,,407,,,,,',
'407,407,407,407,407,407,407,407,407,407,407,407,,407,407,407,,407,407',
',407,407,407,483,483,483,483,483,483,483,,,483,483,,,,,,483,483,,407',
',,407,,,407,407,,,407,,407,483,,483,407,483,483,483,483,483,483,483',
'407,483,,,,407,407,407,407,407,407,,,,407,407,,,,,,,407,,,407,407,407',
',,407,407,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,',
',,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36,36,36,36,36,36,36,',
'36,36,36,,36,36,,36,36,36,478,478,478,478,478,478,478,,,478,478,,,,',
',478,478,,36,,,36,,,36,36,,,36,,36,478,,478,36,478,478,478,478,478,478',
'478,36,478,,,,36,36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36',
'583,583,583,583,583,583,,,,583,583,,,,583,,583,583,583,583,583,583,583',
',,,,,583,583,583,583,583,583,583,,,583,,,,,,583,583,,583,583,583,583',
'583,583,583,583,583,,583,583,583,,583,583,,583,583,583,479,479,479,479',
'479,479,479,,,479,479,,,,,,479,479,,583,,,583,,,583,583,,,583,,583,479',
',479,583,479,479,479,479,479,479,479,583,479,,,,583,583,583,583,583',
'583,,,,583,583,,,,,,,583,,,583,583,583,,,583,583,586,586,586,586,586',
'586,,,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586',
'586,586,586,586,,,586,,,,,,586,586,,586,586,586,586,586,586,586,586',
'586,,586,586,586,,586,586,,586,586,586,470,,,,,,,,,,,,,,,,470,470,,586',
',,586,,,586,586,,,586,,586,470,,,586,470,470,470,470,,,,586,,,,,586',
'586,586,586,586,586,,,,586,586,,,,,,,586,,,586,586,586,,,586,586,973',
'973,973,973,973,973,,,,973,973,,,,973,,973,973,973,973,973,973,973,',
',,,,973,973,973,973,973,973,973,,,973,,,,,,973,973,,973,973,973,973',
'973,973,973,973,973,,973,973,973,,973,973,,973,973,973,469,,,,,,,,,',
',,,,,,469,469,,973,,,973,,,973,973,,,973,,973,469,,469,973,469,469,469',
'469,,,,973,,,,,973,973,973,973,973,973,,,,973,973,,,,,,,973,,,973,973',
'973,,,973,973,653,653,653,,653,,,,653,653,,,,653,,653,653,653,653,653',
'653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,,,653,,,653,653,653',
'653,653,653,653,653,,653,653,653,,653,653,,653,653,653,468,,,,,,,,,',
',,,,,,468,468,,653,,,653,,,653,653,,,653,,,468,,468,653,468,468,468',
'468,,,,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653',
'653,,,653,653,455,455,455,,455,,,,455,455,,,,455,,455,455,455,455,455',
'455,455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455',
'455,455,455,455,455,455,455,455,455,,455,455,,455,455,455,,,,,,,,,,',
',,,,,,,,,455,,,455,,,455,455,,,455,,455,,455,,455,,,,,,,,455,,,,,455',
'455,455,455,455,455,,,,455,455,,,,,,,455,,455,455,455,455,,,455,455',
'8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8',
'8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8',
'1014,1014,1014,,1014,,,,1014,1014,,,,1014,,1014,1014,1014,1014,1014',
'1014,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,,,1014,,,,,,,1014',
',,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,,1014',
'1014,,1014,1014,1014,,,,,,,,,,,,,,,,,,,,1014,,,1014,,,1014,1014,,,1014',
',1014,,1014,,1014,,,,,,,,1014,,,,,1014,1014,1014,1014,1014,1014,,,,1014',
'1014,,,,,,,1014,,1014,1014,1014,1014,,,1014,1014,23,23,23,,23,,,,23',
'23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,',
'23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,',
',,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23',
',,,23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32',
'32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32',
'32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,',
'32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32',
',,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33',
'33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33',
'33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33',
'33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33',
',33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34',
'34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34',
'34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34',
',34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34',
'34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,',
',37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37',
'37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,',
',,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38',
'38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38',
',,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,',
',,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38',
'38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,939,939,939,,939,,,,939,939',
',,,939,,939,939,939,939,939,939,939,,,,,,939,939,939,939,939,939,939',
',,939,,,,,,,939,,,939,939,939,939,939,939,939,939,,939,939,939,,939',
'939,,939,939,939,,,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,939,',
',,939,,,,,,,,939,,,,,939,939,939,939,939,939,,,,939,939,,,,,,,939,,',
'939,939,939,,,939,939,914,914,914,,914,,,,914,914,,,,914,,914,914,914',
'914,914,914,914,,,,,,914,914,914,914,914,914,914,,,914,,,,,,,914,,,914',
'914,914,914,914,914,914,914,,914,914,914,,914,914,,,,914,,,,,,,,,,,',
',,,,,,,,914,,,914,,,914,914,,,914,,,,,,,,,,,,,,,,,,,914,914,914,914',
'914,914,,,,914,914,,,,,,,914,,,914,914,914,,,914,914,45,45,45,,45,,',
',45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,',
',,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,',
',,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45',
'45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46,,,,46',
',46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46',
'46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,',
',46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,',
',,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47',
'47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47',
'47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47',
',,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47',
',,47,47,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62',
'62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,',
'62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,',
',,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62',
'66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66',
'66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66',
'66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66',
'66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,',
'67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,',
',,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,',
',,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67',
'67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70',
',70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70',
'70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,',
',70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70',
',,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71',
'71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71',
'71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71',
',71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,',
',71,71,902,902,902,,902,,,,902,902,,,,902,,902,902,902,902,902,902,902',
',,,,,902,902,902,902,902,902,902,,,902,,,,,,,902,,,902,902,902,902,902',
'902,902,902,,902,902,902,,902,902,,,,902,,,,,,,,,,,,,,,,,,,,902,,,902',
',,902,902,,,902,,,,,,,,,,,,,,,,,,,902,902,902,902,902,902,,,,902,902',
',,,,,,902,,,902,902,902,,,902,902,887,887,887,,887,,,,887,887,,,,887',
',887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887,887,,,887',
',,,,,,887,,,887,887,887,887,887,887,887,887,,887,887,887,,887,887,,887',
'887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,,,,,887,,,,,,',
',887,,,,,887,887,887,887,887,887,,,,887,887,,,,,,,887,,,887,887,887',
',,887,887,886,886,886,,886,,,,886,886,,,,886,,886,886,886,886,886,886',
'886,,,,,,886,886,886,886,886,886,886,,,886,,,,,,,886,,,886,886,886,886',
'886,886,886,886,886,886,886,886,,886,886,,886,886,886,,,,,,,,,,,,,,',
',,,,,886,,,886,,,886,886,,,886,,,,886,,886,,,,,,,,886,,,,,886,886,886',
'886,886,886,,,,886,886,,,,,,,886,,886,886,886,886,,,886,886,868,868',
'868,,868,,,,868,868,,,,868,,868,868,868,868,868,868,868,,,,,,868,868',
'868,868,868,868,868,,,868,,,,,,,868,,,868,868,868,868,868,868,868,868',
',868,868,868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868',
'868,,,868,,,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868,,,,868,868',
',,,,,,868,,,868,868,868,,,868,868,114,114,114,114,114,,,,114,114,,,',
'114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,,',
'114,,,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114,114',
',114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,',
'114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114',
'114,,,114,114,114,,,114,114,119,119,119,,119,,,,119,119,,,,119,,119',
'119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,',
',119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119',
'119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119',
',,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119',
'119,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120,120,120',
',,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120,120,120',
'120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120',
',,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120',
',,,120,120,,,,,,,120,,,120,120,120,,,120,120,121,121,121,,121,,,,121',
'121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121',
'121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,',
'121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,',
',121,121,121,,,121,121,122,122,122,,122,,,,122,122,,,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122,122,,,,,',
',,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122',
'122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122,122,123',
'123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,',
'123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,',
',,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123',
'123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,210,210,210,,210',
',,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,',
'210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211',
'211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,',
',211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211',
'211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211',
',,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,217,217',
'217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218',
',218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218',
',,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218',
'218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,218,,,,218,,,',
',,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218',
',,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220',
',,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220',
',,220,220,220,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,221,221,,,221,221',
'222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,',
',222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,222,,,,,,222,,,222,222,222,,,222,222,855,855,855,,855,,,',
'855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855,855',
'855,855,,,855,,,,,,,855,,,855,855,855,855,855,855,855,855,,855,855,855',
',855,855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,',
',,,,855,,,,,,,,855,,,,,855,855,855,855,855,855,,,,855,855,,,,,,,855',
',,855,855,855,,,855,855,746,746,746,,746,,,,746,746,,,,746,,746,746',
'746,746,746,746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746',
',,746,746,746,746,746,746,746,746,,746,746,746,,746,746,,746,746,746',
',,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,746,,,,,,,,746,,,',
',746,746,746,746,746,746,,,,746,746,,,,,,,746,,,746,746,746,,,746,746',
'303,303,303,,303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,',
',303,303,303,303,303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303',
'303,303,,303,303,303,,303,303,,,,303,,,,,,,,,,,,,,,,,,,,303,,,303,,',
'303,303,,,303,,,,,,,,,,,,,,,,,,,303,303,303,303,303,303,,,,303,303,',
',,303,,,303,,,303,303,303,,,303,303,740,740,740,,740,,,,740,740,,,,740',
',740,740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740,,,740',
',,,,,,740,,,740,740,740,740,740,740,740,740,,740,740,740,,740,740,,740',
'740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,740,,,,740,,,',
',,,,740,,,,,740,740,740,740,740,740,,,,740,740,,,,,,,740,,,740,740,740',
',,740,740,720,720,720,,720,,,,720,720,,,,720,,720,720,720,720,720,720',
'720,,,,,,720,720,720,720,720,720,720,,,720,,,,,,,720,,,720,720,720,720',
'720,720,720,720,,720,720,720,,720,720,,720,720,720,,,,,,,,,,,,,,,,,',
',,720,,,720,,,720,720,,,720,,,,,,720,,,,,,,,720,,,,,720,720,720,720',
'720,720,,,,720,720,,,,,,,720,,,720,720,720,,,720,720,700,700,700,,700',
',,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700',
'700,700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700,,700,700',
'700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700',
',700,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700,700,,,,,,',
'700,,,700,700,700,,,700,700,695,695,695,,695,,,,695,695,,,,695,,695',
'695,695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,',
',695,,,695,695,695,695,695,695,695,695,,695,695,695,,695,695,,,,695',
',,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,,,,,,,,,,,,,,695,695',
'695,695,695,695,,,,695,695,,,,,,,695,,,695,695,695,,,695,695,320,320',
'320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320',
'320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320',
',320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320',
',,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,,,,320',
',,320,320,320,,,320,320,684,684,684,,684,,,,684,684,,,,684,,684,684',
'684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,,,684',
',,684,684,684,684,684,684,684,684,,684,684,684,,684,684,,,,684,,,,,',
',,,,,,,,,,,,,,684,,,684,,,684,684,,,684,,,,,,,,,,,,,,,,,,,684,684,684',
'684,684,684,,,,684,684,,,,,,,684,,,684,684,684,,,684,684,328,328,328',
',328,,,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328',
'328,328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328',
'328,328,,328,328,,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328',
'328,,,328,,,,,,328,,,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328',
',,,,,,328,,,328,328,328,,,328,328,331,331,331,,331,,,,331,331,,,,331',
',331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,331',
',,,,,,331,,,331,331,331,331,331,331,331,331,,331,331,331,,331,331,,331',
'331,331,,,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,,,,,331,,,,,,',
',331,,,,,331,331,331,331,331,331,,,,331,331,,,,,,,331,,,331,331,331',
',,331,331,681,681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681',
'681,,,,,,681,681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681',
'681,681,681,681,,681,681,681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,',
',,681,,,681,,,681,681,,,681,,,,,,681,,,,,,,,681,,,,,681,681,681,681',
'681,681,,,,681,681,,,,,,,681,,,681,681,681,,,681,681,678,678,678,,678',
',,,678,678,,,,678,,678,678,678,678,678,678,678,,,,,,678,678,678,678',
'678,678,678,,,678,,,,,,,678,,,678,678,678,678,678,678,678,678,,678,678',
'678,,678,678,,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678',
',,,,,678,,,,,,,,678,,,,,678,678,678,678,678,678,,,,678,678,,,,,,,678',
',,678,678,678,,,678,678,337,337,337,,337,,,,337,337,,,,337,,337,337',
'337,337,337,337,337,,,,,,337,337,337,337,337,337,337,,,337,,,,,,,337',
',,337,337,337,337,337,337,337,337,337,337,337,337,,337,337,,337,337',
'337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337,,,337,,,,,,337,,,,,,,,337',
',,,,337,337,337,337,337,337,,,,337,337,,,,,,,337,,337,337,337,337,,',
'337,337,654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654,654',
'654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654,654',
'654,654,654,654,,654,654,654,,654,654,,654,654,654,,,,,,,,,,,,,,,,,',
',,654,,,654,,,654,654,,,654,,,,,,654,,,,,,,,654,,,,,654,654,654,654',
'654,654,,,,654,654,,,,,,,654,,,654,654,654,,,654,654,344,344,344,,344',
',,,344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344',
'344,344,344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344',
'344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344',
',,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344',
',,344,344,344,,,344,344,345,345,345,,345,,,,345,345,,,,345,,345,345',
'345,345,345,345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345',
',,345,345,345,345,345,345,345,345,,345,345,345,,345,345,,345,345,345',
',,,,,,,,,,,,,,,,,,,345,,,345,,,345,345,,,345,,,,,,345,,,,,,,,345,,,',
',345,345,345,345,345,345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345',
'650,650,650,,650,,,,650,650,,,,650,,650,650,650,650,650,650,650,,,,',
',650,650,650,650,650,650,650,,,650,,,,,,,650,,,650,650,650,650,650,650',
'650,650,,650,650,650,,650,650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,',
'650,,,650,650,,,650,,,,,,650,,,,,,,,650,,,,,650,650,650,650,650,650',
',,,650,650,,,,,,,650,,,650,650,650,,,650,650,649,649,649,,649,,,,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,',
'649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,',
',,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,',
',649,649,649,,,649,649,644,644,644,,644,,,,644,644,,,,644,,644,644,644',
'644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644',
'644,644,644,644,644,644,644,,644,644,644,,644,644,,644,644,644,,,,,',
',,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644',
'644,644,644,644,644,,,,644,644,,,,,,,644,,,644,644,644,,,644,644,643',
'643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643',
'643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643',
'643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643',
',,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643',
'643,,,,,,,643,,,643,643,643,,,643,643,642,642,642,,642,,,,642,642,,',
',642,,642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,',
',642,,,,,,,642,,,642,642,642,642,642,642,642,642,642,642,642,642,,642',
'642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,,,642',
',642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,642',
'642,642,642,,,642,642,641,641,641,,641,,,,641,641,,,,641,,641,641,641',
'641,641,641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641',
'641,641,641,641,641,641,641,641,641,641,641,,641,641,,641,641,641,,',
',,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,641,,641,,641,,,,,,,,641',
',,,,641,641,641,641,641,641,,,,641,641,,,,,,,641,,641,641,641,641,,',
'641,641,357,357,357,,357,,,,357,357,,,,357,,357,357,357,357,357,357',
'357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357,,,357,357,357,357',
'357,357,357,357,,357,357,357,,357,357,,,,357,,,,,,,,,,,,,,,,,,,,357',
',,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,357,357,357,357,357,357,,,,357',
'357,,,,,,,357,,,357,357,357,,,357,357,359,359,359,,359,,,,359,359,,',
',359,,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359,359,',
',359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359,359,,359,359',
',,,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,,,,,,,,,,,,,,,',
',,359,359,359,359,359,359,,,,359,359,,,,,,,359,,,359,359,359,,,359,359',
'638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,',
',638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638',
'638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,',
'638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638',
',,,638,638,,,,,,,638,,,638,638,638,,,638,638,637,637,637,,637,,,,637',
'637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637',
'637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637,',
'637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,637',
',,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,',
',637,637,637,,,637,637,608,608,608,,608,,,,608,608,,,,608,,608,608,608',
'608,608,608,608,,,,,,608,608,608,608,608,608,608,,,608,,,,,,,608,,,608',
'608,608,608,608,608,608,608,,608,608,608,,608,608,,608,608,608,,,,,',
',,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,,,,,608,,,,,,,,608,,,,,608',
'608,608,608,608,608,,,,608,608,,,,,,,608,,,608,608,608,,,608,608,604',
'604,604,,604,,,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604',
'604,604,604,604,604,604,,,604,,,,,,,604,,,604,604,604,604,604,604,604',
'604,,604,604,604,,604,604,,604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604',
',,604,604,,,604,,,,,,604,,,,,,,,604,,,,,604,604,604,604,604,604,,,,604',
'604,,,,,,,604,,,604,604,604,,,604,604,592,592,592,,592,,,,592,592,,',
',592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592,592,592,',
',592,,,,,,,592,,,592,592,592,592,592,592,592,592,592,592,592,592,,592',
'592,,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,592,',
'592,,592,,,,,,,,592,,,,,592,592,592,592,592,592,,,,592,592,,,,,,,592',
',592,592,592,592,,,592,592,571,571,571,,571,,,,571,571,,,,571,,571,571',
'571,571,571,571,571,,,,,,571,571,571,571,571,571,571,,,571,,,,,,,571',
',,571,571,571,571,571,571,571,571,,571,571,571,,571,571,,571,571,571',
',,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571,,,,,,571,,,,,,,,571,,,',
',571,571,571,571,571,571,,,,571,571,,,,,,,571,,,571,571,571,,,571,571',
'544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,',
',544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544',
'544,544,544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544',
',,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,,,544,544,544,544,544,544',
',,,544,544,,,,,,,544,,544,544,544,544,,,544,544,541,541,541,,541,,,',
'541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541',
'541,541,,,541,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541,541',
'541,,541,541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541',
',541,,,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,,,,,,',
'541,,541,541,541,541,,,541,541,535,535,535,,535,,,,535,535,,,,535,,535',
'535,535,535,535,535,535,,,,,,535,535,535,535,535,535,535,,,535,,,,,',
',535,,,535,535,535,535,535,535,535,535,,535,535,535,,535,535,,535,535',
'535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,,,,,535,,,,,,,,535',
',,,,535,535,535,535,535,535,,,,535,535,,,,,,,535,,,535,535,535,,,535',
'535,531,531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531,531',
',,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531',
'531,531,531,,531,531,531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,,,,531',
',,531,,,531,531,,,531,,,,,,531,,,,,,,,531,,,,,531,531,531,531,531,531',
',,,531,531,,,,,,,531,,,531,531,531,,,531,531,530,530,530,,530,,,,530',
'530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530',
'530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530,530,530,',
'530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,',
',,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,,530,',
',530,530,530,,,530,530,527,527,527,,527,,,,527,527,,,,527,,527,527,527',
'527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527',
'527,527,527,527,527,527,527,,527,527,527,,527,527,,,,527,,,,,,,,,,,',
',,,,,,,,527,,,527,,,527,527,,,527,,,,,,,,,,,,,,,,,,,527,527,527,527',
'527,527,,,,527,527,,,,,,,527,,,527,527,527,,,527,527,521,521,521,,521',
',,,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521',
'521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521',
'521,521,,521,521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521',
',,521,,521,,521,,521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521',
',,,,,,521,,521,521,521,521,,,521,521,519,519,519,,519,,,,519,519,,,',
'519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,',
'519,,,,,,,519,,,519,519,519,519,519,519,519,519,,519,519,519,,519,519',
',,,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,,,,,,,,,,,,,',
',,519,519,519,519,519,519,,,,519,519,,,,,,,519,,,519,519,519,,,519,519',
'417,417,417,,417,,,,417,417,,,,417,,417,417,417,417,417,417,417,,,,',
',417,417,417,417,417,417,417,,,417,,,,,,,417,,,417,417,417,417,417,417',
'417,417,,417,417,417,,417,417,,417,417,417,,,,,,,,,,,,,,,,,,,,417,,',
'417,,,417,417,,,417,,,,,,417,,,,,,,,417,,,,,417,417,417,417,417,417',
',,,417,417,,,,,,,417,,,417,417,417,,,417,417,512,512,512,512,512,,,',
'512,512,,,,512,,512,512,512,512,512,512,512,,,,,,512,512,512,512,512',
'512,512,,,512,,,,,,512,512,,512,512,512,512,512,512,512,512,512,,512',
'512,512,,512,512,,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512',
',,512,,512,,,,512,,,,,,,,512,,,,,512,512,512,512,512,512,,,,512,512',
',,,,,512,512,,,512,512,512,,,512,512,505,505,505,,505,,,,505,505,,,',
'505,,505,505,505,505,505,505,505,,,,,,505,505,505,505,505,505,505,,',
'505,,,,,,,505,,,505,505,505,505,505,505,505,505,,505,505,505,,505,505',
',505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505,',
',,,,,,505,,,,,505,505,505,505,505,505,,,,505,505,,,,,,,505,,,505,505',
'505,,,505,505,503,503,503,,503,,,,503,503,,,,503,,503,503,503,503,503',
'503,503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503',
'503,503,503,503,503,503,503,503,503,,503,503,,503,503,503,,,,,,,,,,',
',,,,,,,,,503,,,503,,,503,503,,,503,,,,503,,503,,,,,,,,503,,,,,503,503',
'503,503,503,503,,,,503,503,,,,,,,503,,503,503,503,503,,,503,503,500',
'500,500,,500,,,,500,500,,,,500,,500,500,500,500,500,500,500,,,,,,500',
'500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500,500',
'500,500,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500',
',,500,500,,,500,,500,,500,,500,,,,,,,,500,,,,,500,500,500,500,500,500',
',,,500,500,,,,,,,500,,500,500,500,500,,,500,500,459,459,459,,459,,,',
'459,459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459',
'459,459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459,,459,459,459',
',459,459,,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,',
',,,,459,,,,,,,,459,,,,,459,459,459,459,459,459,,,,459,459,,,,,,,459',
',,459,459,459,,,459,459,458,458,458,,458,,,,458,458,,,,458,,458,458',
'458,458,458,458,458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458',
',,458,458,458,458,458,458,458,458,,458,458,458,,458,458,,458,458,458',
',,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,',
',458,458,458,458,458,458,,,,458,458,,,,,,,458,,,458,458,458,,,458,458',
'457,457,457,,457,,,,457,457,,,,457,,457,457,457,457,457,457,457,,,,',
',457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457',
'457,457,,457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,',
'457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,,,457,457,457,457,457,457',
',,,457,457,,,,,,,457,,,457,457,457,,,457,457,807,807,807,,807,,,,807',
'807,,,,807,,807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807',
'807,,,807,,,,,,,807,,,807,807,807,807,807,807,807,807,,807,807,807,',
'807,807,,,,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,,,',
',,,,,,,,,,807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807,807',
',,807,807,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233',
'233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233',
'233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,',
',,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233',
'233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233,795,795,795,,795',
',,,795,795,,,,795,,795,795,795,795,795,795,795,,,,,,795,795,795,795',
'795,795,795,,,795,,,,,,,795,,,795,795,795,795,795,795,795,795,,795,795',
'795,,795,795,,795,795,795,,,,,,,,,,,,,,,,,,,,795,,,795,,,795,795,,,795',
',,,,,795,,,,,,,,795,,,,,795,795,795,795,795,795,,,,795,795,,,,,,,795',
',,795,795,795,,,795,795,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236',
'237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,',
',237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237',
'237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,',
'237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237',
',,,237,237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238',
'238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238',
'238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,',
'238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,',
',238,238,238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239',
'239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239',
'239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,',
',,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239',
'239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240',
'240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240',
'240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240',
'240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240',
',,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240',
'240,,,,,,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,',
',241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,',
',241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241',
',241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,',
',,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241',
'241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,',
',,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243',
',243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243',
'243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243',
'243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243',
',,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,',
',,,243,,,243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244',
'244,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246',
'246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246',
'246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,',
'246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,',
',246,246,246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248',
'248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248',
',,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248',
'248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,',
',249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,',
',249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249',
',249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,',
',,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249',
'249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,',
',,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250',
'250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251',
',251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252',
',,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252',
'252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253',
',,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,',
',254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,',
',257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,',
',257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
',257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,',
',,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257',
'257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,,,261,261,793,793,793,,793,,,,793',
'793,,,,793,,793,793,793,793,793,793,793,,,,,,793,793,793,793,793,793',
'793,,,793,,,,,,,793,,,793,793,793,793,793,793,793,793,,793,793,793,',
'793,793,,793,793,793,,,,,,,,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,',
',,,793,,,,,,,,793,,,,,793,793,793,793,793,793,,,,793,793,,,,,,,793,',
',793,793,793,,,793,793,792,792,792,,792,,,,792,792,,,,792,,792,792,792',
'792,792,792,792,,,,,,792,792,792,792,792,792,792,,,792,,,,,,,792,,,792',
'792,792,792,792,792,792,792,,792,792,792,,792,792,,792,792,792,,,,,',
',,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,,,,,792,,,,,,,,792,,,,,792',
'792,792,792,792,792,,,,792,792,,,,,,,792,,,792,792,792,,,792,792,268',
'268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,268,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,268,,268,,268,,,,,,,,268,,,,,268,268,268,268,268,268',
',,,268,268,,,,,,,268,,268,268,268,268,,,268,268,791,791,791,,791,,,',
'791,791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791',
'791,791,,,791,,,,,,,791,,,791,791,791,791,791,791,791,791,,791,791,791',
',791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,',
',,,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,,,,,,,791',
',,791,791,791,,,791,791,274,274,274,,274,,,,274,274,,,,274,,274,274',
'274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274',
',,274,274,274,274,274,274,274,274,274,274,274,274,,274,274,,274,274',
'274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,,',
',,,274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,274,274,274',
'274,,,274,274,277,277,277,,277,,,,277,277,,,,277,,277,277,277,277,277',
'277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277,,,277,277,277',
'277,277,277,277,277,277,277,277,277,,277,277,,277,277,277,,,,,,,,,,',
',,,,,,,,,277,,,277,,,277,277,,,277,,277,,277,,277,,,,,,,,277,,,,,277',
'277,277,277,277,277,,,,277,277,277,,,,,,277,,277,277,277,277,,,277,277',
'790,790,790,,790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,',
',790,790,790,790,790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790',
'790,790,,790,790,790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,',
'790,,,790,790,,,790,,,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790',
',,,790,790,,,,,,,790,,,790,790,790,,,790,790,776,776,776,,776,,,,776',
'776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776',
'776,,,776,,,,,,,776,,,776,776,776,776,776,776,776,776,,776,776,776,',
'776,776,,776,776,776,,,,,,,,,,,,,,,,,,,,776,,,776,,,776,776,,,776,,',
',,,776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776,,,,,,,776,',
',776,776,776,,,776,776,774,774,774,,774,,,,774,774,,,,774,,774,774,774',
'774,774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,,774,,,774',
'774,774,774,774,774,774,774,,774,774,774,,774,774,,774,774,774,,,,,',
',,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,774,,,,,774',
'774,774,774,774,774,,,,774,774,,,,,,,774,,,774,774,774,,,774,774,284',
'284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284',
'284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284',
'284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284',
',,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284',
'284,,,,,,,284,,,284,284,284,,,284,284,286,286,286,,286,,,,286,286,,',
',286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,',
',286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,,286,286',
',286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,',
',,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286',
'286,,,286,286,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288',
'288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288',
'288,288,288,288,288,,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,',
',,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288',
'288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288,290,290,290',
',290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290',
'290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290',
'290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290',
',,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,',
',,,290,,,290,290,290,,,290,290,291,291,291,,291,,,,291,291,,,,291,,291',
'291,291,291,291,291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,',
',291,,,291,291,291,291,291,291,291,291,,291,291,291,,291,291,,291,291',
'291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,291',
',,,,291,291,291,291,291,291,,,,291,291,,,,,,,291,,,291,291,291,,,291',
'291,297,297,297,297,297,,,,297,297,,,,297,,297,297,297,297,297,297,297',
',,,,,297,297,297,297,297,297,297,,,297,,,,,,297,297,,297,297,297,297',
'297,297,297,297,297,,297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,',
',,,,,,297,,,297,,,297,297,,,297,,297,,,,297,,,,,,,,297,,,,,297,297,297',
'297,297,297,,,,297,297,,,,,,,297,,,297,297,297,,,297,297,752,752,752',
',752,,,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752',
'752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,752',
'752,752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752',
'752,,,752,,752,,752,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752',
'752,,,,,,,752,,752,752,752,752,,,752,752,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11',
'11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11',
'11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11',
'11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74',
'74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,',
',74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74',
'74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,,,,408,408,408,408,408,408,408,408,408,408,',
',,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,,408,408,,408,408',
'408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,,,,,,,,,408,408',
',408,408,408,408,408,408,408,408,408,408,408,,,408,408,,,,,,,,,,408',
',,,,,,,,408,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12',
'12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12',
'12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,',
',,,,,,,,12,,,,,,,,,12,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91',
'91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91',
',,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91',
'91,91,,,91,,,,,,,,,,,,,,,,,,,,91,762,762,762,762,762,762,762,762,762',
'762,762,762,762,762,762,762,762,762,762,762,762,762,762,762,,,,762,762',
'762,762,762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,762',
'762,,,762,,,,,,,,,762,762,,762,762,762,762,762,762,762,,,762,762,,,',
'762,762,762,762,,,,,,,,,,,,,,762,762,,762,762,762,762,762,762,762,762',
'762,762,762,,,762,,,,,,,,,,,,,,,,,,,,762,634,634,634,634,634,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634',
',,,634,634,634,634,634,634,634,634,634,634,,,,,,634,634,634,634,634',
'634,634,634,634,,,634,,,,,,,,,634,634,,634,634,634,634,634,634,634,',
',634,634,,,,634,634,634,634,,,,,,,,,,,,,,634,634,,634,634,634,634,634',
'634,634,634,634,634,634,,,634,634,,,,487,,,,,,634,487,487,487,,,487',
'487,487,634,487,760,,760,760,760,760,760,,487,487,,,,,,,760,,,487,487',
',487,487,487,487,487,,,1049,,1049,1049,1049,1049,1049,,,760,,,,,,,1049',
',760,760,760,760,,,,,,,,,,,487,,,,,,1049,487,,,,,487,487,,,,1049,1049',
',,,760,,750,750,,,750,,,,,,487,487,,750,750,,750,750,750,750,750,750',
'750,,487,750,750,1049,,487,750,750,750,750,,,,,,750,,,,,,,,750,750,',
'750,750,750,750,750,750,750,750,750,750,750,,,750,,,,,751,751,,,751',
',,,,,,,,751,751,750,751,751,751,751,751,751,751,,,751,751,,,,751,751',
'751,751,,,,,,751,,,,,,,,751,751,,751,751,751,751,751,751,751,751,751',
'751,751,,606,751,606,606,606,606,606,,,,264,264,,,264,,606,,,,,751,',
'264,264,,264,264,264,264,264,264,264,,,264,264,,606,606,264,264,264',
'264,,,,606,606,606,606,,,,,,,264,264,,264,264,264,264,264,264,264,264',
'264,264,264,,1018,264,1018,1018,1018,1018,1018,,,1016,1016,606,,1016',
',,1018,,,,,264,1016,1016,,1016,1016,1016,1016,1016,1016,1016,,,1016',
'1016,,,1018,1016,1016,1016,1016,,,,,,1016,1018,1018,,,,,,1016,1016,',
'1016,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016,,,1016,,,,,594',
'594,,,594,,1018,,,,,,,594,594,1016,594,594,594,594,594,594,594,,,594',
'594,,,,594,594,594,594,,,,,,594,,,,,,,,594,594,,594,594,594,594,594',
'594,594,594,594,594,594,,,594,,,,,593,593,,,593,,,,,,,,,593,593,594',
'593,593,593,593,593,593,593,,,593,593,,,,593,593,593,593,,,,,,593,,',
',,,,,593,593,,593,593,593,593,593,593,593,593,593,593,593,,,593,,,,',
'214,214,,,214,,,,,,,,,214,214,593,214,214,214,214,214,214,214,,,214',
'214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,,214,,,,,213,213,,,213,,,,,,,,,213,213,214',
'213,213,213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,',
',,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,892,213,892',
'892,892,892,892,895,,895,895,895,895,895,,,892,,,,,213,,895,897,,897',
'897,897,897,897,,,,,,,,892,,897,,,,,895,,892,892,892,892,,,,895,895',
'895,895,,,,551,897,551,551,551,551,551,,,,,,897,897,,920,551,920,920',
'920,920,920,892,,,,,,,895,,920,,,,,,,551,922,,922,922,922,922,922,897',
'551,551,551,551,,,920,924,922,924,924,924,924,924,,920,920,920,920,',
',,926,924,926,926,926,926,926,,922,,,,,,551,,926,,,922,922,,,924,,,',
',,920,,,,,924,924,,,926,,,533,533,,,533,,,,926,926,,,922,533,533,,533',
'533,533,533,533,533,533,,,533,533,924,,,533,533,533,533,,,,,,533,,,926',
',,,,533,533,,533,533,533,533,533,533,533,533,533,533,533,,,533,,,,,532',
'532,,,532,,,,,,,,,532,532,533,532,532,532,532,532,532,532,,,532,532',
',,,532,532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532,532',
'532,532,532,532,532,,949,532,949,949,949,949,949,,,,,,,,,,949,,,,,532',
',,,,,,,,,,,,,,,,949,949,523,523,,,523,,,949,949,949,949,,,523,523,,523',
'523,523,523,523,523,523,,,523,523,,,,523,523,523,523,,,,,,523,,,,949',
',,,523,523,,523,523,523,523,523,523,523,523,523,523,523,,,523,,,,,522',
'522,,,522,,,,,,,,,522,522,523,522,522,522,522,522,522,522,,,522,522',
',,,522,522,522,522,,,,,,522,,,,,,,,522,522,,522,522,522,522,522,522',
'522,522,522,522,522,,,522,,,,,966,966,,,966,,,,,,,,,966,966,522,966',
'966,966,966,966,966,966,,,966,966,,,,966,966,966,966,,,,,,966,,,,,,',
',966,966,,966,966,966,966,966,966,966,966,966,966,966,,,966,,,,,453',
'453,,,453,,,,,,,,,453,453,966,453,453,453,453,453,453,453,,,453,453',
',,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453,453',
'453,453,453,453,453,,,453,,,,,1015,1015,,,1015,,,,,,,,,1015,1015,453',
'1015,1015,1015,1015,1015,1015,1015,,,1015,1015,,,,1015,1015,1015,1015',
',,,,,1015,,,,,,,,1015,1015,,1015,1015,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,,,1015,,,,,454,454,,,454,,,,,,,,,454,454,1015,454,454',
'454,454,454,454,454,,,454,454,,,,454,454,454,454,,,,,,454,,,,,,,,454',
'454,,454,454,454,454,454,454,454,454,454,454,454,,999,454,999,999,999',
'999,999,1005,,1005,1005,1005,1005,1005,,,999,,,,,454,,1005,1003,,1003',
'1003,1003,1003,1003,,,,,,,,999,,1003,,,,,1005,,999,999,999,999,,,,,',
'1005,1005,,,,1001,1003,1001,1001,1001,1001,1001,,,,,,1003,1003,,665',
'1001,665,665,665,665,665,999,,,,,,,1005,,665,,,,,,,1001,714,,714,714',
'714,714,714,1003,,,1001,1001,,,665,,714,,,,,,,665,665,665,665,,,,,,',
',,,,,714,,,,,,1001,,,714,714,714,714,665,,,,,,,,665,,,,,,,,,,,,,,,,',
',,,,,,,714' ]
        racc_action_check = arr = ::Array.new(26492, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1397,  4252,  1321,   nil,    42,   nil,   nil,  5941,   878,
   nil, 24001, 24400,  1197,   nil,  1164,  1185,   867,   308,  1069,
   770,   nil,   -66,  6221,  2842,  1116,   nil,   526,   nil,   306,
  1185,  1442,  6361,  6501,  6641,   nil,  5098,  6781,  6921,   nil,
  1013,   682,   714,  1028,   363,  7341,  7481,  7621,   926,   580,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1053,
   nil,   322,  7761,   nil,   142,   nil,  7901,  8041,   nil,   nil,
  8181,  8321,   945,   nil, 24134,   nil,   nil,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   nil,   nil,   nil,   864,   819,   816,
   766, 24533,   nil,   nil,   nil,   nil,   nil,   nil,   138,   nil,
   nil,   276,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  9021,   nil,   nil,   nil,   nil,  9161,
  9301,  9441,  9581,  9721,   780,   nil,   932,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   759,   nil,  1855,
  9861, 10001, 10141, 25452, 25384,   nil,   nil, 10281, 10421, 10561,
 10701, 10841, 10981,   nil,   nil,   621,    52,   163,   540,   324,
   436,   491,   nil, 17841,  1573,   278, 18121, 18261, 18401, 18541,
 18681, 18821, 18961, 19101, 19241, 19381, 19521, 19661, 19801, 19941,
 20081, 20221, 20361, 20501, 20641, 20781, 20921, 21061, 21201, 21341,
 21481, 21621,   nil,   nil, 25109,   nil,   nil,   260, 22041,   nil,
   247,   nil,   nil,   nil, 22321,   nil,   nil, 22461,   nil,  3124,
   nil,    56,    30,   nil, 23021,     2, 23161,   nil, 23301,   nil,
 23441, 23581,   nil,   nil,   425,   nil,  1135, 23721,   -98,  4675,
  1334,  1366,  1317, 11401,  3829,   674,   735,   740,  1379,   763,
   nil,  1320,  1273,    87,   nil,   nil,   nil,  1302,   304,  1237,
 12101,   nil,   519,  1281,   768,   nil,  1273,   nil, 12381,  4111,
   nil, 12521,  1243,   nil,   702,   701,  1313, 12941,   nil,   nil,
  1373,   426,   266,   275, 13221, 13361,   591,  1419,  1314,   139,
   179,   643,  1392,   207,  1424,   nil,   nil, 14341,   nil, 14481,
   525,   315,   499,   764,   527,   714,   776,   762,   351,   nil,
   767,   nil,   nil,   nil,   nil,   nil,   312,   nil,   666,   nil,
   572,   nil,   815,   609,   nil,   933,   450,   nil,   941,   140,
   nil,   974,   217,   nil,   478,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4957, 24267,   nil,
   nil,   nil,   nil,  1026,   nil,   nil,  1020, 16581,  1085,   nil,
   nil,  1714,  1089,   nil,   nil,  1091,  1137,   554,   637,   928,
   nil,   nil,   nil,   546,   671,  1242,   nil,   nil,   796,  1310,
   nil,  2278,   nil,  1212,   nil,   nil,  1573,   nil,   nil,   nil,
   nil,   286,   nil, 26059, 26195,  5801,   408, 17561, 17421, 17281,
  4393,  4252,   630,   752,  1253,  1210,  1207,  1204,  5661,  5521,
  5380,  4111,  1001,  1135,  1258,  1392,  4675,  3970,  5098,  5239,
  4534,  1010,   883,  4957,  4816,  2137,    95, 24918,   nil,   nil,
   nil,   nil,   nil,   nil,   253,   267,  1117,  1097,   nil,   nil,
 17141,   nil,   nil, 17001,   nil, 16861,   nil,   338,   nil,   nil,
   nil,   nil, 16721,   891,  1080,  1071,   nil,   nil,  1039, 16441,
  1019, 16301, 25923, 25855,   513,  1045,   nil, 16161,   970,   nil,
 16021, 15881, 25753, 25685,  3406, 15741,  1081,  1066,   849,   nil,
   nil, 15601,   nil,   nil, 15461,   nil,   950,   nil,   631,   970,
   162, 25575,   nil,   922,   914,   nil,   901,   892,   891,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   873,   926,   nil,
   nil, 15321,   nil,   nil,   nil,   963,   nil,   nil,   nil,   958,
   nil,   nil,   941,  5239,   865,   nil,  5380,   131,   208,   834,
   807,   nil, 15181, 25316, 25248,   165,   nil,   353,   549,   479,
   nil,   624,   nil,    62, 15041,   nil, 25099,   nil, 14901,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   407,   nil,   nil,   348,   nil,   nil,   nil,   194,   nil,   nil,
   168,   nil,   139,   nil, 24799,   nil,   109, 14761, 14621,   557,
  1357, 14201, 14061, 13921, 13781,  1347,   nil,   nil,   nil, 13641,
 13501,  1323,   nil,  5661, 13081,   nil,   362,   389,   414,     0,
  1277,  1855,  1274,   nil,   nil, 26333,   nil,   nil,  1349,   215,
    46,   nil,   nil,   nil,   nil,  1226,   nil,  1257, 12801,   nil,
   nil, 12661,  1148,   288, 12241,  1214,   nil,  1218,    57,    58,
  1264,    32,   804,  1268,  1231, 11961,  3547,  1308,   289,  1377,
 11821,   nil,  1270,   590,   nil,   nil,   nil,  2137,  2983,  1274,
   468,   nil,   nil,   581, 26357,   nil,   859,   nil,  1116,   nil,
 11681,   nil,  1019,   nil,  1283,   539,  1299,   nil,   nil,   nil,
   nil,   184,   nil,  1417,   nil,   nil,   nil,   nil,  1423,   nil,
 11541,  1307,   200,   212,   203,   170, 11261,   nil,   642,   nil,
 24969, 25037, 23861,   nil,   nil,   nil,   664,   823,  4393,  4816,
 24884,   405, 24666,   284,  1150,     0,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -29, 22881,  2419, 22741,   nil,    99,   nil,
  2560,   nil,  2701,   nil,   nil,  3688,   nil,  1996,   nil,  2983,
 22601, 22181, 21901, 21761,    27, 17981,   287,   317,   nil,   335,
   343,   383,   nil,   405,   424,   430,   423, 17701,   nil,   nil,
  1714,   nil,   nil,   nil,  3406,  3547,   nil,   nil,   nil,   507,
   129,   nil,   nil,   630,   nil,  3265,   517,   574,   nil,   nil,
   nil,   nil,   551,   657,   544,   562,   nil,   nil,   nil,   574,
   576,   nil,   606,   632,   nil,   634,   nil,   nil,   645,   993,
   644,  1178,   nil,   784,   nil, 11121,   835,  2419,  2278,   nil,
   130,     1,   204,   454,   610,   nil,   817,  4534,  8881,   nil,
   243,   942,   947,   840,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   860,   855,   nil,  3829,  8741,  8601,  3265,   508,
   nil,   nil, 25514,   nil,   nil, 25521,   nil, 25538,   nil,   nil,
   917,  1435,  8461,   582,   983,  1033,  3688,   932,  1040,   nil,
  3124,   nil,   nil,   170,  7201,   nil,   nil,   nil,   nil,   nil,
 25590,   nil, 25614,   nil, 25629,   nil, 25644,   nil,   nil,   nil,
   nil,   420,  1276,   949,   nil,   179,   nil,  1077,  1078,  7061,
  1996,   nil,   nil,  1089,   450,   nil,   nil,   nil,   nil, 25815,
   nil,   972,   nil,   nil,   974,   982,   989,   990,   nil,  1005,
   nil,   665,   nil,   nil,   nil,   422, 25991,   nil,   nil,  1027,
   nil,   nil,   nil,  5521,   180,   122,   485,  1091,   183,   nil,
  1022,  1024,  1026,  1034,  1036,  1317,  1066,  1194,  3970,   nil,
   nil,   nil,   374,  2842,   nil,   nil,  2701,  2560,   nil, 26257,
   nil, 26318,   nil, 26281,   nil, 26264,   nil,   nil,   nil,   921,
  1140,  1147,   nil,  1235,  6081, 26127, 25180,   260, 25171,   nil,
   nil,   nil,   nil,  1250,  1149,   949,   nil,   nil,   nil,  1272,
  1276,  1278,  1166,  1170,  1171,  1173,   nil,   nil,  1180,   144,
   160,   207,   268,  1184,  1186,   nil,   nil,   nil,   nil, 24913,
   nil,   nil,   nil,   nil,   148,   nil,  1244,   nil ]

racc_action_default = [
    -1,  -628,  -627,  -628,    -2,  -614,    -4,    -5,  -628,    -8,
    -9,  -628,  -628,  -628,   -29,  -628,  -628,  -628,  -280,  -628,
   -40,   -43,  -616,  -628,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -627,   -73,   -81,   -83,
  -628,  -516,  -517,  -628,  -628,  -628,  -628,  -628,  -616,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -602,
  -282,  -285,  -627,  -292,  -302,  -405,  -628,  -628,  -307,  -310,
  -614,  -628,  -318,  -325,  -628,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -627,  -455,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -492,  -498,  -500,  -501,  -502,  -503,  -600,  -505,
  -506,  -601,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1058,    -3,  -615,  -623,  -624,  -625,    -7,  -628,
  -628,  -628,  -628,  -628,  -628,   -17,  -628,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -627,
  -628,  -628,  -627,  -628,  -628,  -612,  -613,  -628,  -628,  -628,
  -628,  -628,  -616,  -617,   -47,  -628,  -516,  -517,  -628,  -280,
  -628,  -628,  -230,  -628,  -627,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -411,  -414,  -628,  -610,  -611,   -58,  -628,  -301,
  -628,  -428,  -431,   -64,  -627,  -425,   -65,  -616,   -66,  -239,
  -252,  -627,  -627,  -256,  -628,  -262,  -628,  -627,  -492,  -593,
  -628,  -628,   -67,   -68,  -614,   -13,   -14,  -628,   -71,  -627,
  -616,  -628,   -74,   -77,  -627,   -89,   -90,  -628,  -628,   -97,
  -294,  -297,  -616,  -418,  -333,  -334,  -337,  -426,  -628,   -79,
  -628,   -85,  -290,  -499,  -628,  -215,  -216,  -231,  -628,  -627,
  -284,  -628,  -628,  -240,  -620,  -620,  -628,  -627,  -303,  -304,
  -548,   -49,  -628,  -628,  -628,  -628,  -614,  -628,  -615,  -516,
  -517,  -628,  -628,  -280,  -628,  -358,  -359,  -628,  -321,  -628,
  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -328,
  -628,  -516,  -517,  -588,  -589,  -453,  -628,  -476,  -628,  -478,
  -628,  -480,  -628,  -628,  -460,  -628,  -628,  -466,  -628,  -628,
  -472,  -628,  -628,  -474,  -628,  -491,  -493,  -494,  -495,  -496,
    -6,  -626,   -23,   -24,   -25,   -26,   -27,  -627,  -628,   -19,
   -20,   -21,  -122,  -628,   -30,   -39,  -267,  -628,  -628,  -266,
   -31,  -197,  -616,  -247,  -248,  -627,  -627,  -603,  -604,  -257,
  -423,  -605,  -606,  -604,  -603,  -257,  -422,  -424,  -605,  -606,
   -37,  -205,   -38,  -628,   -41,   -42,  -195,  -262,   -44,   -45,
   -46,  -616,  -300,  -628,  -628,  -627,  -290,  -628,  -628,  -628,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -232,  -233,  -234,  -235,  -616,  -627,  -257,  -603,  -604,
   -54,   -59,  -258,  -419,  -627,  -627,  -616,  -616,  -296,  -253,
  -628,  -261,  -254,  -628,  -259,  -628,  -263,  -628,  -598,  -596,
  -599,   -12,  -615,   -16,  -616,   -70,  -288,   -86,   -75,  -628,
  -616,  -627,  -628,  -628,   -96,  -628,  -499,  -628,   -82,   -87,
  -628,  -628,  -628,  -628,  -236,  -628,  -439,  -628,  -286,  -618,
  -241,  -622,  -621,  -243,  -622,  -291,  -628,  -591,  -620,  -628,
  -628,  -548,  -408,  -587,  -587,  -531,  -533,  -533,  -533,  -547,
  -549,  -550,  -551,  -552,  -553,  -554,  -555,  -556,  -628,  -558,
  -560,  -562,  -567,  -569,  -570,  -572,  -577,  -579,  -580,  -582,
  -583,  -584,  -628,  -627,  -349,  -350,  -627,  -628,  -628,  -628,
  -628,  -434,  -627,  -628,  -628,  -290,  -315,  -107,  -108,  -628,
  -110,  -628,  -280,  -628,  -628,  -326,  -548,  -330,  -628,  -454,
  -477,  -482,  -483,  -485,  -456,  -479,  -457,  -481,  -458,  -459,
  -628,  -462,  -464,  -628,  -465,  -468,  -469,  -628,  -470,  -471,
  -628,  -497,  -628,   -18,  -628,   -28,  -270,  -628,  -628,  -427,
  -628,  -249,  -251,  -628,  -628,   -60,  -245,  -246,  -420,  -628,
  -628,   -62,  -421,  -628,  -628,  -299,  -603,  -604,  -603,  -604,
  -616,  -195,  -628,  -394,  -395,  -616,  -397,  -412,   -53,  -415,
  -627,  -429,  -432,  -244,  -295,  -627,  -260,  -264,  -628,  -594,
  -595,  -628,   -15,   -72,  -628,   -78,   -84,  -616,  -603,  -604,
  -627,  -607,   -95,  -628,   -80,  -628,  -204,  -214,  -616,  -627,
  -627,  -283,  -616,  -620,  -293,  -592,  -406,  -627,  -627,  -616,
  -628,  -529,  -530,  -628,  -628,  -540,  -628,  -543,  -628,  -545,
  -628,  -360,  -628,  -362,  -364,  -371,  -616,  -561,  -571,  -581,
  -585,  -627,  -351,  -627,  -308,  -352,  -353,  -311,  -628,  -314,
  -628,  -616,  -603,  -604,  -607,  -289,  -628,  -107,  -108,  -109,
  -628,  -628,  -627,  -319,  -522,  -523,  -628,  -322,  -627,  -627,
  -548,  -628,  -628,  -616,  -628,  -627,  -461,  -463,  -467,  -473,
  -475,   -10,  -123,  -268,  -628,  -198,  -628,  -619,  -627,   -33,
  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,
  -628,  -628,  -628,  -628,  -427,  -628,  -587,  -587,  -376,  -627,
  -627,  -627,  -393,  -628,  -616,  -399,  -556,  -564,  -565,  -575,
  -627,  -417,  -416,   -55,  -627,  -627,  -255,  -265,  -597,   -76,
  -427,   -88,  -298,  -627,  -356,  -627,  -440,  -627,  -441,  -442,
  -287,  -242,  -628,  -628,  -616,  -587,  -568,  -586,  -532,  -533,
  -533,  -559,  -533,  -533,  -578,  -533,  -556,  -573,  -616,  -628,
  -369,  -628,  -557,  -628,  -354,  -628,  -628,  -627,  -627,  -313,
  -628,  -427,  -628,  -107,  -108,  -111,  -616,  -627,  -628,  -525,
  -628,  -628,  -628,  -616,  -527,  -331,  -590,  -484,  -487,  -488,
  -489,  -490,  -628,  -269,   -32,  -199,  -250,  -628,  -237,  -628,
  -374,  -375,  -384,  -378,  -386,  -628,  -389,  -628,  -391,  -396,
  -628,  -628,  -628,  -563,  -628,  -628,  -627,  -628,  -628,   -11,
  -627,  -446,  -357,  -628,  -628,  -444,  -409,  -410,  -407,  -528,
  -628,  -536,  -628,  -538,  -628,  -541,  -628,  -544,  -546,  -361,
  -363,  -367,  -628,  -372,  -305,  -628,  -306,  -628,  -628,  -628,
  -627,  -316,  -427,  -628,  -628,  -323,  -327,  -329,  -526,  -548,
  -486,  -587,  -566,  -377,  -627,  -627,  -627,  -627,  -576,  -627,
  -398,  -616,  -401,  -403,  -404,  -574,  -628,  -290,  -413,  -628,
  -430,  -433,  -445,  -627,  -516,  -517,  -628,  -628,  -280,  -443,
  -533,  -533,  -533,  -533,  -365,  -628,  -370,  -628,  -627,  -309,
  -312,  -264,  -627,  -627,  -320,  -524,  -627,  -627,  -373,  -628,
  -381,  -628,  -383,  -628,  -387,  -628,  -390,  -392,  -400,  -628,
  -289,  -607,   -56,  -439,  -627,  -628,  -628,  -290,  -628,  -534,
  -537,  -539,  -542,  -628,  -368,  -627,  -435,  -436,  -437,  -628,
  -628,  -628,  -627,  -627,  -627,  -627,  -402,  -438,  -616,  -603,
  -604,  -607,  -289,  -533,  -366,  -355,  -317,  -324,  -332,  -628,
  -379,  -382,  -385,  -388,  -427,  -535,  -627,  -380 ]

clist = [
'6,302,221,422,369,16,280,280,280,263,590,16,130,130,338,537,275,583',
'586,699,213,396,419,133,133,639,4,559,328,117,442,135,135,125,208,9',
'445,264,552,16,528,9,567,540,543,502,429,435,759,679,114,800,282,282',
'282,342,343,113,491,346,333,964,316,316,676,496,853,676,267,273,276',
'319,376,224,323,130,734,737,844,298,823,377,335,379,381,384,387,390',
'393,379,679,726,130,749,117,803,316,487,118,841,301,962,933,300,330',
'930,29,958,402,403,404,405,29,378,856,711,712,16,620,394,667,623,347',
'603,993,605,16,29,671,672,357,867,604,870,996,359,29,29,29,834,29,278',
'292,293,758,606,762,9,949,336,802,281,281,281,634,906,406,804,670,961',
'550,706,340,408,415,486,810,494,814,964,29,29,495,815,29,1026,740,715',
'717,719,827,334,913,986,375,380,280,383,679,502,1,386,615,389,617,392',
'877,621,764,430,621,765,395,868,400,676,676,721,615,1036,423,958,16',
'356,207,439,839,909,29,124,836,952,608,29,29,29,29,29,453,339,2,546',
'354,753,900,373,1024,16,559,685,669,370,280,930,865,848,660,694,280',
'709,329,280,738,567,331,702,493,705,337,344,414,420,857,794,345,452',
'858,440,444,746,,,423,413,1044,,507,841,954,501,501,,844,,529,377,429',
'435,282,,820,,525,559,,,,282,301,,16,,16,275,813,,,16,567,,522,841,687',
'29,29,29,29,,117,,498,29,29,29,29,29,29,532,316,418,513,,16,587,588',
'547,518,418,29,512,,,298,515,861,316,511,298,526,,,941,,,593,690,,548',
'890,891,1045,721,,301,850,690,514,806,301,,117,520,29,1027,,,,492,29',
',607,29,316,741,316,,497,281,,,841,997,,,,,281,919,589,,,29,640,29,819',
'6,,,29,130,16,,831,,,647,567,,567,,133,652,,501,501,,690,646,135,280',
'633,632,679,29,767,29,783,767,816,430,9,,788,,871,872,,559,29,29,676',
',,423,797,439,,,873,,921,923,567,925,927,662,928,,645,942,,445,,647',
'651,,,341,341,,,341,,529,663,646,,,721,,721,529,663,663,655,280,1037',
'801,,835,,,,,,,,,430,,,29,828,998,,16,,,430,423,675,,,,439,,668,,,,341',
'341,341,341,439,940,,,,673,674,816,,866,316,682,840,,842,,,,316,943',
',,,683,,29,,703,,686,,,280,,,,984,721,,,,,,,,430,,,,,690,,16,,973,16',
'423,,,,806,439,,806,,,,1019,1020,1021,1022,,,,,,988,735,735,,,,29,,',
'812,,,567,,721,29,721,754,,,448,449,450,451,,130,559,,,29,640,1054,',
',,805,133,731,529,,733,567,811,,135,1028,772,,,821,,778,721,,1055,,',
'640,663,,,,,501,,,647,,951,652,,797,1030,1031,797,,797,29,646,805,29',
',875,779,781,,29,824,829,784,786,806,,444,,,,,29,316,16,16,29,,,,,,',
',316,640,,,955,,280,956,,824,,824,,,,862,,430,,,,822,538,,,830,,29,29',
',423,439,980,29,29,341,341,29,,,,16,16,130,,,,,16,852,,832,833,,,,501',
',,,869,,,,805,874,,,797,,797,,797,,797,,,893,893,893,,,,,,1038,876,',
',,,29,29,16,,807,,16,16,418,,911,,,,915,884,,16,882,,1032,316,,,,798',
',797,,,,,,935,,640,,690,,29,,,,,,29,944,,860,16,16,29,29,799,,17,,,29',
'16,,17,,905,,,918,907,908,29,837,,,837,,735,225,,912,,929,,,945,,225',
'225,225,,17,307,307,,,,,,,16,,,,16,29,843,948,845,29,29,,937,938,,,',
',316,,29,225,225,,,225,351,,,,316,,1008,,16,,,698,,,,,,893,893,893,893',
',893,,29,,29,29,,,,,439,995,,969,29,29,,972,,16,,17,1015,,,,225,225',
'225,225,17,280,,824,16,,,,,16,,,16,16,430,,,992,,,,,,29,,423,,29,757',
',439,640,763,,,,824,,,,,,,893,893,893,893,894,896,898,1013,,807,,,807',
',29,807,,807,416,,,,1025,,893,,447,1029,,,837,,,798,,,798,,798,,,,,17',
'225,225,225,29,,,,225,225,225,225,225,225,,,,,,29,,957,,959,29,17,,29',
'29,,,,,,,,,41,,,,,,41,,29,981,,982,504,983,506,,508,,509,510,,,225,',
',,,,225,,,225,,,41,305,305,,,807,,807,,807,,807,,341,,,,17,,17,,,,307',
'17,,798,,798,,798,549,798,,,349,,,371,,307,,,,,1000,1002,1004,1006,17',
'1007,225,,,1033,807,1034,,1035,,,,,,225,225,,,,,,,,1043,,,798,601,41',
'601,,,,,,,,41,,,,,,,42,,,,,,42,,,,1056,,,,,,,636,,,,,,,,,,,341,1050',
'1051,1052,1053,17,42,306,306,,,,,341,,,,,,,,,,,,1057,,,,,,,,,,,,,,,',
'350,,,372,,,,,,,41,,225,,,,,,,,,,,,,,,,,,,677,,,549,41,680,,,,,,,42',
',,,,,,,,42,,,,,,,19,,,,,,19,,,,17,,,677,,,549,307,,225,,,,,,307,,,,',
',,,225,19,,,,,41,,41,,727,,305,41,,,,,,,,,,,,,,,,305,,,,,,,355,,41,',
',,,,,,42,,17,,,17,,,,,,225,,,,,,,18,,371,,371,225,18,42,,225,,,773,',
',19,677,549,,,,,,,19,,,,,,,,,,18,309,309,,,,,,,,225,225,,,,,225,225',
'41,817,225,,818,,,,,,,,,,,,,353,42,,42,,,826,306,42,,,,,,,,307,,,,,',
',,306,,847,307,,,,,,42,,,,,,17,17,19,,18,,,447,,,,443,,18,,,,,,,,,372',
',372,,,19,,,,,,,,,,,,225,,883,,,,225,,,,41,,17,17,,,,305,,17,,,,,,305',
',,,,225,,,42,,,,,,,,,,,,,,,,,,19,,19,,,,,19,,18,903,,,17,,,,17,17,,',
',,,,,,,17,,41,,19,41,18,,,,,,,,,,,,,,,,,,,,,,,,225,,17,17,,549,,,,,',
',17,225,,,,,,,,,,,,,,,,42,,,,,,,306,,,18,,18,,,306,309,18,965,,,,17',
'19,,,17,,,991,976,,,309,,,,,,,,,18,,305,,,,,,,,,,,305,17,,,,,,,,,,,41',
'41,,602,42,602,,42,,,,,,,,,,,,,,,17,,,,,,,,,,,,,,,17,,,,,17,,,17,17',
',,,,41,41,18,,,,,41,,,19,,225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,371',
',,41,,306,,41,41,,,,,,,,306,,41,,,,,,,,,,42,42,,,19,,,19,,,,,,,,,,,',
',,,41,41,,,,,,,18,,41,,,,,309,,,,,,,,309,,,,,,42,42,,,,,,42,,,,,,,,',
'371,,,,41,,,443,41,,,,974,,,,,,,,,,,,,,,,,,,,,372,18,,42,18,41,,42,42',
',,,,,,,,,42,,,,,,,,,,19,19,,,,,,,,,41,,,,,,,,,,,,42,42,,41,,,,,41,,42',
'41,41,,,,,,,,,,,,,,,,,19,19,,,,,,19,,,,,,,,,372,,,,42,,,309,42,,,,975',
',,,,,309,,,,,,,,,,,,18,18,,,,,19,,42,,19,19,,,,,,,,,,19,,,,,,,,,,,,',
',,,,,,,42,,,,,,,,,,18,18,19,19,,42,881,18,,,42,,19,42,42,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,602,,19,18,232,,19,18,18,,979,,,279,279,279,',
',18,,,,,,,,325,326,327,,,,,,,,19,,,,,,,279,,,,,,,18,18,,,,,,,,,18,,',
',,,,,,19,,,,,,,,,,,,,,,19,,,,,19,,,19,19,,602,,,,18,,,,18,,,,978,,,',
',,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,',
',,,,,,18,,,,,18,,,18,18,279,421,279,,,,,441,446,,,,,,,,,,,,,,,232,,',
'460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476',
'477,478,479,480,481,482,483,484,485,,,,,,,279,,,,,,279,,,279,,,,,,,279',
',279,,279,,279,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,534,,,,,,,,,279',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,441,661,421',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,279,,279,,,,,,,,,,,,,',
',,279,,,,,,,,,696,697,,,,,,,,,,279,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,279',
',,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'279,775,,,279,279,780,782,,,,,785,787,,,661,789,,,,,,,,,,,,,,,,,,,,',
',,,279,,,279,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,',
',,,,,,,,,279,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,279,,885,,,,,,,,,,',
',,,780,782,787,785,,888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,885,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279' ]
        racc_goto_table = arr = ::Array.new(3264, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,53,34,25,60,23,36,36,36,155,95,23,61,61,89,10,74,92,92,13,27,60,30',
'64,64,26,2,185,34,98,30,65,65,17,17,9,20,39,154,23,55,9,189,72,72,76',
'40,40,99,200,8,144,73,73,73,19,19,5,42,19,6,150,68,68,77,25,93,77,41',
'41,41,54,171,22,67,61,94,94,195,49,14,6,73,6,6,6,6,6,6,6,200,134,61',
'58,98,147,68,40,7,190,12,149,135,50,51,132,44,196,19,19,19,19,44,172',
'14,139,139,23,175,172,43,175,5,59,110,59,23,44,43,43,111,112,113,114',
'115,116,44,44,44,147,44,48,48,48,117,118,119,9,120,70,136,71,71,71,66',
'46,9,142,45,148,151,152,153,33,31,156,157,160,161,150,44,44,162,163',
'44,164,165,187,187,187,166,71,167,135,170,173,36,174,200,76,1,177,176',
'178,176,179,180,176,181,74,176,182,183,184,7,77,77,133,176,149,6,196',
'23,21,18,61,188,15,44,11,192,193,199,44,44,44,44,44,27,91,3,88,96,97',
'147,87,135,23,185,55,75,100,36,132,58,134,25,55,36,154,101,36,95,189',
'102,103,74,72,104,105,22,22,106,26,107,51,108,22,22,109,,,6,12,135,',
'171,190,144,6,6,,195,,53,6,40,40,73,,26,,34,185,,,,73,12,,23,,23,74',
'43,,,23,189,,27,190,25,44,44,44,44,,98,,51,44,44,44,44,44,44,27,68,71',
'9,,23,19,19,6,54,71,44,8,,,49,51,26,68,5,49,67,,,94,,,27,40,,73,139',
'139,93,133,,12,133,40,50,189,12,,98,50,44,14,,,,48,44,,39,44,68,25,68',
',48,71,,,190,99,,,,,71,139,5,,,44,34,44,55,6,,,44,61,23,,72,,,74,189',
',189,,64,74,,6,6,,40,6,65,36,17,2,200,44,176,44,42,176,76,74,9,,42,',
'10,10,,185,44,44,77,,,6,138,61,,,154,,187,187,189,187,187,34,187,,41',
'26,,20,,74,41,,,32,32,,,32,,53,6,6,,,133,,133,53,6,6,51,36,13,145,,138',
',,,,,,,,74,,,44,30,139,,23,,,74,6,73,,,,61,,41,,,,32,32,32,32,61,92',
',,,51,51,76,,25,68,9,145,,145,,,,68,10,,,,51,,44,,73,,51,,,36,,,,133',
'133,,,,,,,,74,,,,,40,,23,,92,23,6,,,,189,61,,189,,,,187,187,187,187',
',,,,,92,98,98,,,,44,,,89,,,189,,133,44,133,98,,,32,32,32,32,,61,185',
',,44,34,26,,,,34,64,12,53,,12,189,155,,65,95,17,,,53,,73,133,,187,,',
'34,6,,,,,6,,,74,,138,74,,138,10,10,138,,138,44,6,34,44,,60,22,22,,44',
'6,6,22,22,189,,22,,,,,44,68,23,23,44,,,,,,,,68,34,,,145,,36,145,,6,',
'6,,,,19,,74,,,,51,32,,,51,,44,44,,6,61,145,44,44,32,32,44,,,,23,23,61',
',,,,23,51,,12,12,,,,6,,,,98,,,,34,98,,,138,,138,,138,,138,,,6,6,6,,',
',,,25,51,,,,,44,44,23,,191,,23,23,71,,6,,,,6,22,,23,12,,145,68,,,,140',
',138,,,,,,19,,34,,40,,44,,,,,,44,19,,71,23,23,44,44,143,,24,,,44,23',
',24,,12,,,51,12,12,44,140,,,140,,98,24,,12,,51,,,98,,24,24,24,,24,24',
'24,,,,,,,23,,,,23,44,143,51,143,44,44,,12,12,,,,,68,,44,24,24,,,24,24',
',,,68,,34,,23,,,32,,,,,,6,6,6,6,,6,,44,,44,44,,,,,61,98,,12,44,44,,12',
',23,,24,27,,,,24,24,24,24,24,36,,6,23,,,,,23,,,23,23,74,,,12,,,,,,44',
',6,,44,32,,61,34,32,,,,6,,,,,,,6,6,6,6,141,141,141,12,,191,,,191,,44',
'191,,191,69,,,,12,,6,,69,12,,,140,,,140,,,140,,140,,,,,24,24,24,24,44',
',,,24,24,24,24,24,24,,,,,,44,,143,,143,44,24,,44,44,,,,,,,,,56,,,,,',
'56,,44,143,,143,69,143,69,,69,,69,69,,,24,,,,,,24,,,24,,,56,56,56,,',
'191,,191,,191,,191,,32,,,,24,,24,,,,24,24,,140,,140,,140,69,140,,,56',
',,56,,24,,,,,141,141,141,141,24,141,24,,,143,191,143,,143,,,,,,24,24',
',,,,,,,143,,,140,24,56,24,,,,,,,,56,,,,,,,57,,,,,,57,,,,143,,,,,,,69',
',,,,,,,,,,32,141,141,141,141,24,57,57,57,,,,,32,,,,,,,,,,,,141,,,,,',
',,,,,,,,,,57,,,57,,,,,,,56,,24,,,,,,,,,,,,,,,,,,,69,,,69,56,69,,,,,',
',57,,,,,,,,,57,,,,,,,29,,,,,,29,,,,24,,,69,,,69,24,,24,,,,,,24,,,,,',
',,24,29,,,,,56,,56,,69,,56,56,,,,,,,,,,,,,,,,56,,,,,,,29,,56,,,,,,,',
'57,,24,,,24,,,,,,24,,,,,,,28,,56,,56,24,28,57,,24,,,69,,,29,69,69,,',
',,,,29,,,,,,,,,,28,28,28,,,,,,,,24,24,,,,,24,24,56,69,24,,69,,,,,,,',
',,,,,28,57,,57,,,69,57,57,,,,,,,,24,,,,,,,,57,,69,24,,,,,,57,,,,,,24',
'24,29,,28,,,69,,,,29,,28,,,,,,,,,57,,57,,,29,,,,,,,,,,,,24,,69,,,,24',
',,,56,,24,24,,,,56,,24,,,,,,56,,,,,24,,,57,,,,,,,,,,,,,,,,,,29,,29,',
',,,29,,28,24,,,24,,,,24,24,,,,,,,,,,24,,56,,29,56,28,,,,,,,,,,,,,,,',
',,,,,,,,24,,24,24,,69,,,,,,,24,24,,,,,,,,,,,,,,,,57,,,,,,,57,,,28,,28',
',,57,28,28,24,,,,24,29,,,24,,,69,24,,,28,,,,,,,,,28,,56,,,,,,,,,,,56',
'24,,,,,,,,,,,56,56,,28,57,28,,57,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,24,',
',,,24,,,24,24,,,,,56,56,28,,,,,56,,,29,,24,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,56,,,56,,57,,56,56,,,,,,,,57,,56,,,,,,,,,,57,57,,,29,,,29',
',,,,,,,,,,,,,,56,56,,,,,,,28,,56,,,,,28,,,,,,,,28,,,,,,57,57,,,,,,57',
',,,,,,,,56,,,,56,,,29,56,,,,56,,,,,,,,,,,,,,,,,,,,,57,28,,57,28,56,',
'57,57,,,,,,,,,,57,,,,,,,,,,29,29,,,,,,,,,56,,,,,,,,,,,,57,57,,56,,,',
',56,,57,56,56,,,,,,,,,,,,,,,,,29,29,,,,,,29,,,,,,,,,57,,,,57,,,28,57',
',,,57,,,,,,28,,,,,,,,,,,,28,28,,,,,29,,57,,29,29,,,,,,,,,,29,,,,,,,',
',,,,,,,,,,,,57,,,,,,,,,,28,28,29,29,,57,28,28,,,57,,29,57,57,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,28,,29,28,35,,29,28,28,,29,,,35,35,35,,,28',
',,,,,,,35,35,35,,,,,,,,29,,,,,,,35,,,,,,,28,28,,,,,,,,,28,,,,,,,,,29',
',,,,,,,,,,,,,,29,,,,,29,,,29,29,,28,,,,28,,,,28,,,,28,,,,,,,,,,,,,,',
',,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,',
',,28,,,28,28,35,35,35,,,,,35,35,,,,,,,,,,,,,,,35,,,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,,,35',
',,,,,35,,,35,,,,,,,35,,35,,35,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,35,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,',
',,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,',
',,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,',
',35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,',
',,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35',
'35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3264, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   190,    24,   230,   nil,    52,    -2,    90,    45,    33,
  -314,   209,    64,  -517,  -619,  -606,   nil,    22,   202,   -11,
  -182,   142,    50,     3,   864,  -209,  -397,     3,  1461,  1364,
  -188,   -46,   411,    38,   -20,  2249,   -26,   nil,   nil,    10,
  -167,    39,  -209,  -366,   104,  -332,  -658,   nil,   109,    43,
    67,    43,   nil,   -36,    33,  -280,  1108,  1236,  -506,  -234,
   -70,     1,   nil,   nil,    12,    20,  -258,    30,    25,   838,
    87,   119,  -291,    20,   -14,  -247,  -237,  -436,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,  -106,   -50,
   nil,   164,  -325,  -665,  -511,  -337,   161,  -370,    24,  -558,
   167,   190,   193,  -283,   195,   191,  -472,   195,  -471,  -327,
  -817,    58,  -622,  -226,  -624,  -811,    62,  -461,  -224,  -461,
  -727,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -744,  -361,  -477,  -749,  -515,   nil,  -211,  -438,
   171,   235,  -508,   199,  -614,  -168,   nil,  -570,  -742,  -800,
  -840,  -180,  -389,    97,  -302,   -16,   -97,  -501,   nil,   nil,
  -104,  -503,  -100,  -499,  -817,  -415,  -520,  -645,   nil,   nil,
   104,   -11,    28,    99,   100,  -265,  -186,   103,   104,   105,
  -568,  -414,  -412,   111,  -552,  -313,   nil,  -379,  -498,  -298,
  -615,   150,  -490,  -668,   nil,  -638,  -788,   nil,   nil,  -152,
  -454 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   295,     7,   348,   296,
   nil,   nil,   536,   nil,   854,   nil,   294,   nil,   nil,   nil,
    14,    15,    21,   231,   324,   nil,   nil,   751,   229,   230,
   nil,   nil,    20,   nil,   332,    24,    25,    26,    27,   nil,
   693,   nil,   nil,   nil,   313,   nil,   nil,    28,   424,    35,
   nil,   nil,    37,    40,    39,   nil,   226,   227,   600,   nil,
   132,   432,   131,   134,    78,    79,   nil,    93,    49,   285,
   nil,   425,   nil,   426,   437,   648,   499,   283,   268,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   269,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   723,   566,   nil,   724,   953,   796,   554,   nil,
   555,   nil,   nil,   556,   nil,   558,   664,   nil,   nil,   nil,
   564,   nil,   nil,   nil,   761,   nil,   nil,   nil,   436,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   838,   553,   nil,   557,   846,
   569,   571,   572,   808,   575,   576,   809,   579,   582,   nil,
   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 179, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 178, :_reduce_none,
  3, 178, :_reduce_44,
  3, 178, :_reduce_45,
  3, 178, :_reduce_46,
  2, 178, :_reduce_47,
  1, 178, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 183, :_reduce_none,
  4, 183, :_reduce_53,
  0, 191, :_reduce_54,
  0, 192, :_reduce_55,
  6, 188, :_reduce_56,
  1, 190, :_reduce_57,
  2, 182, :_reduce_58,
  3, 182, :_reduce_59,
  4, 182, :_reduce_60,
  5, 182, :_reduce_61,
  4, 182, :_reduce_62,
  5, 182, :_reduce_63,
  2, 182, :_reduce_64,
  2, 182, :_reduce_65,
  2, 182, :_reduce_66,
  2, 182, :_reduce_67,
  2, 182, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 196, :_reduce_none,
  3, 196, :_reduce_72,
  1, 195, :_reduce_73,
  2, 195, :_reduce_74,
  3, 195, :_reduce_75,
  5, 195, :_reduce_76,
  2, 195, :_reduce_77,
  4, 195, :_reduce_78,
  2, 195, :_reduce_79,
  4, 195, :_reduce_80,
  1, 195, :_reduce_81,
  3, 195, :_reduce_82,
  1, 199, :_reduce_none,
  3, 199, :_reduce_84,
  2, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 201, :_reduce_87,
  3, 201, :_reduce_88,
  1, 200, :_reduce_89,
  1, 200, :_reduce_90,
  4, 200, :_reduce_91,
  3, 200, :_reduce_92,
  3, 200, :_reduce_93,
  3, 200, :_reduce_94,
  3, 200, :_reduce_95,
  2, 200, :_reduce_96,
  1, 200, :_reduce_97,
  1, 175, :_reduce_98,
  1, 175, :_reduce_99,
  4, 175, :_reduce_100,
  3, 175, :_reduce_101,
  3, 175, :_reduce_102,
  3, 175, :_reduce_103,
  3, 175, :_reduce_104,
  2, 175, :_reduce_105,
  1, 175, :_reduce_106,
  1, 204, :_reduce_107,
  1, 204, :_reduce_none,
  2, 205, :_reduce_109,
  1, 205, :_reduce_110,
  3, 205, :_reduce_111,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_115,
  1, 206, :_reduce_116,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 212, :_reduce_122,
  4, 164, :_reduce_123,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 181, :_reduce_195,
  5, 181, :_reduce_196,
  3, 181, :_reduce_197,
  5, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  3, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  4, 181, :_reduce_214,
  2, 181, :_reduce_215,
  2, 181, :_reduce_216,
  3, 181, :_reduce_217,
  3, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  3, 181, :_reduce_223,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  3, 181, :_reduce_229,
  2, 181, :_reduce_230,
  2, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  3, 181, :_reduce_236,
  6, 181, :_reduce_237,
  1, 181, :_reduce_none,
  1, 215, :_reduce_239,
  1, 216, :_reduce_none,
  2, 216, :_reduce_241,
  4, 216, :_reduce_242,
  2, 216, :_reduce_243,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 194, :_reduce_252,
  2, 194, :_reduce_253,
  2, 194, :_reduce_254,
  4, 194, :_reduce_255,
  1, 194, :_reduce_256,
  0, 224, :_reduce_257,
  2, 187, :_reduce_258,
  2, 223, :_reduce_259,
  2, 222, :_reduce_260,
  1, 222, :_reduce_none,
  1, 217, :_reduce_262,
  2, 217, :_reduce_263,
  3, 217, :_reduce_264,
  4, 217, :_reduce_265,
  1, 177, :_reduce_266,
  1, 177, :_reduce_267,
  3, 176, :_reduce_268,
  4, 176, :_reduce_269,
  2, 176, :_reduce_270,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_281,
  0, 247, :_reduce_282,
  4, 214, :_reduce_283,
  2, 214, :_reduce_284,
  0, 248, :_reduce_285,
  0, 249, :_reduce_286,
  5, 214, :_reduce_287,
  3, 214, :_reduce_288,
  3, 214, :_reduce_289,
  2, 214, :_reduce_290,
  3, 214, :_reduce_291,
  0, 250, :_reduce_292,
  4, 214, :_reduce_293,
  1, 214, :_reduce_294,
  4, 214, :_reduce_295,
  3, 214, :_reduce_296,
  1, 214, :_reduce_297,
  5, 214, :_reduce_298,
  4, 214, :_reduce_299,
  3, 214, :_reduce_300,
  2, 214, :_reduce_301,
  1, 214, :_reduce_none,
  2, 214, :_reduce_303,
  2, 214, :_reduce_304,
  6, 214, :_reduce_305,
  6, 214, :_reduce_306,
  0, 251, :_reduce_307,
  0, 252, :_reduce_308,
  7, 214, :_reduce_309,
  0, 253, :_reduce_310,
  0, 254, :_reduce_311,
  7, 214, :_reduce_312,
  5, 214, :_reduce_313,
  4, 214, :_reduce_314,
  0, 255, :_reduce_315,
  0, 256, :_reduce_316,
  9, 214, :_reduce_317,
  0, 257, :_reduce_318,
  0, 258, :_reduce_319,
  7, 214, :_reduce_320,
  0, 259, :_reduce_321,
  0, 260, :_reduce_322,
  0, 261, :_reduce_323,
  9, 214, :_reduce_324,
  0, 262, :_reduce_325,
  0, 263, :_reduce_326,
  6, 214, :_reduce_327,
  0, 264, :_reduce_328,
  6, 214, :_reduce_329,
  0, 265, :_reduce_330,
  0, 266, :_reduce_331,
  9, 214, :_reduce_332,
  1, 214, :_reduce_333,
  1, 214, :_reduce_334,
  1, 214, :_reduce_335,
  1, 214, :_reduce_336,
  1, 170, :_reduce_337,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 277, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_355,
  1, 160, :_reduce_none,
  2, 160, :_reduce_357,
  1, 242, :_reduce_none,
  1, 242, :_reduce_359,
  1, 278, :_reduce_none,
  3, 278, :_reduce_361,
  1, 281, :_reduce_362,
  3, 281, :_reduce_363,
  1, 280, :_reduce_364,
  4, 280, :_reduce_365,
  6, 280, :_reduce_366,
  3, 280, :_reduce_367,
  5, 280, :_reduce_368,
  2, 280, :_reduce_369,
  4, 280, :_reduce_370,
  1, 280, :_reduce_371,
  3, 280, :_reduce_372,
  4, 282, :_reduce_373,
  2, 282, :_reduce_374,
  2, 282, :_reduce_375,
  1, 282, :_reduce_376,
  2, 287, :_reduce_377,
  1, 287, :_reduce_none,
  6, 288, :_reduce_379,
  8, 288, :_reduce_380,
  4, 288, :_reduce_381,
  6, 288, :_reduce_382,
  4, 288, :_reduce_383,
  2, 288, :_reduce_384,
  6, 288, :_reduce_385,
  2, 288, :_reduce_386,
  4, 288, :_reduce_387,
  6, 288, :_reduce_388,
  2, 288, :_reduce_389,
  4, 288, :_reduce_390,
  2, 288, :_reduce_391,
  4, 288, :_reduce_392,
  1, 288, :_reduce_393,
  1, 189, :_reduce_394,
  1, 189, :_reduce_none,
  3, 292, :_reduce_396,
  1, 292, :_reduce_397,
  4, 292, :_reduce_398,
  1, 293, :_reduce_none,
  4, 293, :_reduce_400,
  1, 294, :_reduce_401,
  3, 294, :_reduce_402,
  1, 295, :_reduce_403,
  1, 295, :_reduce_none,
  0, 299, :_reduce_405,
  3, 237, :_reduce_406,
  4, 297, :_reduce_407,
  1, 297, :_reduce_408,
  3, 298, :_reduce_409,
  3, 298, :_reduce_410,
  0, 302, :_reduce_411,
  0, 303, :_reduce_412,
  6, 301, :_reduce_413,
  2, 184, :_reduce_414,
  4, 184, :_reduce_415,
  5, 184, :_reduce_416,
  5, 184, :_reduce_417,
  0, 305, :_reduce_418,
  3, 236, :_reduce_419,
  4, 236, :_reduce_420,
  4, 236, :_reduce_421,
  3, 236, :_reduce_422,
  3, 236, :_reduce_423,
  3, 236, :_reduce_424,
  2, 236, :_reduce_425,
  1, 236, :_reduce_426,
  4, 236, :_reduce_427,
  0, 306, :_reduce_428,
  0, 307, :_reduce_429,
  6, 235, :_reduce_430,
  0, 308, :_reduce_431,
  0, 309, :_reduce_432,
  6, 235, :_reduce_433,
  0, 311, :_reduce_434,
  6, 241, :_reduce_435,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  6, 159, :_reduce_438,
  0, 159, :_reduce_439,
  1, 312, :_reduce_440,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 313, :_reduce_443,
  1, 313, :_reduce_none,
  2, 161, :_reduce_445,
  1, 161, :_reduce_none,
  1, 225, :_reduce_447,
  1, 225, :_reduce_448,
  1, 225, :_reduce_none,
  1, 226, :_reduce_450,
  1, 315, :_reduce_451,
  1, 315, :_reduce_none,
  2, 315, :_reduce_453,
  3, 316, :_reduce_454,
  1, 316, :_reduce_455,
  3, 227, :_reduce_456,
  3, 228, :_reduce_457,
  3, 229, :_reduce_458,
  3, 229, :_reduce_459,
  1, 320, :_reduce_460,
  3, 320, :_reduce_461,
  1, 321, :_reduce_none,
  2, 321, :_reduce_463,
  3, 231, :_reduce_464,
  3, 231, :_reduce_465,
  1, 323, :_reduce_466,
  3, 323, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  3, 232, :_reduce_470,
  3, 232, :_reduce_471,
  1, 324, :_reduce_472,
  3, 324, :_reduce_473,
  1, 325, :_reduce_474,
  3, 325, :_reduce_475,
  1, 317, :_reduce_476,
  2, 317, :_reduce_477,
  1, 318, :_reduce_478,
  2, 318, :_reduce_479,
  1, 319, :_reduce_480,
  2, 319, :_reduce_481,
  1, 322, :_reduce_482,
  0, 327, :_reduce_483,
  3, 322, :_reduce_484,
  0, 328, :_reduce_485,
  4, 322, :_reduce_486,
  1, 326, :_reduce_487,
  1, 326, :_reduce_488,
  1, 326, :_reduce_489,
  1, 326, :_reduce_none,
  2, 210, :_reduce_491,
  1, 210, :_reduce_492,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  3, 211, :_reduce_497,
  1, 314, :_reduce_none,
  2, 314, :_reduce_499,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_509,
  1, 203, :_reduce_510,
  1, 203, :_reduce_511,
  1, 203, :_reduce_512,
  1, 203, :_reduce_513,
  1, 203, :_reduce_514,
  1, 203, :_reduce_515,
  1, 233, :_reduce_516,
  1, 233, :_reduce_517,
  1, 169, :_reduce_518,
  1, 169, :_reduce_519,
  1, 174, :_reduce_520,
  1, 174, :_reduce_521,
  1, 243, :_reduce_522,
  0, 330, :_reduce_523,
  4, 243, :_reduce_524,
  2, 243, :_reduce_525,
  3, 245, :_reduce_526,
  2, 245, :_reduce_527,
  4, 331, :_reduce_528,
  2, 331, :_reduce_529,
  2, 331, :_reduce_530,
  1, 331, :_reduce_none,
  2, 333, :_reduce_532,
  0, 333, :_reduce_533,
  6, 300, :_reduce_534,
  8, 300, :_reduce_535,
  4, 300, :_reduce_536,
  6, 300, :_reduce_537,
  4, 300, :_reduce_538,
  6, 300, :_reduce_539,
  2, 300, :_reduce_540,
  4, 300, :_reduce_541,
  6, 300, :_reduce_542,
  2, 300, :_reduce_543,
  4, 300, :_reduce_544,
  2, 300, :_reduce_545,
  4, 300, :_reduce_546,
  1, 300, :_reduce_547,
  0, 300, :_reduce_548,
  1, 296, :_reduce_549,
  1, 296, :_reduce_550,
  1, 296, :_reduce_551,
  1, 296, :_reduce_552,
  1, 279, :_reduce_none,
  1, 279, :_reduce_554,
  1, 335, :_reduce_none,
  1, 336, :_reduce_none,
  3, 336, :_reduce_557,
  1, 289, :_reduce_558,
  3, 289, :_reduce_559,
  1, 337, :_reduce_none,
  2, 338, :_reduce_561,
  1, 338, :_reduce_562,
  2, 339, :_reduce_563,
  1, 339, :_reduce_564,
  1, 283, :_reduce_none,
  3, 283, :_reduce_566,
  1, 332, :_reduce_none,
  3, 332, :_reduce_568,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 284, :_reduce_571,
  1, 284, :_reduce_572,
  3, 341, :_reduce_573,
  3, 342, :_reduce_574,
  1, 290, :_reduce_575,
  3, 290, :_reduce_576,
  1, 334, :_reduce_577,
  3, 334, :_reduce_578,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 291, :_reduce_581,
  1, 291, :_reduce_582,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  2, 286, :_reduce_585,
  2, 285, :_reduce_586,
  0, 285, :_reduce_587,
  1, 246, :_reduce_none,
  0, 345, :_reduce_589,
  4, 246, :_reduce_590,
  1, 234, :_reduce_591,
  2, 234, :_reduce_592,
  1, 219, :_reduce_none,
  3, 219, :_reduce_594,
  3, 346, :_reduce_595,
  2, 346, :_reduce_596,
  4, 346, :_reduce_597,
  2, 346, :_reduce_598,
  2, 346, :_reduce_599,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 197, :_reduce_none,
  2, 172, :_reduce_none,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_623,
  1, 244, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_626,
  0, 152, :_reduce_627 ]

racc_reduce_n = 628

racc_shift_n = 1058

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_598(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

def _reduce_623(val, _values, result)
 yyerrok 
    result
end

# reduce 624 omitted

# reduce 625 omitted

def _reduce_626(val, _values, result)
 yyerrok 
    result
end

def _reduce_627(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
