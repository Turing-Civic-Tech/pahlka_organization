#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-607,-103,221,584,584,584,790,-607,-607,-607,755,271,-84,-607,-607,-615',
'-607,94,95,665,83,541,665,584,543,-607,-70,271,84,408,-101,584,-102',
'-100,410,409,-607,-607,222,-607,-607,-607,-607,-607,456,746,218,219',
'-103,747,222,-100,-98,664,735,735,664,564,735,561,560,559,-103,562,-104',
'-99,-105,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-106,-102,-607,-607,-607,-101,649,271,218,219,-607,218,219',
'-607,721,96,97,270,-607,-106,-607,707,-607,-607,-607,-607,-607,-607',
'-607,-603,-607,-607,-607,270,-103,754,116,116,116,-103,938,115,115,115',
'-289,-607,-607,789,-93,-604,-607,-289,-289,-289,116,222,116,-289,-289',
'115,-289,115,-102,-101,116,-102,-100,-603,-101,115,-102,-100,-94,116',
'116,-91,-89,116,115,115,-289,-289,115,-289,-289,-289,-289,-289,-95,-90',
'-96,629,222,271,270,1008,-94,-92,222,626,775,222,665,-101,610,-97,-93',
'665,218,219,-92,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,273,706,-289,-289,-289,610,648,529,886,-518,-289,664',
'-519,-289,94,95,664,-91,-289,824,-289,590,-289,-289,-289,-289,-289,-289',
'-289,628,-289,-100,-289,-418,218,219,610,625,-94,-92,612,611,608,636',
'-607,-289,-289,652,-95,-96,-289,-607,-607,-607,-90,270,-607,-607,-607',
'-262,-607,680,-104,-105,-100,-98,612,611,-99,-607,-607,-607,-607,-94',
'-92,765,-94,-92,634,541,-607,-607,543,-607,-607,-607,-607,-607,-518',
'569,-94,-92,541,96,97,540,627,612,611,610,572,564,615,561,560,559,767',
'562,-519,-600,529,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,854,824,-607,-607,-607,-89,791,-607,580,579,-607',
'242,116,-607,-607,-601,-607,115,-607,-98,-607,242,-607,-607,-607,-607',
'-607,-607,-607,569,-607,-607,-607,116,242,612,611,-504,115,-99,572,-105',
'573,610,-504,-607,-607,-607,-607,-600,-607,-289,-607,-504,850,218,219',
'242,-289,-289,-289,643,-102,-289,-289,-289,541,-289,-507,543,222,-600',
'222,580,579,-507,242,-289,-289,-289,-601,116,264,624,-507,621,115,-289',
'-289,265,-289,-289,-289,-289,-289,564,222,561,560,559,-84,562,-601,-94',
'612,611,613,573,239,610,683,642,241,240,237,238,-607,-103,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,617,216',
'-289,-289,-289,-507,792,-289,-504,222,-289,610,-507,-289,-289,-504,-289',
'534,-289,694,-289,-92,-289,-289,-289,-289,-289,-289,-289,-427,-289,116',
'-289,699,610,-101,115,-607,612,611,608,984,610,-97,-607,-289,-289,-289',
'-289,-603,-289,-507,-289,-607,-515,854,824,-106,-507,-507,-507,-515',
'-104,-507,-507,-507,700,-507,703,-290,242,-607,612,611,630,-507,-290',
'-507,-507,-507,504,116,-427,709,-607,-290,115,-507,-507,-427,-507,-507',
'-507,-507,-507,612,611,618,-427,580,579,712,239,612,611,623,241,240',
'237,238,-509,119,120,121,122,123,-427,-509,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,-507,-507,-507,-507,713,-511,-507,-507,-507',
'-607,-507,-507,-511,715,-507,717,-607,-507,-507,719,-507,-603,-507,727',
'-507,-607,-507,-507,-507,-507,-507,-507,-507,-513,-507,962,-507,561',
'560,559,-513,562,564,-607,561,560,559,728,562,-507,-507,-507,-507,-514',
'-507,-504,-507,729,-512,731,-514,590,-504,-504,-504,-512,-507,-504,-504',
'-504,564,-504,561,560,559,569,562,215,-510,-504,721,-504,-504,-504,749',
'-510,572,218,219,930,738,-504,-504,751,-504,-504,-504,-504,-504,564',
'264,561,560,559,116,562,116,265,567,115,564,115,561,560,559,595,562',
'594,925,580,579,400,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,590,721,-504,-504,-504,768,-504,-504,769,770,-504',
'-263,721,-504,-504,776,-504,573,-504,544,-504,724,-504,-504,-504,-504',
'-504,-504,-504,242,-504,564,-504,561,560,559,962,562,561,560,559,538',
'562,489,215,-504,-504,-504,-504,242,-504,965,-504,489,296,72,73,74,12',
'60,751,239,-504,66,67,241,240,530,70,721,68,69,71,33,34,75,76,526,724',
'222,794,261,32,31,30,104,103,105,106,877,878,22,986,879,110,111,653',
'11,48,502,13,108,107,109,98,59,100,99,101,504,102,110,111,273,94,95',
'3,45,46,44,242,246,251,252,253,248,250,258,259,254,255,222,235,236,215',
'694,256,257,222,43,276,965,36,273,273,61,62,242,694,63,751,38,239,523',
'245,47,241,240,237,238,249,247,243,23,244,242,824,222,91,83,85,86,87',
'89,516,222,515,84,92,239,260,848,-239,241,240,65,222,824,81,88,90,858',
'222,96,97,296,72,73,74,12,60,222,-69,215,66,67,504,502,499,70,593,68',
'69,71,33,34,75,76,273,591,489,221,-264,32,31,30,104,103,105,106,458',
'457,22,885,455,888,712,637,11,48,891,13,108,107,109,98,59,100,99,101',
'894,102,110,111,896,94,95,898,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,-289,235,236,-516,222,256,257,-289,43,900,-516,36,-604,901',
'61,62,-289,411,63,-516,38,239,694,245,47,241,240,237,238,249,247,243',
'23,244,112,909,-517,91,83,85,86,87,89,-517,215,406,84,92,-262,260,913',
'1015,-517,915,65,916,222,81,88,90,1013,712,96,97,296,72,73,74,12,60',
'919,921,-290,66,67,923,925,925,70,-290,68,69,71,33,34,75,76,222,-290',
'931,933,390,32,31,30,104,103,105,106,935,387,22,384,381,357,1004,653',
'11,48,222,13,108,107,109,98,59,100,99,101,945,102,110,111,946,94,95',
'222,45,46,44,242,246,251,252,253,248,250,258,259,254,255,-280,235,236',
'-337,949,256,257,-280,43,-265,-337,36,222,959,61,62,-280,321,63,-337',
'38,239,966,245,47,241,240,237,238,249,247,243,23,244,967,969,-517,91',
'83,85,86,87,89,-517,-290,970,84,92,320,260,986,-290,-517,261,65,988',
'989,81,88,90,-290,993,96,97,296,72,73,74,12,60,712,998,215,66,67,1000',
'1002,1004,70,453,68,69,71,33,34,75,76,1004,454,1011,1016,1017,32,31',
'30,104,103,105,106,925,925,22,119,120,121,122,123,11,48,925,13,108,107',
'109,98,59,100,99,101,1022,102,110,111,986,94,95,217,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,-289,235,236,-280,211,256,257,-289',
'43,-604,-280,36,-604,-603,61,62,-289,699,63,-280,38,239,210,245,47,241',
'240,237,238,249,247,243,23,244,986,1045,215,91,83,85,86,87,89,532,215',
'1046,84,92,1047,260,1048,522,454,1004,65,1004,1004,81,88,90,520,222',
'96,97,296,72,73,74,12,60,209,641,-516,66,67,640,222,,70,-516,68,69,71',
'33,34,75,76,,-516,,,,32,31,30,104,103,105,106,,,22,119,120,121,122,123',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,-289,235,236,215,,256,257',
'-289,43,,214,36,-604,,61,62,-289,,63,212,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
'119,120,121,122,123,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,222,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,8,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235',
'236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,564,22,561,560,559,,562,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242',
'246,251,252,253,248,250,258,721,254,255,,,,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,564,,561,560,559,65,562,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,721,,,,,32,31,30,104',
'103,105,106,,564,22,561,560,559,,562,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,721,,,,,,,,256,257,',
'43,,,36,,242,61,62,,,63,,38,239,,245,47,241,240,237,238,256,257,243',
'23,244,,,,91,83,85,86,87,89,,,239,84,92,,241,240,237,238,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250',
',,-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,298,,,61,62,,,63,',
'38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,',
',,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250',
',,-627,-627,,,,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627',
'248,250,,,-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627',
'-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242',
'-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,8,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,-627,-627',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',-627,-627,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237',
'238,249,247,243,232,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,',
'227,,,233,,,61,62,,,63,,,239,283,245,47,241,240,237,238,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245',
'47,241,240,237,238,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307',
',,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,534,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286',
'85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,773,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,311,,,108,107,109,596,59,100,99,597,,102,110,111,,94,95,,,,317',
',,,,,,,,,,,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,311,,,108,107,109,596,59,100,99,597,,102,110,111,,94,95,,,,317',
',,,,,,,,,,,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,',
',,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,976,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,',
'48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,',
',,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,',
',,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63',
',302,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,319,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,903,,,233,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,286,85',
'86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,351,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,',
',,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,400,65,,,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,',
',65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307',
',,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,',
',108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,',
',,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,903,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,222,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,518,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,564,,561,560,559,569,562,,,,,,,,307,,572',
'303,,,61,62,,,63,,,,,,,,,,,,,,567,,,,,91,83,85,86,87,89,580,579,,84',
'92,,,,,,,65,,,81,88,90,-608,,96,97,,,,-608,-608,-608,,,-608,-608,-608',
',-608,573,,,,,,,,-608,-608,-608,-608,,,,,,,,-608,-608,,-608,-608,-608',
'-608,-608,,,,,,,,,,,,,,,,,,,,,,,,-608,-608,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,,,-608,-608,-608,,,-608,,,-608,,',
'-608,-608,,-608,,-608,,-608,,-608,-608,-608,-608,-608,-608,-608,,-608',
'-608,-608,,,,,,,,,,,,,-608,-608,-608,-608,-281,-608,,-608,,,,-281,-281',
'-281,,,-281,-281,-281,564,-281,561,560,559,569,562,,,,,-281,-281,-281',
',,572,,,,,-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,,567,,,,,,,,,577',
'576,580,579,,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,,,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,573',
'-281,,-281,,-281,-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,',
',,,-281,-281,-281,-281,-609,-281,,-281,,,,-609,-609,-609,,,-609,-609',
'-609,564,-609,561,560,559,569,562,,,,-609,-609,-609,-609,,,572,,,,,-609',
'-609,,-609,-609,-609,-609,-609,,,,,,,,,,567,,,,,,,,,577,576,580,579',
',-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609',
',,-609,-609,-609,,,-609,,,-609,,,-609,-609,,-609,573,-609,,-609,,-609',
'-609,-609,-609,-609,-609,-609,,-609,-609,-609,,,,,,,,,,,,,-609,-609',
'-609,-609,,-609,,-609,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,366,365',
'367,364,172,191,190,,,,,,171,178,169,170,361,362,363,359,129,100,99',
'360,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,373,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183',
'182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179',
',,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166',
'167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171',
'178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,397',
'396,128,,398,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,',
',163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183',
'182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179',
',,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166',
'167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,-297,,165,,,,,-297,-297,-297,,,-297,-297,-297',
'564,-297,561,560,559,569,562,158,,,,-297,-297,,,,572,,,,,-297,-297,',
'-297,-297,-297,-297,-297,,,,,,,,,,567,,,,,,,,,577,576,580,579,,-297',
'-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,,,-297',
'-297,-297,,,-297,,276,-297,,,-297,-297,,-297,573,-297,,-297,,-297,-297',
'-297,-297,-297,-297,-297,,-297,,-297,,,,,,,,,,,,-626,-297,-297,,-297',
',-297,-626,-626,-626,,,-626,-626,-626,564,-626,561,560,559,569,562,',
',,-626,-626,,,,,572,,,,,-626,-626,,-626,-626,-626,-626,-626,,,564,,561',
'560,559,569,562,567,,,,,,,,,572,,580,579,,-626,,,,,,,-626,-626,-626',
',-626,-626,-626,-626,,-626,567,-626,,,,,273,-626,-626,-626,-626,580',
'579,,573,,,,,-626,-626,,-626,-626,-626,-626,-626,,-626,-626,,,,,,,,',
',,,,-626,,,573,,-626,,,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,,,-626,-626,-626,,,-626,,273,-626,,,-626,-626',
',-626,,-626,,-626,,-626,-626,-626,-626,-626,-626,-626,,-626,-626,-626',
',,,,,,,,,,,-426,-626,-626,,-626,,-626,-426,-426,-426,,,-426,-426,-426',
'564,-426,561,560,559,569,562,,,,-426,-426,-426,,,,572,,,,,-426,-426',
',-426,-426,-426,-426,-426,,,,,,,,,,567,,,,,,,,,577,576,580,579,,-426',
'-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,,,-426',
'-426,-426,,,-426,,273,-426,,,-426,-426,,-426,573,-426,,-426,,-426,-426',
'-426,-426,-426,-426,-426,,-426,-426,-426,,,,,,862,437,,,863,,,-426,-426',
',-426,,-426,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,487,430,,,488,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,655,430,,,656,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,657,437,,,658,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,690,437,,,691,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,487,430,,,488,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,687,430,,,688,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,1010,437,,,1009,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,',
'142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,564,165,561,560,559,569,562,,,,,,,,,,572',
',,,,158,,,,,,,,,564,,561,560,559,569,562,,567,657,437,,,658,,,572,577',
'576,580,579,,161,162,,157,139,140,141,148,145,147,,,142,143,,,567,163',
'164,149,150,,,222,,,273,580,579,,,573,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,564,165,561,560,559,569,562,,,,,,573,,,,572',
',,,,158,,,,,,,,,,,,,,,,,567,426,430,,,427,,,,577,576,580,579,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,',
',,,573,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564,165',
'561,560,559,569,562,564,,561,560,559,569,562,,,572,,,,,158,,572,,,,',
'564,,561,560,559,569,562,,,,567,759,,,,,572,567,,577,576,580,579,,,',
'577,576,580,579,,,,,,,,,567,,,,,,,,,433,437,580,579,432,,,,573,,,,,161',
'162,573,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,573',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564',
'165,561,560,559,569,562,,,,,,,,,,572,,,,,158,,,,564,,561,560,559,569',
'562,,,,,,,567,655,430,572,,656,,,,577,576,580,579,,161,162,,157,139',
'140,141,148,145,147,,567,142,143,,,,163,164,149,150,,580,579,,,273,',
',,,573,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564,165',
'561,560,559,569,562,573,,,,,,,,,572,,,,564,158,561,560,559,569,562,564',
',561,560,559,569,562,,,572,,567,,,,,572,,,,577,576,580,579,,,,,,,,567',
'550,,,,,,567,,577,576,580,579,,,,1038,430,580,579,1039,,,,,573,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,573,163,164,149,150,,,573',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,1040,437,,,1041,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,,,,,,,',
',,572,,,,,158,,,,,,,,,,,,,,,,,567,759,741,430,,,742,,,577,576,580,579',
',,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,573,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,743,437,,,744,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,564',
',561,560,559,569,562,,,572,,,,,158,,572,,,,,,,,,,,,,,,567,,,,,,,567',
',,,580,579,,,,,,580,579,,,,,,,,,,,,,,,,,,,,,,,,,,573,,,,,,,573' ]
        racc_action_table = arr = ::Array.new(26528, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'433,1039,22,934,859,342,656,433,433,433,602,312,682,433,433,61,433,44',
'44,669,80,702,493,912,702,433,682,64,80,126,1038,341,1040,1053,126,126',
'433,433,22,433,433,433,433,433,228,598,697,697,742,598,61,860,348,669',
'587,586,493,1022,861,1022,1022,1022,656,1022,744,349,594,433,433,433',
'433,433,433,433,433,433,433,433,433,433,433,352,743,433,433,433,741',
'433,668,450,450,433,762,762,433,1022,44,44,312,433,228,433,549,433,433',
'433,433,433,433,433,1040,433,433,433,64,1039,602,934,859,342,1039,859',
'934,859,342,432,433,433,655,433,744,433,432,432,432,602,697,912,432',
'432,602,432,912,433,1038,341,1040,1053,743,1038,341,1040,1053,742,587',
'586,860,348,861,587,586,432,432,861,432,432,432,432,432,744,349,594',
'391,960,29,668,960,688,687,450,388,638,762,494,655,506,352,743,485,756',
'756,741,432,432,432,432,432,432,432,432,432,432,432,432,432,432,434',
'549,432,432,432,619,432,321,793,225,432,494,42,432,317,317,485,638,432',
'991,432,991,432,432,432,432,432,432,432,391,432,638,432,29,537,537,622',
'388,688,687,506,506,506,417,657,432,432,442,432,321,432,657,657,657',
'42,29,657,657,657,415,657,506,432,321,793,225,619,619,42,657,657,657',
'657,688,687,619,688,687,412,334,657,657,334,657,657,657,657,657,41,709',
'688,687,333,317,317,333,390,622,622,379,709,724,379,724,724,724,622',
'724,226,596,455,657,657,657,657,657,657,657,657,657,657,657,657,657',
'657,1024,1024,657,657,657,41,657,657,709,709,657,463,943,657,657,597',
'657,943,657,41,657,464,657,657,657,657,657,657,657,888,657,657,657,345',
'465,379,379,596,345,226,888,455,709,377,596,657,657,657,657,596,657',
'658,657,596,724,20,20,466,658,658,658,427,657,658,658,658,547,658,597',
'547,495,596,496,888,888,597,481,658,658,658,597,760,369,387,597,384',
'760,658,658,369,658,658,658,658,658,930,513,930,930,930,514,930,597',
'427,377,377,377,888,481,375,517,426,481,481,481,481,690,427,658,658',
'658,658,658,658,658,658,658,658,658,658,658,658,381,18,658,658,658,360',
'658,658,359,519,658,393,360,658,658,359,658,524,658,527,658,426,658',
'658,658,658,658,658,658,819,658,755,658,535,382,426,755,690,375,375',
'375,930,385,18,690,658,658,658,658,690,658,101,658,690,363,730,730,18',
'101,101,101,363,658,101,101,101,536,101,545,523,480,690,393,393,393',
'101,523,101,101,101,548,869,819,552,862,523,869,101,101,819,101,101',
'101,101,101,382,382,382,819,712,712,553,480,385,385,385,480,480,480',
'480,365,295,295,295,295,295,819,365,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,555,367,101,101,101,862,101,101,367,556,101',
'557,862,101,101,566,101,862,101,574,101,862,101,101,101,101,101,101',
'101,362,101,1008,101,1008,1008,1008,362,1008,848,862,848,848,848,578',
'848,101,101,101,101,361,101,98,101,581,364,583,361,588,98,98,98,364',
'101,98,98,98,923,98,923,923,923,923,923,600,366,98,848,98,98,98,600',
'366,923,340,340,848,589,98,98,600,98,98,98,98,98,850,27,850,850,850',
'5,850,293,27,923,5,567,293,567,567,567,353,567,351,1042,923,923,347',
'98,98,98,98,98,98,98,98,98,98,98,98,98,98,346,850,98,98,98,626,98,98',
'629,631,98,635,567,98,98,639,98,923,98,335,98,567,98,98,98,98,98,98',
'98,461,98,721,98,721,721,721,900,721,900,900,900,331,900,644,964,98',
'98,98,98,325,98,964,98,650,856,856,856,856,856,856,964,461,98,856,856',
'461,461,322,856,721,856,856,856,856,856,856,856,318,721,659,661,667',
'856,856,856,856,856,856,856,763,763,856,1043,763,763,763,445,856,856',
'674,856,856,856,856,856,856,856,856,856,676,856,856,856,316,856,856',
'1,856,856,856,445,445,445,445,445,445,445,445,445,445,445,311,445,445',
'902,684,445,445,686,856,310,902,856,689,692,856,856,462,693,856,902',
'856,445,307,445,856,445,445,445,445,445,445,445,856,445,696,698,701',
'856,856,856,856,856,856,301,708,300,856,856,462,445,723,445,462,462',
'856,725,732,856,856,856,737,299,856,856,996,996,996,996,996,996,740',
'297,350,996,996,284,281,280,996,350,996,996,996,996,996,996,996,269',
'350,266,234,772,996,996,996,996,996,996,996,230,229,996,777,227,795',
'796,420,996,996,798,996,996,996,996,996,996,996,996,996,799,996,996',
'996,800,996,996,802,996,996,996,420,420,420,420,420,420,420,420,420',
'420,420,691,420,420,973,803,420,420,691,996,804,973,996,691,805,996',
'996,691,207,996,973,996,420,818,420,996,420,420,420,420,420,420,420',
'996,420,3,822,974,996,996,996,996,996,996,974,975,124,996,996,825,420',
'826,975,974,831,996,832,833,996,996,996,975,834,996,996,995,995,995',
'995,995,995,838,839,1016,995,995,841,842,844,995,1016,995,995,995,995',
'995,995,995,847,1016,849,852,90,995,995,995,995,995,995,995,855,89,995',
'88,87,72,1055,660,995,995,865,995,995,995,995,995,995,995,995,995,870',
'995,995,995,871,995,995,872,995,995,995,660,660,660,660,660,660,660',
'660,660,660,660,977,660,660,49,881,660,660,977,995,882,49,995,48,899',
'995,995,977,43,995,49,995,660,903,660,995,660,660,660,660,660,660,660',
'995,660,904,906,305,995,995,995,995,995,995,305,747,907,995,995,40,660',
'932,747,305,25,995,936,937,995,995,995,747,942,995,995,992,992,992,992',
'992,992,950,953,224,992,992,954,955,956,992,224,992,992,992,992,992',
'992,992,958,224,968,976,979,992,992,992,992,992,992,992,980,981,992',
'512,512,512,512,512,992,992,982,992,992,992,992,992,992,992,992,992',
'983,992,992,992,985,992,992,19,992,992,992,278,278,278,278,278,278,278',
'278,278,278,278,1041,278,278,308,16,278,278,1041,992,1009,308,992,1041',
'1010,992,992,1041,1012,992,308,992,278,15,278,992,278,278,278,278,278',
'278,278,992,278,1023,1028,323,992,992,992,992,992,992,323,306,1029,992',
'992,1030,278,1031,306,323,1032,992,1033,1034,992,992,992,306,1037,992',
'992,987,987,987,987,987,987,13,425,304,987,987,424,421,,987,304,987',
'987,987,987,987,987,987,,304,,,,987,987,987,987,987,987,987,,,987,681',
'681,681,681,681,987,987,,987,987,987,987,987,987,987,987,987,,987,987',
'987,,987,987,,987,987,987,440,440,440,440,440,440,440,440,440,440,440',
'863,440,440,17,,440,440,863,987,,17,987,863,,987,987,863,,987,17,987',
'440,,440,987,440,440,440,440,440,440,440,987,440,,,,987,987,987,987',
'987,987,,,,987,987,,440,,,,,987,,,987,987,987,,,987,987,972,972,972',
'972,972,972,,,,972,972,,,,972,,972,972,972,972,972,972,972,9,9,9,9,9',
'972,972,972,972,972,972,972,,,972,,,,,,972,972,,972,972,972,972,972',
'972,972,972,972,,972,972,972,,972,972,,972,972,972,484,484,484,484,484',
'484,484,484,484,484,484,,484,484,,,484,484,,972,,,972,,,972,972,,,972',
',972,484,,484,972,484,484,484,484,484,484,484,972,484,,,,972,972,972',
'972,972,972,,,,972,972,484,484,,,,,972,,,972,972,972,,,972,972,939,939',
'939,939,939,939,,,,939,939,,,,939,,939,939,939,939,939,939,939,,,,,',
'939,939,939,939,939,939,939,,,939,,,,,,939,939,,939,939,939,939,939',
'939,939,939,939,,939,939,939,,939,939,,939,939,939,695,695,695,695,695',
'695,695,695,695,695,695,,695,695,,,695,695,,939,,,939,,,939,939,,,939',
',939,695,,695,939,695,695,695,695,695,695,695,939,695,,,,939,939,939',
'939,939,939,,,,939,939,,695,,,,,939,,,939,939,939,,,939,939,2,2,2,2',
'2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2',
'2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,24,24,24,24,24,24,24,24,24,24,24,,24',
'24,,,24,24,,2,,,2,,,2,2,,,2,,2,24,,24,2,24,24,24,24,24,24,24,2,24,,',
',2,2,2,2,2,2,,,,2,2,,24,,,,,2,,,2,2,2,,,2,2,36,36,36,36,36,36,,,,36',
'36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36',
'36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,788,788,788',
'788,788,788,788,788,788,788,788,,788,788,,,788,788,,36,,,36,,,36,36',
',,36,,36,788,,788,36,788,788,788,788,788,788,788,36,788,,,,36,36,36',
'36,36,36,,,,36,36,,788,,,,,36,,,36,36,36,,,36,36,909,909,909,909,909',
'909,,,,909,909,,,,909,,909,909,909,909,909,909,909,,,,,,909,909,909',
'909,909,909,909,,,909,,,,,,909,909,,909,909,909,909,909,909,909,909',
'909,,909,909,909,,909,909,,909,909,909,884,884,884,884,884,884,884,884',
'884,884,884,,884,884,,,884,884,,909,,,909,,,909,909,,,909,,909,884,',
'884,909,884,884,884,884,884,884,884,909,884,,,,909,909,909,909,909,909',
',,,909,909,,884,,,,,909,,,909,909,909,,,909,909,905,905,905,905,905',
'905,,,,905,905,,,,905,,905,905,905,905,905,905,905,,,,,,905,905,905',
'905,905,905,905,,,905,,,,,,905,905,,905,905,905,905,905,905,905,905',
'905,,905,905,905,,905,905,,905,905,905,786,786,786,786,786,786,786,786',
'786,786,786,,786,786,,,786,786,,905,,,905,,,905,905,,,905,,905,786,',
'786,905,786,786,786,786,786,786,786,905,786,,,,905,905,905,905,905,905',
',,,905,905,,786,,,,,905,,,905,905,905,,,905,905,866,866,866,866,866',
'866,,,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,,866,866,866',
'866,866,866,866,,,866,,,,,,866,866,,866,866,866,866,866,866,866,866',
'866,,866,866,866,,866,866,,866,866,866,784,784,784,784,784,784,784,784',
'784,784,784,,784,784,,,784,784,,866,,,866,,,866,866,,,866,,866,784,',
'784,866,784,784,784,784,784,784,784,866,784,,,,866,866,866,866,866,866',
',,,866,866,,784,,,,,866,,,866,866,866,,,866,866,857,857,857,857,857',
'857,,,,857,857,,,,857,,857,857,857,857,857,857,857,,,,,,857,857,857',
'857,857,857,857,,,857,,,,,,857,857,,857,857,857,857,857,857,857,857',
'857,,857,857,857,,857,857,,857,857,857,887,887,887,887,887,887,887,887',
'887,887,887,,887,887,,,887,887,,857,,,857,,,857,857,,,857,,857,887,',
'887,857,887,887,887,887,887,887,887,857,887,,,,857,857,857,857,857,857',
',,,857,857,,887,,,,,857,,,857,857,857,,,857,857,824,824,824,824,824',
'824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824',
'824,824,824,824,,,824,,,,,,824,824,,824,824,824,824,824,824,824,824',
'824,,824,824,824,,824,824,,824,824,824,781,781,781,781,781,781,781,781',
'781,781,781,,781,781,,,781,781,,824,,,824,,,824,824,,,824,,824,781,',
'781,824,781,781,781,781,781,781,781,824,781,,,,824,824,824,824,824,824',
',,,824,824,,781,,,,,824,,,824,824,824,,,824,824,814,814,814,814,814',
'814,,,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814',
'814,814,814,814,,,814,,,,,,814,814,,814,814,814,814,814,814,814,814',
'814,,814,814,814,,814,814,,814,814,814,779,779,779,779,779,779,779,779',
'779,779,779,,779,779,,,779,779,,814,,,814,,,814,814,,,814,,814,779,',
'779,814,779,779,779,779,779,779,779,814,779,,,,814,814,814,814,814,814',
',,,814,814,,779,,,,,814,,,814,814,814,,,814,814,813,813,813,813,813',
'813,,,,813,813,,,,813,,813,813,813,813,813,813,813,,,,,,813,813,813',
'813,813,813,813,,,813,,,,,,813,813,,813,813,813,813,813,813,813,813',
'813,,813,813,813,,813,813,,813,813,813,533,533,533,533,533,533,533,533',
'533,533,533,,533,533,,,533,533,,813,,,813,,,813,813,,,813,,813,533,',
'533,813,533,533,533,533,533,533,533,813,533,,,,813,813,813,813,813,813',
',,,813,813,,533,,,,,813,,,813,813,813,,,813,813,209,209,209,209,209',
'209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209,209',
'209,209,209,209,,,209,,,,,,209,209,,209,209,209,209,209,209,209,209',
'209,,209,209,209,,209,209,,209,209,209,774,774,774,774,774,774,774,774',
'774,774,774,,774,774,,,774,774,,209,,,209,,,209,209,,,209,,209,774,',
'774,209,774,774,774,774,774,774,774,209,774,,,,209,209,209,209,209,209',
',,,209,209,,774,,,,,209,,,209,209,209,,,209,209,809,809,809,809,809',
'809,,,,809,809,,,,809,,809,809,809,809,809,809,809,,,,,,809,809,809',
'809,809,809,809,,984,809,984,984,984,,984,809,809,,809,809,809,809,809',
'809,809,809,809,,809,809,809,,809,809,,809,809,809,483,483,483,483,483',
'483,483,483,984,483,483,,,,,,483,483,,809,,,809,,,809,809,,,809,,809',
'483,,483,809,483,483,483,483,483,483,483,809,483,,,,809,809,809,809',
'809,809,,,,809,809,,931,,931,931,931,809,931,,809,809,809,,,809,809',
'233,233,233,233,233,233,,,,233,233,,,,233,,233,233,233,233,233,233,233',
'931,,,,,233,233,233,233,233,233,233,,986,233,986,986,986,,986,233,233',
',233,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233',
'233,474,,,,,,,,986,,,,,,,,474,474,,233,,,233,,469,233,233,,,233,,233',
'474,,474,233,474,474,474,474,469,469,474,233,474,,,,233,233,233,233',
'233,233,,,469,233,233,,469,469,469,469,,233,,,233,233,233,,,233,233',
'764,764,764,764,764,764,,,,764,764,,,,764,,764,764,764,764,764,764,764',
',,,,,764,764,764,764,764,764,764,,,764,,,,,,764,764,,764,764,764,764',
'764,764,764,764,764,,764,764,764,,764,764,,764,764,764,476,476,476,476',
'476,476,476,,,476,476,,,,,,476,476,,764,,,764,,,764,764,,,764,,764,476',
',476,764,476,476,476,476,476,476,476,764,476,,,,764,764,764,764,764',
'764,,,,764,764,,,,,,,764,,,764,764,764,,,764,764,758,758,758,758,758',
'758,,,,758,758,,,,758,,758,758,758,758,758,758,758,,,,,,758,758,758',
'758,758,758,758,,,758,,,,,,758,758,,758,758,758,758,758,758,758,758',
'758,,758,758,758,,758,758,,758,758,758,482,482,482,482,482,482,482,',
',482,482,,,,,,482,482,,758,,,758,,,758,758,,,758,,758,482,,482,758,482',
'482,482,482,482,482,482,758,482,,,,758,758,758,758,758,758,,,,758,758',
',,,,,,758,,,758,758,758,,,758,758,757,757,757,757,757,757,,,,757,757',
',,,757,,757,757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757',
',,757,,,,,,757,757,,757,757,757,757,757,757,757,757,757,,757,757,757',
',757,757,,757,757,757,473,,,,,,,,,,,,,,,,473,473,,757,,,757,,,757,757',
',,757,,757,473,,473,757,473,473,473,473,,,473,757,473,,,,757,757,757',
'757,757,757,,,,757,757,,,,,,,757,,,757,757,757,,,757,757,298,298,298',
'298,298,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298',
'298,298,298,298,298,298,,,298,,,,,,298,298,,298,298,298,298,298,298',
'298,298,298,,298,298,298,,298,298,,298,298,298,471,,,,,,,,,,,,,,,,471',
'471,,298,,,298,,,298,298,,,298,,298,471,,471,298,471,471,471,471,,,471',
'298,471,,,,298,298,298,298,298,298,,,,298,298,,,,,,,298,,,298,298,298',
',,298,298,707,707,707,707,707,707,,,,707,707,,,,707,,707,707,707,707',
'707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,,707,707,,707',
'707,707,707,707,707,707,707,707,,707,707,707,,707,707,,707,707,707,472',
',,,,,,,,,,,,,,,472,472,,707,,,707,,,707,707,,,707,,707,472,,472,707',
'472,472,472,472,,,472,707,472,,,,707,707,707,707,707,707,,,,707,707',
',,,,,,707,,,707,707,707,,,707,707,303,303,303,303,303,303,,,,303,303',
',,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303',
',,303,,,,,,303,303,,303,303,303,303,303,303,303,303,303,,303,303,303',
',303,303,,303,303,303,479,479,479,479,479,479,479,,,479,479,,,,,,479',
'479,,303,,,303,,,303,303,,,303,,303,479,,479,303,479,479,479,479,479',
'479,479,303,479,,,,303,303,303,303,303,303,,,,303,303,,,,,,,303,,,303',
'303,303,,,303,303,706,706,706,706,706,706,,,,706,706,,,,706,,706,706',
'706,706,706,706,706,,,,,,706,706,706,706,706,706,706,,,706,,,,,,706',
'706,,706,706,706,706,706,706,706,706,706,,706,706,706,,706,706,,706',
'706,706,475,475,475,475,475,475,475,,,475,475,,,,,,475,475,,706,,,706',
',,706,706,,,706,,706,475,,475,706,475,475,475,475,475,475,475,706,475',
',,,706,706,706,706,706,706,,,,706,706,,,,,,,706,,,706,706,706,,,706',
'706,328,328,328,328,328,328,,,,328,328,,,,328,,328,328,328,328,328,328',
'328,,,,,,328,328,328,328,328,328,328,,,328,,,,,,328,328,,328,328,328',
'328,328,328,328,328,328,,328,328,328,,328,328,,328,328,328,478,478,478',
'478,478,478,478,,,478,478,,,,,,478,478,,328,,,328,,,328,328,,,328,,328',
'478,,478,328,478,478,478,478,478,478,478,328,478,,,,328,328,328,328',
'328,328,,,,328,328,,,,,,,328,,,328,328,328,,,328,328,585,585,585,585',
'585,585,,,,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585',
'585,585,585,585,585,,,585,,,,,,585,585,,585,585,585,585,585,585,585',
'585,585,,585,585,585,,585,585,,585,585,585,477,477,477,477,477,477,477',
',,477,477,,,,,,477,477,,585,,,585,,,585,585,,,585,,585,477,,477,585',
'477,477,477,477,477,477,477,585,477,,,,585,585,585,585,585,585,,,,585',
'585,,,,,,,585,,,585,585,585,,,585,585,582,582,582,582,582,582,,,,582',
'582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582',
'582,,,582,,,,,,582,582,,582,582,582,582,582,582,582,582,582,,582,582',
'582,,582,582,,582,582,582,470,470,470,470,470,470,470,,,470,470,,,,',
',470,470,,582,,,582,,,582,582,,,582,,582,470,,470,582,470,470,470,470',
'470,470,470,582,470,,,,582,582,582,582,582,582,,,,582,582,,,,,,,582',
',,582,582,582,,,582,582,406,406,406,406,406,406,,,,406,406,,,,406,,406',
'406,406,406,406,406,406,,,,,,406,406,406,406,406,406,406,,,406,,,,,',
'406,406,406,406,406,406,406,406,406,406,406,406,,406,406,406,,406,406',
',406,406,406,459,459,459,459,459,459,459,459,459,459,459,,459,459,,',
'459,459,,406,,,406,,,406,406,,,406,,406,459,,459,406,459,459,459,459',
'459,459,459,406,459,,,,406,406,406,406,406,406,,,,406,406,,,,,,,406',
',,406,406,406,,,406,406,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46',
'46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46',
'46,,46,46,46,,46,46,,46,46,46,460,460,460,460,460,460,460,460,460,460',
'460,,460,460,,,460,460,,46,,,46,,,46,46,,,46,,,460,,460,46,460,460,460',
'460,460,460,460,46,460,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46',
'46,,,46,46,885,885,885,,885,,,,885,885,,,,885,,885,885,885,885,885,885',
'885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885,885',
'885,885,885,885,885,885,885,885,,885,885,,885,885,885,468,,,,,,,,,,',
',,,,,468,468,,885,,,885,,,885,885,,,885,,,468,885,468,885,468,468,468',
'468,,,,885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885,,885,885',
'885,885,,,885,885,867,867,867,,867,,,,867,867,,,,867,,867,867,867,867',
'867,867,867,,,,,,867,867,867,867,867,867,867,,,867,,,,,,,867,,,867,867',
'867,867,867,867,867,867,,867,867,867,,867,867,,867,867,867,467,,,,,',
',,,,,,,,,,467,467,,867,,,867,,,867,867,,,867,,,467,,467,867,467,467',
'467,467,,,,867,,,,,867,867,867,867,867,867,,,,867,867,,,,,,,867,,,867',
'867,867,,,867,867,680,680,680,,680,,,,680,680,,,,680,,680,680,680,680',
'680,680,680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680',
'680,680,680,680,680,680,,680,680,680,,680,680,,680,680,680,,,,,,,,,',
',,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680',
'680,680,680,680,,,,680,680,,,,,,,680,,,680,680,680,,,680,680,677,677',
'677,,677,,,,677,677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677',
'677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677',
',677,677,677,,677,677,,677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677',
'677,,,677,,,,,,677,,,,,,,,677,,,,,677,677,677,677,677,677,,,,677,677',
',,,,,,677,,,677,677,677,,,677,677,319,319,319,,319,,,,319,319,,,,319',
',319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319',
',,,,,,319,,,319,319,319,319,319,319,319,319,,319,319,319,,319,319,,',
',319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,',
'319,319,319,319,319,319,,,,319,319,,,,,,,319,,,319,319,319,,,319,319',
'653,653,653,,653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,',
',653,653,653,653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653',
'653,653,,653,653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,',
'653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653',
',,,653,653,,,,,,,653,,,653,653,653,,,653,653,652,652,652,,652,,,,652',
'652,,,,652,,652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652',
'652,,,652,,,,,,,652,,,652,652,652,652,652,652,652,652,,652,652,652,',
'652,652,,652,652,652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652,,,652,,',
',,,652,,,,,,,,652,,,,,652,652,652,652,652,652,,,,652,652,,,,,,,652,',
',652,652,652,,,652,652,649,649,649,,649,,,,649,649,,,,649,,649,649,649',
'649,649,649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649',
'649,649,649,649,649,649,649,,649,649,649,,649,649,,649,649,649,,,,,',
',,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649,,,,,,,,649,,,,,649',
'649,649,649,649,649,,,,649,649,,,,,,,649,,,649,649,649,,,649,649,648',
'648,648,,648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,,,648',
'648,648,648,648,648,648,,,648,,,,,,,648,,,648,648,648,648,648,648,648',
'648,,648,648,648,,648,648,,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648',
',,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648,648,648,648,648,648,,,,648',
'648,,,,,,,648,,,648,648,648,,,648,648,327,327,327,,327,,,,327,327,,',
',327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327,',
',327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327,327,,327,327',
',327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,327,,327,327,,,327,,,,,,327',
',,,,,,,327,,,,,327,327,327,327,327,327,,,,327,327,,,,,,,327,,,327,327',
'327,,,327,327,330,330,330,,330,,,,330,330,,,,330,,330,330,330,330,330',
'330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330',
'330,330,330,330,330,,330,330,330,,330,330,,330,330,330,,,,,,,,,,,,,',
',,,,,,330,,,330,,,330,330,,,330,,,,,,330,,,,,,,,330,,,,,330,330,330',
'330,330,330,,,,330,330,,,,,,,330,,,330,330,330,,,330,330,643,643,643',
',643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643',
'643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643',
'643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643',
',,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,,,',
',,,643,,,643,643,643,,,643,643,642,642,642,,642,,,,642,642,,,,642,,642',
'642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,',
',642,,,642,642,642,642,642,642,642,642,,642,642,642,,642,642,,642,642',
'642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,,,,,642,,,,,,,,642',
',,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,,642,642,642,,,642',
'642,641,641,641,,641,,,,641,641,,,,641,,641,641,641,641,641,641,641',
',,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641,641',
'641,641,641,641,641,641,641,,641,641,,641,641,641,,,,,,,,,,,,,,,,,,',
',641,,,641,,,641,641,,,641,,,,641,,641,,,,,,,,641,,,,,641,641,641,641',
'641,641,,,,641,641,,,,,,,641,,641,641,641,641,,,641,641,640,640,640',
',640,,,,640,640,,,,640,,640,640,640,640,640,640,640,,,,,,640,640,640',
'640,640,640,640,,,640,,,,,,,640,,,640,640,640,640,640,640,640,640,640',
'640,640,640,,640,640,,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640',
'640,,,640,,640,,640,,640,,,,,,,,640,,,,,640,640,640,640,640,640,,,,640',
'640,,,,,,,640,,640,640,640,640,,,640,640,336,336,336,,336,,,,336,336',
',,,336,,336,336,336,336,336,336,336,,,,,,336,336,336,336,336,336,336',
',,336,,,,,,,336,,,336,336,336,336,336,336,336,336,336,336,336,336,,336',
'336,,336,336,336,,,,,,,,,,,,,,,,,,,,336,,,336,,,336,336,,,336,,,,,,336',
',,,,,,,336,,,,,336,336,336,336,336,336,,,,336,336,,,,,,,336,,336,336',
'336,336,,,336,336,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637',
'637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637',
'637,637,637,637,637,637,,637,637,637,,637,637,,637,637,637,,,,,,,,,',
',,,,,,,,,,637,,,637,,,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637,637',
'637,637,637,637,,,,637,637,,,,,,,637,,,637,637,637,,,637,637,636,636',
'636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636',
'636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636',
',636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636',
'636,,,636,,636,,,,636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636',
'636,,,,,,,636,,,636,636,636,,,636,636,343,343,343,,343,,,,343,343,,',
',343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,',
',343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343',
',343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,',
',,,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343,,,343,343',
'343,,,343,343,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344',
'344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344',
'344,344,344,344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,',
',,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344',
'344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344,607,607,607',
',607,,,,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607',
'607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607,,607',
'607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607',
',,607,,,,,,607,,,,,,,,607,,,,,607,607,607,607,607,607,,,,607,607,,,',
',,,607,,,607,607,607,,,607,607,603,603,603,,603,,,,603,603,,,,603,,603',
'603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,',
',603,,,603,603,603,603,603,603,603,603,,603,603,603,,603,603,,603,603',
'603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603,,,,,,603,,,,,,,,603',
',,,,603,603,603,603,603,603,,,,603,603,,,,,,,603,,,603,603,603,,,603',
'603,591,591,591,,591,,,,591,591,,,,591,,591,591,591,591,591,591,591',
',,,,,591,591,591,591,591,591,591,,,591,,,,,,,591,,,591,591,591,591,591',
'591,591,591,591,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,,',
',591,,,591,,,591,591,,,591,,591,,591,,591,,,,,,,,591,,,,,591,591,591',
'591,591,591,,,,591,591,,,,,,,591,,591,591,591,591,,,591,591,356,356',
'356,,356,,,,356,356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356',
'356,356,356,356,356,,,356,,,,,,,356,,,356,356,356,356,356,356,356,356',
',356,356,356,,356,356,,,,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356',
',,356,,,,,,,,,,,,,,,,,,,356,356,356,356,356,356,,,,356,356,,,,,,,356',
',,356,356,356,,,356,356,358,358,358,,358,,,,358,358,,,,358,,358,358',
'358,358,358,358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358',
',,358,358,358,358,358,358,358,358,,358,358,358,,358,358,,,,358,,,,,',
',,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,,,,,,,,,,,,,,,,,358,358,358',
'358,358,358,,,,358,358,,,,,,,358,,,358,358,358,,,358,358,1013,1013,1013',
',1013,,,,1013,1013,,,,1013,,1013,1013,1013,1013,1013,1013,1013,,,,,',
'1013,1013,1013,1013,1013,1013,1013,,,1013,,,,,,,1013,,,1013,1013,1013',
'1013,1013,1013,1013,1013,1013,1013,1013,1013,,1013,1013,,1013,1013,1013',
',,,,,,,,,,,,,,,,,,,1013,,,1013,,,1013,1013,,,1013,,1013,,1013,,1013',
',,,,,,,1013,,,,,1013,1013,1013,1013,1013,1013,,,,1013,1013,,,,,,,1013',
',1013,1013,1013,1013,,,1013,1013,416,416,416,,416,,,,416,416,,,,416',
',416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416,416,,,416',
',,,,,,416,,,416,416,416,416,416,416,416,416,,416,416,416,,416,416,,416',
'416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,',
',416,,,,,416,416,416,416,416,416,,,,416,416,,,,,,,416,,,416,416,416',
',,416,416,570,570,570,,570,,,,570,570,,,,570,,570,570,570,570,570,570',
'570,,,,,,570,570,570,570,570,570,570,,,570,,,,,,,570,,,570,570,570,570',
'570,570,570,570,,570,570,570,,570,570,,570,570,570,,,,,,,,,,,,,,,,,',
',,570,,,570,,,570,570,,,570,,,,,,570,,,,,,,,570,,,,,570,570,570,570',
'570,570,,,,570,570,,,,,,,570,,,570,570,570,,,570,570,23,23,23,,23,,',
',23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,',
',,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,',
',,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23',
'23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,938,938,938,,938,,,,938,938',
',,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938',
',,938,,,,,,,938,,,938,938,938,938,938,938,938,938,,938,938,938,,938',
'938,,938,938,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938,,938,',
',,938,,,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,',
'938,938,938,,,938,938,913,913,913,,913,,,,913,913,,,,913,,913,913,913',
'913,913,913,913,,,,,,913,913,913,913,913,913,913,,,913,,,,,,,913,,,913',
'913,913,913,913,913,913,913,,913,913,913,,913,913,,,,913,,,,,,,,,,,',
',,,,,,,,913,,,913,,,913,913,,,913,,,,,,,,,,,,,,,,,,,913,913,913,913',
'913,913,,,,913,913,,,,,,,913,,,913,913,913,,,913,913,543,543,543,,543',
',,,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543',
'543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543,543,543',
'543,543,,543,543,,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543',
',,543,,,,,,543,,,,,,,,543,,,,,543,543,543,543,543,543,,,,543,543,,,',
',,,543,,543,543,543,543,,,543,543,32,32,32,,32,,,,32,32,,,,32,,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32',
'32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32',
',,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,',
',,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33',
'33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33',
'33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33',
',,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,',
'33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34',
'34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34',
',34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34',
'34,,,34,34,540,540,540,,540,,,,540,540,,,,540,,540,540,540,540,540,540',
'540,,,,,,540,540,540,540,540,540,540,,,540,,,,,,,540,,,540,540,540,540',
'540,540,540,540,540,540,540,540,,540,540,,540,540,540,,,,,,,,,,,,,,',
',,,,,540,,,540,,,540,540,,,540,,540,,,,540,,,,,,,,540,,,,,540,540,540',
'540,540,540,,,,540,540,,,,,,,540,,540,540,540,540,,,540,540,37,37,37',
',37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,',
',37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,',
',,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38',
',38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38',
'38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38',
',,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38',
',,38,38,38,,,38,38,534,534,534,,534,,,,534,534,,,,534,,534,534,534,534',
'534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534',
'534,534,534,534,534,534,,534,534,534,,534,534,,534,534,534,,,,,,,,,',
',,,,,,,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,534,,,,,534,534',
'534,534,534,534,,,,534,534,,,,,,,534,,,534,534,534,,,534,534,530,530',
'530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530',
'530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530',
',530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530',
'530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530',
',,,,,,530,,,530,530,530,,,530,530,901,901,901,,901,,,,901,901,,,,901',
',901,901,901,901,901,901,901,,,,,,901,901,901,901,901,901,901,,,901',
',,,,,,901,,,901,901,901,901,901,901,901,901,,901,901,901,,901,901,,',
',901,,,,,,,,,,,,,,,,,,,,901,,,901,,,901,901,,,901,,,,,,,,,,,,,,,,,,',
'901,901,901,901,901,901,,,,901,901,,,,,,,901,,,901,901,901,,,901,901',
'886,886,886,,886,,,,886,886,,,,886,,886,886,886,886,886,886,886,,,,',
',886,886,886,886,886,886,886,,,886,,,,,,,886,,,886,886,886,886,886,886',
'886,886,,886,886,886,,886,886,,886,886,886,,,,,,,,,,,,,,,,,,,,886,,',
'886,,,886,886,,,886,,,,,,886,,,,,,,,886,,,,,886,886,886,886,886,886',
',,,886,886,,,,,,,886,,,886,886,886,,,886,886,45,45,45,,45,,,,45,45,',
',,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,',
',45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,',
',,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45',
'45,,,,,,,45,,,45,45,45,,,45,45,47,47,47,,47,,,,47,47,,,,47,,47,47,47',
'47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47',
'47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47',
'47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47,,',
'47,47,47,,,47,47,529,529,529,,529,,,,529,529,,,,529,,529,529,529,529',
'529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529,529',
'529,529,529,529,529,529,,529,529,529,,529,529,,529,529,529,,,,,,,,,',
',,,,,,,,,,529,,,529,,,529,529,,,529,,,,,,529,,,,,,,,529,,,,,529,529',
'529,529,529,529,,,,529,529,,,,,,,529,,,529,529,529,,,529,529,62,62,62',
',62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,',
',62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62',
',,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62',
'62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,66,66,66,,66,,,,66',
'66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,',
'66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,',
',,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66',
',,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,',
'67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70',
'70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70',
',70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,',
',,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70',
'70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,',
',,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,526,526',
'526,,526,,,,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526',
',526,526,526,,526,526,,,,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526',
',,526,,,,,,,,,,,,,,,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526',
',,526,526,526,,,526,526,854,854,854,,854,,,,854,854,,,,854,,854,854',
'854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854,,,,,,,854',
',,854,854,854,854,854,854,854,854,,854,854,854,,854,854,,854,854,854',
',,,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,,854,,,,,,854,,,,,,,,854,,,',
',854,854,854,854,854,854,,,,854,854,,,,,,,854,,,854,854,854,,,854,854',
'8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8',
'8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8',
'114,114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,',
',,,,114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114',
'114,114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,',
',,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114',
'114,114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119',
'119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119',
'119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119',
',119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119',
'119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119',
',,,,,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120',
',120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120',
',,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120',
'120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,',
',120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120',
',,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121',
'121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121',
'121,121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,',
',,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121',
'121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122',
',,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122',
'122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122',
'122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122',
',,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122',
',,122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520,520,520',
'520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520',
'520,520,520,520,520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,',
',,,,,520,,,520,,,520,520,,,520,,520,,520,,520,,,,,,,,520,,,,,520,520',
'520,520,520,520,,,,520,520,,,,,,,520,,520,520,520,520,,,520,520,518',
'518,518,,518,,,,518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518',
'518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518',
'518,,518,518,518,,518,518,,,,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518',
'518,,,518,,,,,,,,,,,,,,,,,,,518,518,518,518,518,518,,,,518,518,,,,,',
',518,,,518,518,518,,,518,518,511,511,511,511,511,,,,511,511,,,,511,',
'511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511,,,511,',
',,,,511,511,,511,511,511,511,511,511,511,511,511,,511,511,511,,511,511',
',511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,511,,,,511',
',,,,,,,511,,,,,511,511,511,511,511,511,,,,511,511,,,,,,511,511,,,511',
'511,511,,,511,511,504,504,504,,504,,,,504,504,,,,504,,504,504,504,504',
'504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504',
'504,504,504,504,504,504,,504,504,504,,504,504,,504,504,504,,,,,,,,,',
',,,,,,,,,,504,,,504,,,504,504,,,504,,,,,,504,,,,,,,,504,,,,,504,504',
'504,504,504,504,,,,504,504,,,,,,,504,,,504,504,504,,,504,504,210,210',
'210,,210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210',
'210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210',
',210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210',
'210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210',
'210,,,,,,,210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,',
',211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,',
',211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211',
',211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,',
',,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211',
'211,,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212',
'212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212',
'212,212,212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,',
',,,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212',
'212,212,212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212',
'502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502,502,,,,',
',502,502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502,502',
'502,502,502,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502',
',,502,,,502,502,,,502,,,,502,,502,,,,,,,,502,,,,,502,502,502,502,502',
'502,,,,502,502,,,,,,,502,,502,502,502,502,,,502,502,806,806,806,,806',
',,,806,806,,,,806,,806,806,806,806,806,806,806,,,,,,806,806,806,806',
'806,806,806,,,806,,,,,,,806,,,806,806,806,806,806,806,806,806,,806,806',
'806,,806,806,,,,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806,,,806,,,',
',,,,,,,,,,,,,,,806,806,806,806,806,806,,,,806,806,,,,,,,806,,,806,806',
'806,,,806,806,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,',
',,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216',
'216,216,216,,,,216,216,,,,,,,216,,,216,216,216,,,216,216,217,217,217',
',217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217',
'217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217',
'217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217',
',,217,,217,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218',
',218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218',
',,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218',
'218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,',
',218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218',
',,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220',
',,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220',
',,220,220,220,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,221,,,,,,221,,,221,221,221,,,221',
'221,794,794,794,,794,,,,794,794,,,,794,,794,794,794,794,794,794,794',
',,,,,794,794,794,794,794,794,794,,,794,,,,,,,794,,,794,794,794,794,794',
'794,794,794,,794,794,794,,794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794',
',,794,,,794,794,,,794,,,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794',
',,,794,794,,,,,,,794,,,794,794,794,,,794,794,792,792,792,,792,,,,792',
'792,,,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792',
'792,,,792,,,,,,,792,,,792,792,792,792,792,792,792,792,,792,792,792,',
'792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,',
',,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,,,,,,,792,',
',792,792,792,,,792,792,791,791,791,,791,,,,791,791,,,,791,,791,791,791',
'791,791,791,791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,,791,,,791',
'791,791,791,791,791,791,791,,791,791,791,,791,791,,791,791,791,,,,,',
',,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,,,791',
'791,791,791,791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791,791,790',
'790,790,,790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790',
'790,790,790,790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790',
'790,,790,790,790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790',
',,790,790,,,790,,,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790',
'790,,,,,,,790,,,790,790,790,,,790,790,789,789,789,,789,,,,789,789,,',
',789,,789,789,789,789,789,789,789,,,,,,789,789,789,789,789,789,789,',
',789,,,,,,,789,,,789,789,789,789,789,789,789,789,,789,789,789,,789,789',
',789,789,789,,,,,,,,,,,,,,,,,,,,789,,,789,,,789,789,,,789,,,,,,789,',
',,,,,,789,,,,,789,789,789,789,789,789,,,,789,789,,,,,,,789,,,789,789',
'789,,,789,789,775,775,775,,775,,,,775,775,,,,775,,775,775,775,775,775',
'775,775,,,,,,775,775,775,775,775,775,775,,,775,,,,,,,775,,,775,775,775',
'775,775,775,775,775,,775,775,775,,775,775,,775,775,775,,,,,,,,,,,,,',
',,,,,,775,,,775,,,775,775,,,775,,,,,,775,,,,,,,,775,,,,,775,775,775',
'775,775,775,,,,775,775,,,,,,,775,,,775,775,775,,,775,775,773,773,773',
',773,,,,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773',
'773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773',
'773,773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773',
',,773,,,,,,773,,,,,,,,773,,,,,773,773,773,773,773,773,,,,773,773,,,',
',,,773,,,773,773,773,,,773,773,232,232,232,,232,,,,232,232,,,,232,,232',
'232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,',
',232,,,232,232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232',
'232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232',
',,,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232',
'232,499,499,499,,499,,,,499,499,,,,499,,499,499,499,499,499,499,499',
',,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499',
'499,499,499,499,499,499,499,,499,499,,499,499,499,,,,,,,,,,,,,,,,,,',
',499,,,499,,,499,499,,,499,,499,,499,,499,,,,,,,,499,,,,,499,499,499',
'499,499,499,,,,499,499,,,,,,,499,,499,499,499,499,,,499,499,235,235',
'235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235',
',,,,,,235,,,235,235,235,,,235,235,236,236,236,,236,,,,236,236,,,,236',
',236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236',
',,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236',
'236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,',
',236,,,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236',
',,236,236,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237',
'237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237',
'237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,',
',,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237',
'237,237,,,,237,237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238',
',,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238',
'238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238',
'238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238',
',,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238',
',,238,238,238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239',
'239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239',
',,239,239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239,239',
',,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,',
',239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239',
'240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,',
',240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240',
'240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,',
'240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,,,,,,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241',
'241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241',
'241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,',
'241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,',
',241,241,241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242',
'242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242',
'242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,',
',,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242',
'242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242,242,243',
'243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243',
'243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243',
'243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243',
',,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243',
'243,,,,,,,243,,,243,243,243,,,243,243,244,244,244,,244,,,,244,244,,',
',244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,',
',244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244',
',244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,',
',,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244',
'244,,,244,244,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,',
',,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245,245,246,246,246',
',246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246',
'246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246',
'246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246',
',,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,',
',,,246,,,246,246,246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247',
',,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247',
'247,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249',
'249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249',
'249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,',
'249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,',
',249,249,249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,',
',,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250',
'250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251',
'251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251',
',,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251',
'251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
',252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,',
',,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252',
'252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253',
'253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253',
'253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,',
',,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253',
'253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254',
',254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254',
'254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,',
',,,254,,,254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255',
'255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,',
',255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255',
',,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255',
'255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256',
',,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256',
'256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256',
',,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256',
',,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257',
'257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257',
'257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,',
'257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,',
',257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,',
',,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258',
'258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259',
'259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259',
'259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259',
'259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259',
',,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259',
'259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,',
',260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,',
',260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260',
',260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,',
',,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260',
'260,,,260,260,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267',
'267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267',
'267,267,267,267,267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,',
',,,,,,,,,267,,,267,,,267,267,,,267,,267,,267,,267,,,,,,,,267,,,,,267',
'267,267,267,267,267,,,,267,267,,,,,,,267,,267,267,267,267,,,267,267',
'458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,',
',458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458',
'458,458,,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,',
'458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458',
',,,458,458,,,,,,,458,,,458,458,458,,,458,458,273,273,273,,273,,,,273',
'273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273',
'273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273',
',273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,',
'273,,273,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,',
',,273,,273,273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276',
',276,276,276,276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276',
',,,,,,276,,,276,276,276,276,276,276,276,276,276,276,276,276,,276,276',
',276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276',
',276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276',
',276,276,276,276,,,276,276,457,457,457,,457,,,,457,457,,,,457,,457,457',
'457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457',
',,457,457,457,457,457,457,457,457,,457,457,457,,457,457,,457,457,457',
',,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,',
',457,457,457,457,457,457,,,,457,457,,,,,,,457,,,457,457,457,,,457,457',
'751,751,751,,751,,,,751,751,,,,751,,751,751,751,751,751,751,751,,,,',
',751,751,751,751,751,751,751,,,751,,,,,,,751,,,751,751,751,751,751,751',
'751,751,751,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751',
',,751,,,751,751,,,751,,751,,751,,751,,,,,,,,751,,,,,751,751,751,751',
'751,751,,,,751,751,,,,,,,751,,751,751,751,751,,,751,751,745,745,745',
',745,,,,745,745,,,,745,,745,745,745,745,745,745,745,,,,,,745,745,745',
'745,745,745,745,,,745,,,,,,,745,,,745,745,745,745,745,745,745,745,,745',
'745,745,,745,745,,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745',
',,745,,,,,,745,,,,,,,,745,,,,,745,745,745,745,745,745,,,,745,745,,,',
',,,745,,,745,745,745,,,745,745,283,283,283,,283,,,,283,283,,,,283,,283',
'283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,',
',283,,,283,283,283,283,283,283,283,283,,283,283,283,,283,283,,283,283',
'283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283',
',,,,283,283,283,283,283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283',
'283,285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285',
',,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285',
'285,285,285,,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285',
',,285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285',
',,,285,285,,,,,,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287',
'287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287',
'287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,',
'287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,',
',,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,',
',287,287,287,,,287,287,289,289,289,,289,,,,289,289,,,,289,,289,289,289',
'289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289',
'289,289,289,289,289,289,289,,289,289,289,,289,289,,289,289,289,,,,,',
',,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,,,,,289,,,,,,,,289,,,,,289',
'289,289,289,289,289,,,,289,289,,,,,,,289,,,289,289,289,,,289,289,290',
'290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290',
'290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290',
'290,,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290',
',,290,290,,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290',
'290,,,,,,,290,,,290,290,290,,,290,290,296,296,296,296,296,,,,296,296',
',,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296',
',,296,,,,,,296,296,,296,296,296,296,296,296,296,296,296,,296,296,296',
',296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,',
'296,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296,,,,,,,296',
',,296,296,296,,,296,296,456,456,456,,456,,,,456,456,,,,456,,456,456',
'456,456,456,456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456',
',,456,456,456,456,456,456,456,456,,456,456,456,,456,456,,456,456,456',
',,,,,,,,,,,,,,,,,,,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,',
',456,456,456,456,456,456,,,,456,456,,,,,,,456,,,456,456,456,,,456,456',
'739,739,739,,739,,,,739,739,,,,739,,739,739,739,739,739,739,739,,,,',
',739,739,739,739,739,739,739,,,739,,,,,,,739,,,739,739,739,739,739,739',
'739,739,,739,739,739,,739,739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,',
'739,,,739,739,,,739,,739,,,,739,,,,,,,,739,,,,,739,739,739,739,739,739',
',,,739,739,,,,,,,739,,,739,739,739,,,739,739,719,719,719,,719,,,,719',
'719,,,,719,,719,719,719,719,719,719,719,,,,,,719,719,719,719,719,719',
'719,,,719,,,,,,,719,,,719,719,719,719,719,719,719,719,,719,719,719,',
'719,719,,719,719,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,,719,,',
',,,719,,,,,,,,719,,,,,719,719,719,719,719,719,,,,719,719,,,,,,,719,',
',719,719,719,,,719,719,302,302,302,,302,,,,302,302,,,,302,,302,302,302',
'302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302',
'302,302,302,302,302,302,302,,302,302,302,,302,302,,,,302,,,,,,,,,,,',
',,,,,,,,302,,,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,,302,302,302,302',
'302,302,,,,302,302,,,,302,,,302,,,302,302,302,,,302,302,454,454,454',
',454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,,,454,454,454',
'454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454,454,454,454',
'454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,,454,,,454',
'454,,,454,,454,,454,,454,,,,,,,,454,,,,,454,454,454,454,454,454,,,,454',
'454,,,,,,,454,,454,454,454,454,,,454,454,699,699,699,,699,,,,699,699',
',,,699,,699,699,699,699,699,699,699,,,,,,699,699,699,699,699,699,699',
',,699,,,,,,,699,,,699,699,699,699,699,699,699,699,,699,699,699,,699',
'699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,699,',
',,699,,,,,,,,699,,,,,699,699,699,699,699,699,,,,699,699,,,,,,,699,,',
'699,699,699,,,699,699,694,694,694,,694,,,,694,694,,,,694,,694,694,694',
'694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,,,694,,,694',
'694,694,694,694,694,694,694,,694,694,694,,694,694,,,,694,,,,,,,,,,,',
',,,,,,,,694,,,694,,,694,694,,,694,,,,,,,,,,,,,,,,,,,694,694,694,694',
'694,694,,,,694,694,,,,,,,694,,,694,694,694,,,694,694,683,683,683,,683',
',,,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683,683',
'683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683,683',
'683,,683,683,,,,683,,,,,,921,,921,921,921,921,921,,,,,,,,683,,921,683',
',,683,683,,,683,,,,,,,,,,,,,,921,,,,,683,683,683,683,683,683,921,921',
',683,683,,,,,,,683,,,683,683,683,437,,683,683,,,,437,437,437,,,437,437',
'437,,437,921,,,,,,,,437,437,437,437,,,,,,,,437,437,,437,437,437,437',
'437,,,,,,,,,,,,,,,,,,,,,,,,437,437,437,437,437,437,437,437,437,437,437',
'437,437,437,,,437,437,437,,,437,,,437,,,437,437,,437,,437,,437,,437',
'437,437,437,437,437,437,,437,437,437,,,,,,,,,,,,,437,437,437,437,59',
'437,,437,,,,59,59,59,,,59,59,59,919,59,919,919,919,919,919,,,,,59,59',
'59,,,919,,,,,59,59,,59,59,59,59,59,,,,,,,,,,919,,,,,,,,,919,919,919',
'919,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59',
',,59,59,,59,919,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59',
'59,59,59,438,59,,59,,,,438,438,438,,,438,438,438,759,438,759,759,759',
'759,759,,,,438,438,438,438,,,759,,,,,438,438,,438,438,438,438,438,,',
',,,,,,,759,,,,,,,,,759,759,759,759,,438,438,438,438,438,438,438,438',
'438,438,438,438,438,438,,,438,438,438,,,438,,,438,,,438,438,,438,759',
'438,,438,,438,438,438,438,438,438,438,,438,438,438,,,,,,,,,,,,,438,438',
'438,438,,438,,438,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74',
'74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74',
'74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74',
'74,,,74,,,,,,,,,,,,,,,,,,,,74,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,',
',,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12',
'12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
',,,407,407,407,407,407,407,407,407,407,407,,,,,,407,407,407,407,407',
'407,407,407,407,,,407,,,,,,,,,407,407,,407,407,407,407,407,407,407,',
',407,407,,,,407,407,407,407,,,,,,,,,,,,,,407,407,,407,407,407,407,407',
'407,407,407,407,407,407,,,407,407,,,,,,,,,,407,,,,,,,,,407,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11',
'11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,',
',,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,',
',,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,',
',,11,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,,,,633,633,633,633,633,633,633,633,633',
'633,,,,,,633,633,633,633,633,633,633,633,633,,,633,,,,,,,,,633,633,',
'633,633,633,633,633,633,633,,,633,633,,,,633,633,633,633,,,,,,,,,,,',
',,633,633,,633,633,633,633,633,633,633,633,633,633,633,,,633,633,,,',
',,,,,,633,,,,,,,,,633,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91',
'91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91',
',,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91',
'91,91,,,91,,,,,,,,,,,,,,,,,,,,91,761,761,761,761,761,761,761,761,761',
'761,761,761,761,761,761,761,761,761,761,761,761,761,761,761,,,,761,761',
'761,761,761,761,761,761,761,761,,,,,,761,761,761,761,761,761,761,761',
'761,,,761,,,,,,,,,761,761,,761,761,761,761,761,761,761,,,761,761,,,',
'761,761,761,761,,,,,,,,,,,,,,761,761,,761,761,761,761,761,761,761,761',
'761,761,761,31,,761,,,,,31,31,31,,,31,31,31,550,31,550,550,550,550,550',
'761,,,,31,31,,,,550,,,,,31,31,,31,31,31,31,31,,,,,,,,,,550,,,,,,,,,550',
'550,550,550,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,',
'31,,31,31,,,31,31,,31,550,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,',
',,,,,,486,31,31,,31,,31,486,486,486,,,486,486,486,1048,486,1048,1048',
'1048,1048,1048,,,,486,486,,,,,1048,,,,,486,486,,486,486,486,486,486',
',,896,,896,896,896,896,896,1048,,,,,,,,,896,,1048,1048,,428,,,,,,,428',
'428,428,,486,428,428,428,,428,896,486,,,,,486,486,428,428,428,896,896',
',1048,,,,,428,428,,428,428,428,428,428,,486,486,,,,,,,,,,,,,486,,,896',
',486,,,428,428,428,428,428,428,428,428,428,428,428,428,428,428,,,428',
'428,428,,,428,,428,428,,,428,428,,428,,428,,428,,428,428,428,428,428',
'428,428,,428,428,428,,,,,,,,,,,,30,428,428,,428,,428,30,30,30,,,30,30',
'30,894,30,894,894,894,894,894,,,,30,30,30,,,,894,,,,,30,30,,30,30,30',
'30,30,,,,,,,,,,894,,,,,,,,,894,894,894,894,,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,894,30,,30,,30',
'30,30,30,30,30,30,,30,30,30,,,,,,749,749,,,749,,,30,30,,30,,30,749,749',
',749,749,749,749,749,749,749,,,749,749,,,,749,749,749,749,,,,,,749,',
',,,,,,749,749,,749,749,749,749,749,749,749,749,749,749,749,,,749,,,',
',750,750,,,750,,,,,,,,,750,750,749,750,750,750,750,750,750,750,,,750',
'750,,,,750,750,750,750,,,,,,750,,,,,,,,750,750,,750,750,750,750,750',
'750,750,750,750,750,750,,,750,,,,,531,531,,,531,,,,,,,,,531,531,750',
'531,531,531,531,531,531,531,,,531,531,,,,531,531,531,531,,,,,,531,,',
',,,,,531,531,,531,531,531,531,531,531,531,531,531,531,531,,,531,,,,',
'532,532,,,532,,,,,,,,,532,532,531,532,532,532,532,532,532,532,,,532',
'532,,,,532,532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532',
'532,532,532,532,532,532,,,532,,,,,522,522,,,522,,,,,,,,,522,522,532',
'522,522,522,522,522,522,522,,,522,522,,,,522,522,522,522,,,,,,522,,',
',,,,,522,522,,522,522,522,522,522,522,522,522,522,522,522,,,522,,,,',
'263,263,,,263,,,,,,,,,263,263,522,263,263,263,263,263,263,263,,,263',
'263,,,,263,263,263,263,,,,,,,,,,,,,,263,263,,263,263,263,263,263,263',
'263,263,263,263,263,,,263,,,,,521,521,,,521,,,,,,,,,521,521,263,521',
'521,521,521,521,521,521,,,521,521,,,,521,521,521,521,,,,,,521,,,,,,',
',521,521,,521,521,521,521,521,521,521,521,521,521,521,,,521,,,,,965',
'965,,,965,,,,,,,,,965,965,521,965,965,965,965,965,965,965,,,965,965',
',,,965,965,965,965,,,,,,965,,,,,,,,965,965,,965,965,965,965,965,965',
'965,965,965,965,965,,664,965,664,664,664,664,664,,,,,,,,,,664,,,,,965',
',,,,,,,,925,,925,925,925,925,925,,664,453,453,,,453,,,925,664,664,664',
'664,,453,453,,453,453,453,453,453,453,453,,,453,453,,,925,453,453,453',
'453,,,664,,,453,925,925,,,664,,,453,453,,453,453,453,453,453,453,453',
'453,453,453,453,,891,453,891,891,891,891,891,,,,,,925,,,,891,,,,,453',
',,,,,,,,,,,,,,,,891,213,213,,,213,,,,891,891,891,891,,213,213,,213,213',
'213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,,,,891,,',
'213,213,,213,213,213,213,213,213,213,213,213,213,213,,948,213,948,948',
'948,948,948,715,,715,715,715,715,715,,,948,,,,,213,,715,,,,,1000,,1000',
'1000,1000,1000,1000,,,,948,948,,,,,1000,715,,948,948,948,948,,,,715',
'715,715,715,,,,,,,,,1000,,,,,,,,,214,214,1000,1000,214,,,,948,,,,,214',
'214,715,214,214,214,214,214,214,214,,,214,214,,,,214,214,214,214,,,1000',
',,214,,,,,,,,214,214,,214,214,214,214,214,214,214,214,214,214,214,,713',
'214,713,713,713,713,713,,,,,,,,,,713,,,,,214,,,,1002,,1002,1002,1002',
'1002,1002,,,,,,,713,452,452,1002,,452,,,,713,713,713,713,,452,452,,452',
'452,452,452,452,452,452,,1002,452,452,,,,452,452,452,452,,1002,1002',
',,452,,,,,713,,,452,452,,452,452,452,452,452,452,452,452,452,452,452',
',998,452,998,998,998,998,998,1002,,,,,,,,,998,,,,339,452,339,339,339',
'339,339,1004,,1004,1004,1004,1004,1004,,,339,,998,,,,,1004,,,,998,998',
'998,998,,,,,,,,339,339,,,,,,1004,,339,339,339,339,,,,1014,1014,1004',
'1004,1014,,,,,998,,,,1014,1014,,1014,1014,1014,1014,1014,1014,1014,',
',1014,1014,,,339,1014,1014,1014,1014,,,1004,,,1014,,,,,,,,1014,1014',
',1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,,,1014,,,,,1015',
'1015,,,1015,,,,,,,,,1015,1015,1014,1015,1015,1015,1015,1015,1015,1015',
',,1015,1015,,,,1015,1015,1015,1015,,,,,,1015,,,,,,,,1015,1015,,1015',
'1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,,605,1015,605,605',
'605,605,605,,,,,,,,,,605,,,,,1015,,,,,,,,,,,,,,,,,605,605,592,592,,',
'592,,,605,605,605,605,,,592,592,,592,592,592,592,592,592,592,,,592,592',
',,,592,592,592,592,,,,,,592,,,,605,,,,592,592,,592,592,592,592,592,592',
'592,592,592,592,592,,,592,,,,,593,593,,,593,,,,,,,,,593,593,592,593',
'593,593,593,593,593,593,,,593,593,,,,593,593,593,593,,,,,,593,,,,,,',
',593,593,,593,593,593,593,593,593,593,593,593,593,593,,1017,593,1017',
'1017,1017,1017,1017,717,,717,717,717,717,717,,,1017,,,,,593,,717,,,',
',,,,,,,,,,,1017,,,,,,,717,,,,1017,1017,,,,,,717,717,,,,,,,,,,,,,,,,',
',,,,,,,,,1017,,,,,,,717' ]
        racc_action_check = arr = ::Array.new(26528, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   843,  1767,  1033,   nil,   569,   nil,   nil, 12429,  1470,
   nil, 24138, 23872,  1239,   nil,  1160,  1198,  1347,   377,  1123,
   350,   nil,   -88,  9069,  1767,  1166,   nil,   613,   nil,   149,
 24966, 24649,  9629,  9769,  9909,   nil,  1908, 10189, 10329,   nil,
  1059,   207,   131,  1102,   -44, 11029,  5009, 11169,  1026,  1065,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23477,
   nil,   -76, 11449,   nil,     2,   nil, 11589, 11729,   nil,   nil,
 11869, 12009,  1020,   nil, 23739,   nil,   nil,   nil,   nil,   nil,
   -96,   nil,   nil,   nil,   nil,   nil,   nil,   972,   971,   969,
   960, 24404,   nil,   nil,   nil,   nil,   nil,   nil,   646,   nil,
   nil,   514,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 12569,   nil,   nil,   nil,   nil, 12709,
 12849, 12989, 13129, 13269,   932,   nil,   -24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   887,   nil,  3036,
 13969, 14109, 14249, 25712, 25849,   nil, 14669, 14809, 14949, 15089,
 15229, 15369,   nil,   nil,  1134,   128,   227,   906,   -43,   815,
   870,   nil, 16489,  3318,   858, 16769, 16909, 17049, 17189, 17329,
 17469, 17609, 17749, 17889, 18029, 18169, 18309, 18449, 18589, 18729,
 18869, 19009, 19149, 19289, 19429, 19569, 19709, 19849, 19989, 20129,
 20269,   nil,   nil, 25374,   nil,   nil,   850, 20409,   nil,   855,
   nil,   nil,   nil, 20689,   nil,   nil, 20829,   nil,  1203,   nil,
   806,   805,   nil, 21389,   845, 21529,   nil, 21669,   nil, 21809,
 21949,   nil,   nil,   571,   nil,   535, 22089,   786,  3882,   793,
   812,   772, 22649,  4164,  1275,  1098,  1247,   825,  1206,   nil,
   777,   732,   -14,   nil,   nil,   nil,   750,   159,   675,  5709,
   nil,   126,   727,  1239,   nil,   709,   nil,  6409,  4446,   nil,
  6549,   677,   nil,   172,   159,   651,  7249,   nil,   nil, 26032,
   642,    19,    -7,  7669,  7809,   238,   711,   581,    28,    41,
   852,   653,    57,   682,   nil,   nil,  8369,   nil,  8509,   393,
   390,   566,   546,   439,   571,   495,   591,   518,   nil,   335,
   nil,   nil,   nil,   nil,   nil,   380,   nil,   314,   nil,   245,
   nil,   340,   437,   nil,   293,   445,   nil,   291,   120,   nil,
   179,   112,   nil,   414,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4869, 24005,   nil,   nil,
   nil,   nil,   171,   nil,   nil,   136,  8789,   120,   nil,   nil,
   921,  1231,   nil,   nil,  1227,  1223,   355,   305, 24841,   nil,
   nil,   nil,   125,     0,   116,   nil,   nil, 23347, 23607,   nil,
  1344,   nil,   110,   nil,   nil,   780,   nil,   nil,   nil,   nil,
    53,   nil, 25950, 25611, 22789,   229, 22229, 20969, 20549,  4869,
  5009,   689,   807,   275,   285,   298,   321,  5289,  5149,  3342,
  4728,  3882,  4023,  3741,  3318,  4305,  3459,  4587,  4446,  4164,
   466,   340,  3600,  3177,  1485,   113, 24774,   nil,   nil,   nil,
   nil,   nil,   nil,   -53,   108,   275,   277,   nil,   nil, 16629,
   nil,   nil, 14389,   nil, 13829,   nil,   125,   nil,   nil,   nil,
   nil, 13689,  1203,   301,   302,   nil,   nil,   312, 13549,   346,
 13409, 25442, 25306,   454,   390,   nil, 12149,   353,   nil, 11309,
 10609, 25170, 25238,  2895, 10469,   489,   520,   204,   nil,   nil,
 10049,   nil,   nil,  9489,   nil,   418,   nil,   271,   455,    74,
 24613,   nil,   417,   435,   nil,   466,   475,   477,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   467,   650,   nil,   nil,
  8929,   nil,   nil,   nil,   563,   nil,   nil,   nil,   587,   nil,
   nil,   597,  4728,   638,   nil,  4587,    29,    28,   636,   672,
   nil,  8229, 26256, 26324,    42,   nil,   290,   321,    -6,   nil,
   590,   nil,     9,  8089,   nil, 26216,   nil,  7949,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   151,
   nil,   nil,   182,   nil,   nil,   nil,   602,   nil,   nil,   605,
   nil,   623,   nil, 24271,   nil,   609,  7529,  7389,    94,   647,
  7109,  6969,  6829,  6689,   673,   nil,   nil,   nil,  6269,  6129,
   683,   nil,  5989,  5849,   nil,    41,   -81,   250,   382,   680,
  1062,   679,   nil,   nil, 25572,   nil,   nil,   781,    63,   -56,
   nil,   nil,   nil,   nil,   697,   nil,   748,  5569,   nil,   nil,
  5429,  1344,  -117, 23209,   733,   nil,   739,   154,   153,   780,
   422,   921,   781,   746, 23069,  1626,   825,    10,   879, 22929,
   nil,   768,  -105,   nil,   nil,   nil,  4305,  4023,   776,   239,
   nil,   nil,   462, 25911,   nil, 25781,   nil, 26393,   nil, 22509,
   nil,   707,   nil,   779,   256,   787,   nil,   nil,   nil,   nil,
   505,   nil,   900,   nil,   nil,   nil,   nil,   909,   nil, 22369,
   802,    62,    24,    58,    40, 21249,   nil,  1106,   nil, 25034,
 25102, 21109,   nil,   nil,   nil,   368,   153,  3741,  3600, 23571,
   286, 24537,    56,   763,  3459,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   820, 16349,  3036, 16209,   nil,   831,   nil,  2754,
   nil,  2613,   nil,   nil,  2331,   nil,  2190,   nil,  1908, 16069,
 15929, 15789, 15649,   127, 15509,   833,   834,   nil,   838,   848,
   852,   nil,   875,   877,   877,   869, 14529,   nil,   nil,  3177,
   nil,   nil,   nil,  2895,  2754,   nil,   nil,   nil,   892,   467,
   nil,   nil,  1026,   nil,  2613,   918,   961,   nil,   nil,   nil,
   nil,   939,  1045,   929,   931,   nil,   nil,   nil,   940,   941,
   nil,   945,   946,   nil,   947,   nil,   nil,   960,   582,   959,
   639,   nil,  1080,   nil, 12289,  1089,   780,  2472,   nil,    -8,
    27,    32,   522,  1344,   nil,   982,  2331,  5289,   nil,   418,
  1109,  1113,   999,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1031,  1020,   nil,  2049,  5149, 10889,  2472,   304,   nil,
   nil, 25673,   nil,   nil, 24930,   nil, 24769,   nil,   nil,  1044,
   712, 10749,   783,  1107,  1165,  2190,  1062,  1176,   nil,  2049,
   nil,   nil,    11,  9349,   nil,   nil,   nil,   nil,   nil, 23441,
   nil, 23230,   nil,   610,   nil, 25602,   nil,   nil,   nil,   nil,
   375,  3253,  1061,   nil,    -9,   nil,  1186,  1187,  9209,  1626,
   nil,   nil,  1192,   217,   nil,   nil,   nil,   nil, 25774,   nil,
  1081,   nil,   nil,  1082,  1086,  1087,  1088,   nil,  1098,   nil,
    47,   nil,   nil,   nil,   693, 25510,   nil,   nil,  1116,   nil,
   nil,   nil,  1485,   924,   957,   965,  1175,  1062,   nil,  1102,
  1110,  1111,  1120,  1130,  3163,  1134,  3304,  1344,   nil,   nil,
   nil,   211,  1203,   nil,   nil,  1062,   921,   nil, 26012,   nil,
 25802,   nil, 25936,   nil, 26039,   nil,   nil,   nil,   575,  1200,
  1204,   nil,  1291,  8649, 26086, 26154,   993, 26386,   nil,   nil,
   nil,   nil,     6,  1186,   318,   nil,   nil,   nil,  1307,  1317,
  1320,  1202,  1205,  1207,  1208,   nil,   nil,  1216,    18,   -11,
    20,  1203,   580,   690,   nil,   nil,   nil,   nil, 24738,   nil,
   nil,   nil,   nil,    21,   nil,   975,   nil ]

racc_action_default = [
    -1,  -627,  -626,  -627,    -2,  -613,    -4,    -5,  -627,    -8,
    -9,  -627,  -627,  -627,   -29,  -627,  -627,  -627,  -280,  -627,
   -40,   -43,  -615,  -627,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -626,   -73,   -81,   -83,
  -627,  -516,  -517,  -627,  -627,  -627,  -627,  -627,  -615,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -602,
  -282,  -285,  -626,  -292,  -302,  -405,  -627,  -627,  -307,  -310,
  -613,  -627,  -318,  -325,  -627,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -626,  -455,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -492,  -498,  -500,  -501,  -502,  -503,  -600,  -505,
  -506,  -601,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1057,    -3,  -614,  -622,  -623,  -624,    -7,  -627,
  -627,  -627,  -627,  -627,  -627,   -17,  -627,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -626,
  -627,  -627,  -626,  -627,  -627,  -612,  -627,  -627,  -627,  -627,
  -627,  -615,  -616,   -47,  -627,  -516,  -517,  -627,  -280,  -627,
  -627,  -230,  -627,  -626,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -411,  -414,  -627,  -610,  -611,   -58,  -627,  -301,  -627,
  -428,  -431,   -64,  -626,  -425,   -65,  -615,   -66,  -239,  -252,
  -626,  -626,  -256,  -627,  -262,  -627,  -626,  -492,  -593,  -627,
  -627,   -67,   -68,  -613,   -13,   -14,  -627,   -71,  -626,  -615,
  -627,   -74,   -77,  -626,   -89,   -90,  -627,  -627,   -97,  -294,
  -297,  -615,  -418,  -333,  -334,  -337,  -426,  -627,   -79,  -627,
   -85,  -290,  -499,  -627,  -215,  -216,  -231,  -627,  -626,  -284,
  -627,  -627,  -240,  -619,  -619,  -627,  -626,  -303,  -304,  -548,
   -49,  -627,  -627,  -627,  -627,  -613,  -627,  -614,  -516,  -517,
  -627,  -627,  -280,  -627,  -358,  -359,  -627,  -321,  -627,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -328,  -627,
  -516,  -517,  -588,  -589,  -453,  -627,  -476,  -627,  -478,  -627,
  -480,  -627,  -627,  -460,  -627,  -627,  -466,  -627,  -627,  -472,
  -627,  -627,  -474,  -627,  -491,  -493,  -494,  -495,  -496,    -6,
  -625,   -23,   -24,   -25,   -26,   -27,  -626,  -627,   -19,   -20,
   -21,  -122,  -627,   -30,   -39,  -267,  -627,  -627,  -266,   -31,
  -197,  -615,  -247,  -248,  -626,  -626,  -603,  -604,  -257,  -423,
  -605,  -606,  -604,  -603,  -257,  -422,  -424,  -605,  -606,   -37,
  -205,   -38,  -627,   -41,   -42,  -195,  -262,   -44,   -45,   -46,
  -615,  -300,  -627,  -627,  -626,  -290,  -627,  -627,  -627,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -232,  -233,  -234,  -235,  -615,  -626,  -257,  -603,  -604,   -54,
   -59,  -258,  -419,  -626,  -626,  -615,  -615,  -296,  -253,  -627,
  -261,  -254,  -627,  -259,  -627,  -263,  -627,  -598,  -596,  -599,
   -12,  -614,   -16,  -615,   -70,  -288,   -86,   -75,  -627,  -615,
  -626,  -627,  -627,   -96,  -627,  -499,  -627,   -82,   -87,  -627,
  -627,  -627,  -627,  -236,  -627,  -439,  -627,  -286,  -617,  -241,
  -621,  -620,  -243,  -621,  -291,  -627,  -591,  -619,  -627,  -627,
  -548,  -408,  -587,  -587,  -531,  -533,  -533,  -533,  -547,  -549,
  -550,  -551,  -552,  -553,  -554,  -555,  -556,  -627,  -558,  -560,
  -562,  -567,  -569,  -570,  -572,  -577,  -579,  -580,  -582,  -583,
  -584,  -627,  -626,  -349,  -350,  -626,  -627,  -627,  -627,  -627,
  -434,  -626,  -627,  -627,  -290,  -315,  -107,  -108,  -627,  -110,
  -627,  -280,  -627,  -627,  -326,  -548,  -330,  -627,  -454,  -477,
  -482,  -483,  -485,  -456,  -479,  -457,  -481,  -458,  -459,  -627,
  -462,  -464,  -627,  -465,  -468,  -469,  -627,  -470,  -471,  -627,
  -497,  -627,   -18,  -627,   -28,  -270,  -627,  -627,  -427,  -627,
  -249,  -251,  -627,  -627,   -60,  -245,  -246,  -420,  -627,  -627,
   -62,  -421,  -627,  -627,  -299,  -603,  -604,  -603,  -604,  -615,
  -195,  -627,  -394,  -395,  -615,  -397,  -412,   -53,  -415,  -626,
  -429,  -432,  -244,  -295,  -626,  -260,  -264,  -627,  -594,  -595,
  -627,   -15,   -72,  -627,   -78,   -84,  -615,  -603,  -604,  -626,
   -93,   -95,  -627,   -80,  -627,  -204,  -214,  -615,  -626,  -626,
  -283,  -615,  -619,  -293,  -592,  -406,  -626,  -626,  -615,  -627,
  -529,  -530,  -627,  -627,  -540,  -627,  -543,  -627,  -545,  -627,
  -360,  -627,  -362,  -364,  -371,  -615,  -561,  -571,  -581,  -585,
  -626,  -351,  -626,  -308,  -352,  -353,  -311,  -627,  -314,  -627,
  -615,  -603,  -604,  -607,  -289,  -627,  -107,  -108,  -109,  -627,
  -627,  -626,  -319,  -522,  -523,  -627,  -322,  -626,  -626,  -548,
  -627,  -627,  -615,  -627,  -626,  -461,  -463,  -467,  -473,  -475,
   -10,  -123,  -268,  -627,  -198,  -627,  -618,  -626,   -33,  -200,
   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -627,
  -627,  -627,  -627,  -427,  -627,  -587,  -587,  -376,  -626,  -626,
  -626,  -393,  -627,  -615,  -399,  -556,  -564,  -565,  -575,  -626,
  -417,  -416,   -55,  -626,  -626,  -255,  -265,  -597,   -76,   -91,
   -88,  -298,  -626,  -356,  -626,  -440,  -626,  -441,  -442,  -287,
  -242,  -627,  -627,  -615,  -587,  -568,  -586,  -532,  -533,  -533,
  -559,  -533,  -533,  -578,  -533,  -556,  -573,  -615,  -627,  -369,
  -627,  -557,  -627,  -354,  -627,  -627,  -626,  -626,  -313,  -627,
  -427,  -627,  -107,  -108,  -111,  -615,  -626,  -627,  -525,  -627,
  -627,  -627,  -615,  -527,  -331,  -590,  -484,  -487,  -488,  -489,
  -490,  -627,  -269,   -32,  -199,  -250,  -627,  -237,  -627,  -374,
  -375,  -384,  -378,  -386,  -627,  -389,  -627,  -391,  -396,  -627,
  -627,  -627,  -563,  -627,  -627,  -626,  -627,  -627,   -11,  -626,
  -446,  -357,  -627,  -627,  -444,  -409,  -410,  -407,  -528,  -627,
  -536,  -627,  -538,  -627,  -541,  -627,  -544,  -546,  -361,  -363,
  -367,  -627,  -372,  -305,  -627,  -306,  -627,  -627,  -627,  -626,
  -316,  -427,  -627,  -627,  -323,  -327,  -329,  -526,  -548,  -486,
  -587,  -566,  -377,  -626,  -626,  -626,  -626,  -576,  -626,  -398,
  -615,  -401,  -403,  -404,  -574,  -627,  -290,  -413,  -627,  -430,
  -433,  -445,  -626,   -98,   -99,  -627,  -627,  -106,  -443,  -533,
  -533,  -533,  -533,  -365,  -627,  -370,  -627,  -626,  -309,  -312,
  -264,  -626,  -626,  -320,  -524,  -626,  -626,  -373,  -627,  -381,
  -627,  -383,  -627,  -387,  -627,  -390,  -392,  -400,  -627,  -289,
  -607,   -56,  -439,  -626,  -627,  -627,  -105,  -627,  -534,  -537,
  -539,  -542,  -627,  -368,  -626,  -435,  -436,  -437,  -627,  -627,
  -627,  -626,  -626,  -626,  -626,  -402,  -438,  -615,  -603,  -604,
  -607,  -104,  -533,  -366,  -355,  -317,  -324,  -332,  -627,  -379,
  -382,  -385,  -388,  -427,  -535,  -626,  -380 ]

clist = [
'6,301,220,428,434,279,279,279,368,421,213,223,280,280,280,589,130,130',
'337,262,135,135,698,678,536,395,117,4,327,133,133,582,585,125,208,501',
'638,558,9,418,444,551,333,758,9,263,441,675,341,342,675,274,345,486',
'113,322,490,266,272,275,332,539,542,852,678,281,281,281,114,799,495',
'299,822,932,725,318,840,733,736,130,800,376,843,378,380,383,386,389',
'392,378,748,117,277,291,292,334,130,297,315,315,929,401,402,403,404',
'527,855,963,961,714,716,718,375,992,802,118,329,710,711,346,957,377',
'619,356,602,622,604,393,614,839,616,841,315,620,566,866,620,603,666',
'869,995,358,757,605,614,761,670,671,948,633,9,801,905,803,985,669,960',
'549,833,405,705,339,678,407,414,485,809,493,813,494,814,1025,739,826',
'912,374,379,382,1,501,385,388,391,876,763,279,764,394,675,675,417,867',
'355,207,838,908,124,417,413,419,835,951,607,338,439,443,2,1023,545,372',
'422,353,752,668,335,963,1035,452,369,438,328,399,330,701,957,336,343',
'856,847,17,344,857,745,,429,17,,,929,,279,864,428,434,,1043,279,280',
'558,279,224,659,708,899,840,,280,737,,224,224,224,,17,306,306,,,,,,422',
',,793,704,451,300,500,500,,,,528,376,,843,,840,,492,524,,224,224,,953',
'224,350,521,281,819,,558,684,,,954,,281,955,689,693,,117,506,531,686',
',,,689,812,,,586,587,491,525,,,497,512,513,546,979,496,274,519,517,',
'17,510,592,,566,224,224,224,224,17,,940,,514,860,511,1044,,297,889,890',
',315,297,1026,117,840,,547,766,,,766,,16,,,,,315,16,689,,,,996,606,740',
',,,920,922,588,924,926,,927,918,566,639,,,6,,678,,,16,,,130,,1031,,135',
'315,,315,,,500,500,,133,645,279,815,632,830,631,,675,782,,17,224,224',
'224,787,,9,224,224,224,224,224,224,646,412,,422,870,871,651,644,558',
'438,805,17,872,650,,661,,,,,818,,,,429,300,444,,,,,941,,528,662,645',
',,16,,,528,662,662,279,224,,16,,,1036,224,,,224,,654,,646,566,,566,',
',,667,997,,,422,,,,,17,,17,,438,827,306,17,815,674,1018,1019,1020,1021',
'438,,300,689,,429,,300,,306,681,865,939,672,673,429,,566,17,,224,796',
',,,942,,279,,,,682,,224,224,,702,685,,,,,315,,,16,600,,600,,315,,422',
',,,,,,1054,,438,,,,972,834,,,16,734,734,,,,,429,,,,,,,,,811,753,987',
',,,,797,778,780,,17,,,783,785,130,639,443,,135,,804,720,558,528,,,,133',
'1053,340,340,771,,340,820,,1027,810,,,,,639,662,,16,,16,500,777,836',
',16,836,,417,,224,,,,,805,645,804,805,,1029,1030,,,874,823,828,,,,16',
',,,,340,340,340,340,646,,,651,566,,,,,859,639,,,,279,,,861,823,,823',
',,,,,,,17,,,,,566,315,306,,224,,422,,,821,306,438,315,829,,,,,224,,883',
',,130,,806,,,429,,,,500,868,,,16,851,873,950,804,,796,,,796,798,796',
',,805,,,892,892,892,720,,,849,,689,447,448,449,450,17,1037,,17,,,,,875',
'224,,910,,,730,914,,732,,,,224,,,,224,,934,,,,842,,844,,,639,,,,943',
',,,836,,,797,,,797,,797,,,,,,315,,224,224,,,,,224,224,,,224,,,734,,16',
',,,917,,944,,796,,796,,796,,796,,,,928,,,,,,,,306,,,,,,,537,,,,306,',
',,,720,947,720,,340,340,,17,17,,,,,,1007,,796,,,,,831,832,,,892,892',
'892,892,16,892,,16,,,,315,797,994,797,,797,1014,797,438,,224,,315,,',
',224,,,,,,17,17,279,,,823,,17,806,29,,806,,,806,29,806,,224,,,881,,',
'983,720,,422,,797,29,,,639,,956,438,958,823,29,29,29,,29,,892,892,892',
'892,902,,429,17,,,,17,17,,,980,,981,,982,,904,17,,892,906,907,,29,29',
',,29,720,,720,911,,,,,,,,,,,,,,16,16,224,,17,17,,,,,893,895,897,,17',
'224,,,936,937,,720,,806,,806,29,806,,806,,29,29,29,29,29,,,,,,41,697',
',1032,,1033,41,1034,964,,16,16,17,,,,17,16,,,975,,1042,,,,968,,,,971',
',806,,41,304,304,,,,,,,,,,17,,,,,,,1055,,,,,,,991,,16,,,,16,16,,348',
'756,,370,,762,,,16,,17,29,29,29,29,,,,29,29,29,29,29,29,1012,17,,,,',
'17,,,17,17,29,,,,1024,16,16,,41,1028,,,,,,16,224,41,,,999,1001,1003',
'1005,,1006,,,,,,,,,29,,,,,,29,,,29,,,,,,,,,,,16,,,,16,,19,,,29,,29,19',
',,,29,,,,,,,,,,,,,,,,,,16,,,,,,19,29,,29,1049,1050,1051,1052,,41,,,',
',340,,29,29,,,,,,,,,,16,1056,,,,,41,,354,,,42,,,,16,,42,,,16,,,16,16',
',,,,,,,,,,,,,,,,,,,,42,305,305,,,,19,29,,,,,,,,19,,,,,,,,,41,,41,,,',
'304,41,,,,349,,,371,,,,,,,,,304,,,,340,,,,29,41,,,,,,,,340,,,,,,,,,',
',,,,42,,,,,,370,,370,42,,,,,,,,,,,,,,19,,,,,,,,442,,,29,,,,,,,,,29,',
',,19,,,,,,,,,41,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,',
'29,,,29,,19,,19,,29,,,19,,42,,,,,,,29,,,,29,,,,,,,,,,,,19,,,,,,,,,,',
',,,,,,,,41,,,,29,29,,304,,,29,29,,,29,304,,,,,,42,,42,,,18,305,42,,',
',18,,,,,,,,,,,,305,,,,,,,,,42,,,,,,19,18,308,308,,,,,,29,29,,41,,,41',
',,,,,,371,,371,,,,,,,,,,,,352,,,,,,,,,,,,29,,,,,,29,,,,,,29,29,,,,,',
'29,,,,,42,,,,,,29,18,,,,,,,,,18,,,,,,,,,,,,,,,,,19,,,,,,,29,304,,,29',
'29,,,,,,,304,,,29,,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,29,,29,29,,,,,,,',
',29,29,,,,18,,19,42,,19,,,,,305,,,41,41,,,,305,,41,,,,18,,,,,,,,,,29',
',,,29,,,,,,,,,,,,,,,,,,,,,,,,370,,,41,,,29,41,41,,442,,42,,,42,,,41',
',,,,,,18,,18,,,,308,18,,,,,,,29,,,,,,,,,308,,41,41,,,29,,,18,,29,41',
',29,29,19,19,,,,,,,,,,,,,,,29,,,,,601,,601,,,,,,,,370,,,,41,,,,41,,',
',973,,,,,,305,,19,19,,,,,,19,,305,,,,,,,,,41,,18,42,42,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,41,19,,,,19,19,,,,,,,,,41,19,,,,41,42,42,41,41,,,,42',
',,,,,,,,,,,,,,,,,,,19,19,,,,,,,,,19,,,,,,,,,,,,371,,,42,18,,,42,42,',
',308,,,,,,,42,308,,,,,,,,19,,,,19,,,,978,,,,,,,,,,,,,415,,42,42,,,,446',
',,,231,42,19,,,,,,,278,278,278,,,,,18,,,18,,,324,325,326,,,,,,,,,,,19',
'371,,,278,42,,,,42,,,,974,,19,,,,,19,,,19,19,,,503,,505,,507,,508,509',
',,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,548,,308,,,,,42,,,',
',42,308,,42,42,,,,,,,,,18,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,278,420,278,,18,18,440,445,635,,880,18,,,,,,,,,,,231,,,459,460',
'461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477',
'478,479,480,481,482,483,484,,,601,,,18,278,,,18,18,,278,,,278,,,,,18',
',278,,278,,278,,278,278,,,,,,,,,,,676,,,548,,679,,,,,,,18,18,,,,,,,',
',18,,,,533,,,,,,,,,278,,,,,,676,,,548,,,,,,,,,,,,,601,,,,18,,,,18,,',
',977,,726,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,',
',,,18,,,,,,,,,772,,,,676,548,18,,,,,18,,,18,18,278,,440,660,420,,,,',
',,,,,,,,,,,,,,,,816,,,817,,,,,,,,,,,,,,,,,278,,825,278,,278,,,,,,,,',
',,,,,,,278,846,,,,,,,,695,696,,,,,,,,,,278,446,,278,,,,,,,,,,,,,,,,',
',,,,,,,,,,278,,,,,882,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,278,774,,,278,278,779,781,,,,,784,786,,,660,788,,,',
',,,,,,,,,,,,,,,,,,,,278,,,278,,,,,,,548,,,,,,,,,,,,278,,,,,,,,,,,,,',
',,,,,,278,,,,,,,,,,,,,,,,,,,,278,990,,,,,,,,,,,278,,,,,,,,,,,,,,,,,',
',,,,278,,884,,,,,,,,,,,,,,779,781,786,784,,887,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',278,884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,278' ]
        racc_goto_table = arr = ::Array.new(3210, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,53,34,40,40,36,36,36,60,25,27,22,71,71,71,95,61,61,89,155,65,65,13',
'200,10,60,98,2,34,64,64,92,92,17,17,76,26,185,9,30,20,154,71,99,9,39',
'30,77,19,19,77,74,19,40,5,67,42,41,41,41,6,72,72,93,200,73,73,73,8,144',
'25,50,14,135,134,54,190,94,94,61,145,6,195,6,6,6,6,6,6,6,58,98,48,48',
'48,73,61,49,68,68,132,19,19,19,19,55,14,150,149,187,187,187,171,110',
'147,7,51,139,139,5,196,172,175,111,59,175,59,172,176,145,176,145,68',
'176,189,112,176,113,43,114,115,116,117,118,176,119,43,43,120,66,9,136',
'46,142,135,45,148,151,147,9,152,153,200,33,31,156,157,160,161,162,163',
'164,165,166,167,170,173,174,1,76,177,178,179,180,181,36,182,183,77,77',
'71,184,21,18,188,15,11,71,22,22,192,193,199,91,22,22,3,135,88,87,6,96',
'97,75,70,150,149,27,100,61,101,7,102,103,196,104,105,106,134,24,107',
'108,109,,74,24,,,132,,36,58,40,40,,135,36,71,185,36,24,25,154,147,190',
',71,95,,24,24,24,,24,24,24,,,,,,6,,,26,72,51,12,6,6,,,,53,6,,195,,190',
',74,34,,24,24,,144,24,24,27,73,26,,185,55,,,145,,73,145,40,55,,98,171',
'27,25,,,,40,43,,,19,19,48,67,,,51,9,50,6,145,48,74,50,54,,24,5,27,,189',
'24,24,24,24,24,,94,,51,26,8,93,,49,139,139,,68,49,14,98,190,,73,176',
',,176,,23,,,,,68,23,40,,,,99,39,25,,,,187,187,5,187,187,,187,139,189',
'34,,,6,,200,,,23,,,61,,145,,65,68,,68,,,6,6,,64,6,36,76,17,72,2,,77',
'42,,24,24,24,24,42,,9,24,24,24,24,24,24,74,12,,6,10,10,74,41,185,61',
'189,24,154,41,,34,,,,,55,,,,74,12,20,,,,,26,,53,6,6,,,23,,,53,6,6,36',
'24,,23,,,13,24,,,24,,51,,74,189,,189,,,,41,139,,,6,,,,,24,,24,,61,30',
'24,24,76,73,187,187,187,187,61,,12,40,,74,,12,,24,9,25,92,51,51,74,',
'189,24,,24,138,,,,10,,36,,,,51,,24,24,,73,51,,,,,68,,,23,24,,24,,68',
',6,,,,,,,187,,61,,,,92,138,,,23,98,98,,,,,74,,,,,,,,,89,98,92,,,,,140',
'22,22,,24,,,22,22,61,34,22,,65,,34,133,185,53,,,,64,26,32,32,17,,32',
'53,,95,155,,,,,34,6,,23,,23,6,73,140,,23,140,,71,,24,,,,,189,6,34,189',
',10,10,,,60,6,6,,,,23,,,,,32,32,32,32,74,,,74,189,,,,,71,34,,,,36,,',
'19,6,,6,,,,,,,,24,,,,,189,68,24,,24,,6,,,51,24,61,68,51,,,,,24,,22,',
',61,,191,,,74,,,,6,98,,,23,51,98,138,34,,138,,,138,143,138,,,189,,,6',
'6,6,133,,,133,,40,32,32,32,32,24,25,,24,,,,,51,24,,6,,,12,6,,12,,,,24',
',,,24,,19,,,,143,,143,,,34,,,,19,,,,140,,,140,,,140,,140,,,,,,68,,24',
'24,,,,,24,24,,,24,,,98,,23,,,,51,,98,,138,,138,,138,,138,,,,51,,,,,',
',,24,,,,,,,32,,,,24,,,,,133,51,133,,32,32,,24,24,,,,,,34,,138,,,,,12',
'12,,,6,6,6,6,23,6,,23,,,,68,140,98,140,,140,27,140,61,,24,,68,,,,24',
',,,,,24,24,36,,,6,,24,191,44,,191,,,191,44,191,,24,,,12,,,133,133,,6',
',140,44,,,34,,143,61,143,6,44,44,44,,44,,6,6,6,6,24,,74,24,,,,24,24',
',,143,,143,,143,,12,24,,6,12,12,,44,44,,,44,133,,133,12,,,,,,,,,,,,',
',23,23,24,,24,24,,,,,141,141,141,,24,24,,,12,12,,133,,191,,191,44,191',
',191,,44,44,44,44,44,,,,,,56,32,,143,,143,56,143,24,,23,23,24,,,,24',
'23,,,24,,143,,,,12,,,,12,,191,,56,56,56,,,,,,,,,,24,,,,,,,143,,,,,,',
'12,,23,,,,23,23,,56,32,,56,,32,,,23,,24,44,44,44,44,,,,44,44,44,44,44',
'44,12,24,,,,,24,,,24,24,44,,,,12,23,23,,56,12,,,,,,23,24,56,,,141,141',
'141,141,,141,,,,,,,,,44,,,,,,44,,,44,,,,,,,,,,,23,,,,23,,29,,,44,,44',
'29,,,,44,,,,,,,,,,,,,,,,,,23,,,,,,29,44,,44,141,141,141,141,,56,,,,',
'32,,44,44,,,,,,,,,,23,141,,,,,56,,29,,,57,,,,23,,57,,,23,,,23,23,,,',
',,,,,,,,,,,,,,,,,57,57,57,,,,29,44,,,,,,,,29,,,,,,,,,56,,56,,,,56,56',
',,,57,,,57,,,,,,,,,56,,,,32,,,,44,56,,,,,,,,32,,,,,,,,,,,,,,57,,,,,',
'56,,56,57,,,,,,,,,,,,,,29,,,,,,,,29,,,44,,,,,,,,,44,,,,29,,,,,,,,,56',
'44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,44,,,44,,29,,29',
',44,,,29,,57,,,,,,,44,,,,44,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,56,,,,44',
'44,,56,,,44,44,,,44,56,,,,,,57,,57,,,28,57,57,,,,28,,,,,,,,,,,,57,,',
',,,,,,57,,,,,,29,28,28,28,,,,,,44,44,,56,,,56,,,,,,,57,,57,,,,,,,,,',
',,28,,,,,,,,,,,,44,,,,,,44,,,,,,44,44,,,,,,44,,,,,57,,,,,,44,28,,,,',
',,,,28,,,,,,,,,,,,,,,,,29,,,,,,,44,56,,,44,44,,,,,,,56,,,44,,,,,,,,',
'56,56,,,,,,,,,,,,,,,,,,,,44,,44,44,,,,,,,,,44,44,,,,28,,29,57,,29,,',
',,57,,,56,56,,,,57,,56,,,,28,,,,,,,,,,44,,,,44,,,,,,,,,,,,,,,,,,,,,',
',,56,,,56,,,44,56,56,,29,,57,,,57,,,56,,,,,,,28,,28,,,,28,28,,,,,,,44',
',,,,,,,,28,,56,56,,,44,,,28,,44,56,,44,44,29,29,,,,,,,,,,,,,,,44,,,',
',28,,28,,,,,,,,56,,,,56,,,,56,,,,56,,,,,,57,,29,29,,,,,,29,,57,,,,,',
',,,56,,28,57,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,29,,,,29,29,,,,,,,,,56',
'29,,,,56,57,57,56,56,,,,57,,,,,,,,,,,,,,,,,,,,29,29,,,,,,,,,29,,,,,',
',,,,,,57,,,57,28,,,57,57,,,28,,,,,,,57,28,,,,,,,,29,,,,29,,,,29,,,,',
',,,,,,,,69,,57,57,,,,69,,,,35,57,29,,,,,,,35,35,35,,,,,28,,,28,,,35',
'35,35,,,,,,,,,,,29,57,,,35,57,,,,57,,,,57,,29,,,,,29,,,29,29,,,69,,69',
',69,,69,69,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,,69,,28,',
',,,57,,,,,57,28,,57,57,,,,,,,,,28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,35,35,,28,28,35,35,69,,28,28,,,,,,,,,,,35,,,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
',,28,,,28,35,,,28,28,,35,,,35,,,,,28,,35,,35,,35,,35,35,,,,,,,,,,,69',
',,69,,69,,,,,,,28,28,,,,,,,,,28,,,,35,,,,,,,,,35,,,,,,69,,,69,,,,,,',
',,,,,,28,,,,28,,,,28,,,,28,,69,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,',
',,,,,,,,35,,,,,,,,,,,,,28,,,,,,,,,69,,,,69,69,28,,,,,28,,,28,28,35,',
'35,35,35,,,,,,,,,,,,,,,,,,,,,69,,,69,,,,,,,,,,,,,,,,,35,,69,35,,35,',
',,,,,,,,,,,,,,35,69,,,,,,,,35,35,,,,,,,,,,35,69,,35,,,,,,,,,,,,,,,,',
',,,,,,,,,,35,,,,,69,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,',
',,,,,,,35,,,35,,,,,,,69,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,',
',,,,,,,,,,,35,69,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,',
',,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3210, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   178,    25,   206,   nil,    49,    -2,   107,    63,    36,
  -304,   186,   241,  -513,  -626,  -627,   nil,    22,   181,   -18,
  -177,   121,   -12,   373,   227,  -203,  -385,    -7,  1653,  1282,
  -171,   -46,   587,    38,   -20,  2196,   -27,   nil,   nil,    18,
  -210,    28,  -210,  -347,   991,  -334,  -660,   nil,    60,    61,
    35,    55,   nil,   -36,    37,  -214,  1118,  1354,  -508,  -232,
   -66,     5,   nil,   nil,    18,     9,  -262,    11,    61,  1998,
   152,   -20,  -272,    33,    21,  -273,  -246,  -452,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   135,  -128,   -46,
   nil,   138,  -310,  -667,  -509,  -331,   140,  -390,    21,  -562,
   144,   160,   161,  -314,   162,   158,  -506,   161,  -505,  -363,
  -827,    51,  -617,  -220,  -617,  -804,    68,  -462,  -225,  -461,
  -726,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -748,    78,  -493,  -777,  -513,   nil,  -106,  -435,
   -35,   291,  -511,   125,  -595,  -584,   nil,  -550,  -744,  -792,
  -793,  -182,  -389,    96,  -298,    -6,   -96,  -500,   nil,   nil,
  -103,  -502,  -102,  -501,  -820,  -418,  -526,  -652,   nil,   nil,
    95,    29,    36,    90,    90,  -260,  -249,    92,    92,    92,
  -580,  -427,  -426,    96,  -563,  -302,   nil,  -446,  -519,  -205,
  -637,   104,  -509,  -687,   nil,  -633,  -774,   nil,   nil,  -171,
  -479 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   347,   295,
   nil,   nil,   535,   nil,   853,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   750,   228,   229,
   nil,   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,
   692,   nil,   nil,   nil,   312,   nil,   nil,    28,   423,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   599,   nil,
   132,   431,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   424,   nil,   425,   436,   647,   498,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   583,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   722,   565,   nil,   723,   952,   795,   553,   nil,
   554,   nil,   nil,   555,   nil,   557,   663,   nil,   nil,   nil,
   563,   nil,   nil,   nil,   760,   nil,   nil,   nil,   435,   269,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   837,   552,   nil,   556,   845,
   568,   570,   571,   807,   574,   575,   808,   578,   581,   nil,
   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 178, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 211, :_reduce_122,
  4, 163, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  0, 248, :_reduce_286,
  5, 213, :_reduce_287,
  3, 213, :_reduce_288,
  3, 213, :_reduce_289,
  2, 213, :_reduce_290,
  3, 213, :_reduce_291,
  0, 249, :_reduce_292,
  4, 213, :_reduce_293,
  1, 213, :_reduce_294,
  4, 213, :_reduce_295,
  3, 213, :_reduce_296,
  1, 213, :_reduce_297,
  5, 213, :_reduce_298,
  4, 213, :_reduce_299,
  3, 213, :_reduce_300,
  2, 213, :_reduce_301,
  1, 213, :_reduce_none,
  2, 213, :_reduce_303,
  2, 213, :_reduce_304,
  6, 213, :_reduce_305,
  6, 213, :_reduce_306,
  0, 250, :_reduce_307,
  0, 251, :_reduce_308,
  7, 213, :_reduce_309,
  0, 252, :_reduce_310,
  0, 253, :_reduce_311,
  7, 213, :_reduce_312,
  5, 213, :_reduce_313,
  4, 213, :_reduce_314,
  0, 254, :_reduce_315,
  0, 255, :_reduce_316,
  9, 213, :_reduce_317,
  0, 256, :_reduce_318,
  0, 257, :_reduce_319,
  7, 213, :_reduce_320,
  0, 258, :_reduce_321,
  0, 259, :_reduce_322,
  0, 260, :_reduce_323,
  9, 213, :_reduce_324,
  0, 261, :_reduce_325,
  0, 262, :_reduce_326,
  6, 213, :_reduce_327,
  0, 263, :_reduce_328,
  6, 213, :_reduce_329,
  0, 264, :_reduce_330,
  0, 265, :_reduce_331,
  9, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 213, :_reduce_335,
  1, 213, :_reduce_336,
  1, 169, :_reduce_337,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_355,
  1, 159, :_reduce_none,
  2, 159, :_reduce_357,
  1, 241, :_reduce_none,
  1, 241, :_reduce_359,
  1, 277, :_reduce_none,
  3, 277, :_reduce_361,
  1, 280, :_reduce_362,
  3, 280, :_reduce_363,
  1, 279, :_reduce_364,
  4, 279, :_reduce_365,
  6, 279, :_reduce_366,
  3, 279, :_reduce_367,
  5, 279, :_reduce_368,
  2, 279, :_reduce_369,
  4, 279, :_reduce_370,
  1, 279, :_reduce_371,
  3, 279, :_reduce_372,
  4, 281, :_reduce_373,
  2, 281, :_reduce_374,
  2, 281, :_reduce_375,
  1, 281, :_reduce_376,
  2, 286, :_reduce_377,
  1, 286, :_reduce_none,
  6, 287, :_reduce_379,
  8, 287, :_reduce_380,
  4, 287, :_reduce_381,
  6, 287, :_reduce_382,
  4, 287, :_reduce_383,
  2, 287, :_reduce_384,
  6, 287, :_reduce_385,
  2, 287, :_reduce_386,
  4, 287, :_reduce_387,
  6, 287, :_reduce_388,
  2, 287, :_reduce_389,
  4, 287, :_reduce_390,
  2, 287, :_reduce_391,
  4, 287, :_reduce_392,
  1, 287, :_reduce_393,
  1, 188, :_reduce_394,
  1, 188, :_reduce_none,
  3, 291, :_reduce_396,
  1, 291, :_reduce_397,
  4, 291, :_reduce_398,
  1, 292, :_reduce_none,
  4, 292, :_reduce_400,
  1, 293, :_reduce_401,
  3, 293, :_reduce_402,
  1, 294, :_reduce_403,
  1, 294, :_reduce_none,
  0, 298, :_reduce_405,
  3, 236, :_reduce_406,
  4, 296, :_reduce_407,
  1, 296, :_reduce_408,
  3, 297, :_reduce_409,
  3, 297, :_reduce_410,
  0, 301, :_reduce_411,
  0, 302, :_reduce_412,
  6, 300, :_reduce_413,
  2, 183, :_reduce_414,
  4, 183, :_reduce_415,
  5, 183, :_reduce_416,
  5, 183, :_reduce_417,
  0, 304, :_reduce_418,
  3, 235, :_reduce_419,
  4, 235, :_reduce_420,
  4, 235, :_reduce_421,
  3, 235, :_reduce_422,
  3, 235, :_reduce_423,
  3, 235, :_reduce_424,
  2, 235, :_reduce_425,
  1, 235, :_reduce_426,
  4, 235, :_reduce_427,
  0, 305, :_reduce_428,
  0, 306, :_reduce_429,
  6, 234, :_reduce_430,
  0, 307, :_reduce_431,
  0, 308, :_reduce_432,
  6, 234, :_reduce_433,
  0, 310, :_reduce_434,
  6, 240, :_reduce_435,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  6, 158, :_reduce_438,
  0, 158, :_reduce_439,
  1, 311, :_reduce_440,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 312, :_reduce_443,
  1, 312, :_reduce_none,
  2, 160, :_reduce_445,
  1, 160, :_reduce_none,
  1, 224, :_reduce_447,
  1, 224, :_reduce_448,
  1, 224, :_reduce_none,
  1, 225, :_reduce_450,
  1, 314, :_reduce_451,
  1, 314, :_reduce_none,
  2, 314, :_reduce_453,
  3, 315, :_reduce_454,
  1, 315, :_reduce_455,
  3, 226, :_reduce_456,
  3, 227, :_reduce_457,
  3, 228, :_reduce_458,
  3, 228, :_reduce_459,
  1, 319, :_reduce_460,
  3, 319, :_reduce_461,
  1, 320, :_reduce_none,
  2, 320, :_reduce_463,
  3, 230, :_reduce_464,
  3, 230, :_reduce_465,
  1, 322, :_reduce_466,
  3, 322, :_reduce_467,
  3, 229, :_reduce_468,
  3, 229, :_reduce_469,
  3, 231, :_reduce_470,
  3, 231, :_reduce_471,
  1, 323, :_reduce_472,
  3, 323, :_reduce_473,
  1, 324, :_reduce_474,
  3, 324, :_reduce_475,
  1, 316, :_reduce_476,
  2, 316, :_reduce_477,
  1, 317, :_reduce_478,
  2, 317, :_reduce_479,
  1, 318, :_reduce_480,
  2, 318, :_reduce_481,
  1, 321, :_reduce_482,
  0, 326, :_reduce_483,
  3, 321, :_reduce_484,
  0, 327, :_reduce_485,
  4, 321, :_reduce_486,
  1, 325, :_reduce_487,
  1, 325, :_reduce_488,
  1, 325, :_reduce_489,
  1, 325, :_reduce_none,
  2, 209, :_reduce_491,
  1, 209, :_reduce_492,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  3, 210, :_reduce_497,
  1, 313, :_reduce_none,
  2, 313, :_reduce_499,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 202, :_reduce_514,
  1, 202, :_reduce_515,
  1, 232, :_reduce_516,
  1, 232, :_reduce_517,
  1, 168, :_reduce_518,
  1, 168, :_reduce_519,
  1, 173, :_reduce_520,
  1, 173, :_reduce_521,
  1, 242, :_reduce_522,
  0, 329, :_reduce_523,
  4, 242, :_reduce_524,
  2, 242, :_reduce_525,
  3, 244, :_reduce_526,
  2, 244, :_reduce_527,
  4, 330, :_reduce_528,
  2, 330, :_reduce_529,
  2, 330, :_reduce_530,
  1, 330, :_reduce_none,
  2, 332, :_reduce_532,
  0, 332, :_reduce_533,
  6, 299, :_reduce_534,
  8, 299, :_reduce_535,
  4, 299, :_reduce_536,
  6, 299, :_reduce_537,
  4, 299, :_reduce_538,
  6, 299, :_reduce_539,
  2, 299, :_reduce_540,
  4, 299, :_reduce_541,
  6, 299, :_reduce_542,
  2, 299, :_reduce_543,
  4, 299, :_reduce_544,
  2, 299, :_reduce_545,
  4, 299, :_reduce_546,
  1, 299, :_reduce_547,
  0, 299, :_reduce_548,
  1, 295, :_reduce_549,
  1, 295, :_reduce_550,
  1, 295, :_reduce_551,
  1, 295, :_reduce_552,
  1, 278, :_reduce_none,
  1, 278, :_reduce_554,
  1, 334, :_reduce_none,
  1, 335, :_reduce_none,
  3, 335, :_reduce_557,
  1, 288, :_reduce_558,
  3, 288, :_reduce_559,
  1, 336, :_reduce_none,
  2, 337, :_reduce_561,
  1, 337, :_reduce_562,
  2, 338, :_reduce_563,
  1, 338, :_reduce_564,
  1, 282, :_reduce_none,
  3, 282, :_reduce_566,
  1, 331, :_reduce_none,
  3, 331, :_reduce_568,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 283, :_reduce_571,
  1, 283, :_reduce_572,
  3, 340, :_reduce_573,
  3, 341, :_reduce_574,
  1, 289, :_reduce_575,
  3, 289, :_reduce_576,
  1, 333, :_reduce_577,
  3, 333, :_reduce_578,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 290, :_reduce_581,
  1, 290, :_reduce_582,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 285, :_reduce_585,
  2, 284, :_reduce_586,
  0, 284, :_reduce_587,
  1, 245, :_reduce_none,
  0, 344, :_reduce_589,
  4, 245, :_reduce_590,
  1, 233, :_reduce_591,
  2, 233, :_reduce_592,
  1, 218, :_reduce_none,
  3, 218, :_reduce_594,
  3, 345, :_reduce_595,
  2, 345, :_reduce_596,
  4, 345, :_reduce_597,
  2, 345, :_reduce_598,
  2, 345, :_reduce_599,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 172, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 171, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_622,
  1, 243, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_625,
  0, 151, :_reduce_626 ]

racc_reduce_n = 627

racc_shift_n = 1057

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_598(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

# reduce 623 omitted

# reduce 624 omitted

def _reduce_625(val, _values, result)
 yyerrok 
    result
end

def _reduce_626(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
